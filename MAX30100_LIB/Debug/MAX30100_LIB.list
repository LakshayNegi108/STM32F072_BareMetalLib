
MAX30100_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002514  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080026c8  080026c8  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c8  080026c8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200000b0  08002780  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08002780  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000509d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001713  00000000  00000000  00025175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  00026888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ca7  00000000  00000000  00027360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007dd4  00000000  00000000  00041007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d599  00000000  00000000  00048ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001674  00000000  00000000  000d63c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b0 	.word	0x200000b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025bc 	.word	0x080025bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b4 	.word	0x200000b4
 8000104:	080025bc 	.word	0x080025bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MAX30100_readRegister>:
	i2c1.i2c = I2C1;
	i2c1.TIMING = STANDARD_MODE;
}

uint8_t MAX30100_readRegister(uint8_t address)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af02      	add	r7, sp, #8
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
	uint8_t rdata = 0;
 8000250:	240f      	movs	r4, #15
 8000252:	193b      	adds	r3, r7, r4
 8000254:	2200      	movs	r2, #0
 8000256:	701a      	strb	r2, [r3, #0]
    ret = I2C_MasterByteRead(I2C1, MAX30100_I2C_ADDRESS, address, &rdata, 100);
 8000258:	1939      	adds	r1, r7, r4
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MAX30100_readRegister+0x50>)
 8000260:	2364      	movs	r3, #100	; 0x64
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	000b      	movs	r3, r1
 8000266:	2157      	movs	r1, #87	; 0x57
 8000268:	f001 f9de 	bl	8001628 <I2C_MasterByteRead>
 800026c:	0003      	movs	r3, r0
 800026e:	001a      	movs	r2, r3
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MAX30100_readRegister+0x54>)
 8000272:	701a      	strb	r2, [r3, #0]
    if(ret == BML_OK){
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <MAX30100_readRegister+0x54>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <MAX30100_readRegister+0x3e>
    	 return rdata;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	e004      	b.n	800028c <MAX30100_readRegister+0x48>
    }
    else{
    	print("Error Reading\n");
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MAX30100_readRegister+0x58>)
 8000284:	0018      	movs	r0, r3
 8000286:	f001 fca7 	bl	8001bd8 <print>
    	return -1;
 800028a:	23ff      	movs	r3, #255	; 0xff
    }
}
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	b005      	add	sp, #20
 8000292:	bd90      	pop	{r4, r7, pc}
 8000294:	40005400 	.word	0x40005400
 8000298:	200000cc 	.word	0x200000cc
 800029c:	080025d4 	.word	0x080025d4

080002a0 <main>:
//    }
	I2C_MasterMultiRead(I2C1, MAX30100_I2C_ADDRESS, baseAddress, length, buffer, 100);
}


int main(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af02      	add	r7, sp, #8

	RCC_CONFIG_48MHZ();
 80002a6:	f001 fa8b 	bl	80017c0 <RCC_CONFIG_48MHZ>
	uart_print_config(9600);
 80002aa:	2396      	movs	r3, #150	; 0x96
 80002ac:	019b      	lsls	r3, r3, #6
 80002ae:	0018      	movs	r0, r3
 80002b0:	f001 fcba 	bl	8001c28 <uart_print_config>
	USART_WRITE(USART4, "Working\n\r", 9, 100);
 80002b4:	4930      	ldr	r1, [pc, #192]	; (8000378 <main+0xd8>)
 80002b6:	4831      	ldr	r0, [pc, #196]	; (800037c <main+0xdc>)
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	2209      	movs	r2, #9
 80002bc:	f001 fc50 	bl	8001b60 <USART_WRITE>

	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 80002c0:	482f      	ldr	r0, [pc, #188]	; (8000380 <main+0xe0>)
 80002c2:	2301      	movs	r3, #1
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2302      	movs	r3, #2
 80002cc:	2202      	movs	r2, #2
 80002ce:	2108      	movs	r1, #8
 80002d0:	f000 ff36 	bl	8001140 <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 80002d4:	482a      	ldr	r0, [pc, #168]	; (8000380 <main+0xe0>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2302      	movs	r3, #2
 80002e0:	2202      	movs	r2, #2
 80002e2:	2109      	movs	r1, #9
 80002e4:	f000 ff2c 	bl	8001140 <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 80002e8:	4b25      	ldr	r3, [pc, #148]	; (8000380 <main+0xe0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 ffed 	bl	80012ce <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 80002f4:	4b22      	ldr	r3, [pc, #136]	; (8000380 <main+0xe0>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	2109      	movs	r1, #9
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 ffe7 	bl	80012ce <gpio_altfn>

	I2C_INIT(I2C1, i2c1.TIMING);
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <main+0xe4>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <main+0xe8>)
 8000306:	0019      	movs	r1, r3
 8000308:	0010      	movs	r0, r2
 800030a:	f001 f8f1 	bl	80014f0 <I2C_INIT>

	ret = I2C_DeviceReady(I2C1, MAX30100_I2C_ADDRESS, 100);
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <main+0xe8>)
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	2157      	movs	r1, #87	; 0x57
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f927 	bl	8001568 <I2C_DeviceReady>
 800031a:	0003      	movs	r3, r0
 800031c:	001a      	movs	r2, r3
 800031e:	4b1b      	ldr	r3, [pc, #108]	; (800038c <main+0xec>)
 8000320:	701a      	strb	r2, [r3, #0]
	if(ret == BML_OK){
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <main+0xec>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d104      	bne.n	8000334 <main+0x94>
		print("Success\n");
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <main+0xf0>)
 800032c:	0018      	movs	r0, r3
 800032e:	f001 fc53 	bl	8001bd8 <print>
 8000332:	e003      	b.n	800033c <main+0x9c>
	}
	else{
		print("Device not found\n");
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <main+0xf4>)
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fc4e 	bl	8001bd8 <print>
	}

	int8_t ID = MAX30100_readRegister(0xFF);
 800033c:	20ff      	movs	r0, #255	; 0xff
 800033e:	f7ff ff81 	bl	8000244 <MAX30100_readRegister>
 8000342:	0003      	movs	r3, r0
 8000344:	001a      	movs	r2, r3
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	701a      	strb	r2, [r3, #0]
	print("ID: %x\n", ID);
 800034a:	1dfb      	adds	r3, r7, #7
 800034c:	2200      	movs	r2, #0
 800034e:	569a      	ldrsb	r2, [r3, r2]
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <main+0xf8>)
 8000352:	0011      	movs	r1, r2
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fc3f 	bl	8001bd8 <print>
	if(ID == 0x11){
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	b25b      	sxtb	r3, r3
 8000360:	2b11      	cmp	r3, #17
 8000362:	d104      	bne.n	800036e <main+0xce>
		print("ID OK\n");
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <main+0xfc>)
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fc36 	bl	8001bd8 <print>
 800036c:	e003      	b.n	8000376 <main+0xd6>
	}
	else{
		print("Wrong ID\n");
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <main+0x100>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 fc31 	bl	8001bd8 <print>
	}

	for(;;){
 8000376:	e7fe      	b.n	8000376 <main+0xd6>
 8000378:	080025e4 	.word	0x080025e4
 800037c:	40004c00 	.word	0x40004c00
 8000380:	48000400 	.word	0x48000400
 8000384:	200000d0 	.word	0x200000d0
 8000388:	40005400 	.word	0x40005400
 800038c:	200000cc 	.word	0x200000cc
 8000390:	080025f0 	.word	0x080025f0
 8000394:	080025fc 	.word	0x080025fc
 8000398:	08002610 	.word	0x08002610
 800039c:	08002618 	.word	0x08002618
 80003a0:	08002620 	.word	0x08002620

080003a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <NMI_Handler+0x4>

080003aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <HardFault_Handler+0x4>

080003b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c8:	f000 f89e 	bl	8000508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b086      	sub	sp, #24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <_sbrk+0x5c>)
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <_sbrk+0x60>)
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <_sbrk+0x64>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d102      	bne.n	80003f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <_sbrk+0x64>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	; (800043c <_sbrk+0x68>)
 80003f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	18d3      	adds	r3, r2, r3
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	429a      	cmp	r2, r3
 8000402:	d207      	bcs.n	8000414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000404:	f001 fc26 	bl	8001c54 <__errno>
 8000408:	0003      	movs	r3, r0
 800040a:	220c      	movs	r2, #12
 800040c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	e009      	b.n	8000428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <_sbrk+0x64>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <_sbrk+0x64>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	18d2      	adds	r2, r2, r3
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <_sbrk+0x64>)
 8000424:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b006      	add	sp, #24
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20004000 	.word	0x20004000
 8000434:	00000400 	.word	0x00000400
 8000438:	200000d8 	.word	0x200000d8
 800043c:	200001f8 	.word	0x200001f8

08000440 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490e      	ldr	r1, [pc, #56]	; (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0b      	ldr	r4, [pc, #44]	; (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000476:	f7ff ffe3 	bl	8000440 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800047a:	f001 fbf1 	bl	8001c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff ff0f 	bl	80002a0 <main>

08000482 <LoopForever>:

LoopForever:
    b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000490:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8000494:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000498:	200001f4 	.word	0x200001f4

0800049c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC1_COMP_IRQHandler>
	...

080004a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <HAL_InitTick+0x5c>)
 80004aa:	681c      	ldr	r4, [r3, #0]
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_InitTick+0x60>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	0019      	movs	r1, r3
 80004b2:	23fa      	movs	r3, #250	; 0xfa
 80004b4:	0098      	lsls	r0, r3, #2
 80004b6:	f7ff fe39 	bl	800012c <__udivsi3>
 80004ba:	0003      	movs	r3, r0
 80004bc:	0019      	movs	r1, r3
 80004be:	0020      	movs	r0, r4
 80004c0:	f7ff fe34 	bl	800012c <__udivsi3>
 80004c4:	0003      	movs	r3, r0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f905 	bl	80006d6 <HAL_SYSTICK_Config>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e00f      	b.n	80004f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d80b      	bhi.n	80004f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	2301      	movs	r3, #1
 80004de:	425b      	negs	r3, r3
 80004e0:	2200      	movs	r2, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f8e2 	bl	80006ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_InitTick+0x64>)
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	e000      	b.n	80004f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b003      	add	sp, #12
 80004fa:	bd90      	pop	{r4, r7, pc}
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000008 	.word	0x20000008
 8000504:	20000004 	.word	0x20000004

08000508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_IncTick+0x1c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	001a      	movs	r2, r3
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_IncTick+0x20>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	18d2      	adds	r2, r2, r3
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HAL_IncTick+0x20>)
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	20000008 	.word	0x20000008
 8000528:	200000dc 	.word	0x200000dc

0800052c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <HAL_GetTick+0x10>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	200000dc 	.word	0x200000dc

08000540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000548:	f7ff fff0 	bl	800052c <HAL_GetTick>
 800054c:	0003      	movs	r3, r0
 800054e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	d005      	beq.n	8000566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_Delay+0x44>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	001a      	movs	r2, r3
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	189b      	adds	r3, r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	f7ff ffe0 	bl	800052c <HAL_GetTick>
 800056c:	0002      	movs	r2, r0
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d8f7      	bhi.n	8000568 <HAL_Delay+0x28>
  {
  }
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b004      	add	sp, #16
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000008 	.word	0x20000008

08000588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	0002      	movs	r2, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b7f      	cmp	r3, #127	; 0x7f
 800059c:	d828      	bhi.n	80005f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <__NVIC_SetPriority+0xd4>)
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	089b      	lsrs	r3, r3, #2
 80005a8:	33c0      	adds	r3, #192	; 0xc0
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	589b      	ldr	r3, [r3, r2]
 80005ae:	1dfa      	adds	r2, r7, #7
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	0011      	movs	r1, r2
 80005b4:	2203      	movs	r2, #3
 80005b6:	400a      	ands	r2, r1
 80005b8:	00d2      	lsls	r2, r2, #3
 80005ba:	21ff      	movs	r1, #255	; 0xff
 80005bc:	4091      	lsls	r1, r2
 80005be:	000a      	movs	r2, r1
 80005c0:	43d2      	mvns	r2, r2
 80005c2:	401a      	ands	r2, r3
 80005c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	019b      	lsls	r3, r3, #6
 80005ca:	22ff      	movs	r2, #255	; 0xff
 80005cc:	401a      	ands	r2, r3
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	0018      	movs	r0, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	4003      	ands	r3, r0
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	481f      	ldr	r0, [pc, #124]	; (800065c <__NVIC_SetPriority+0xd4>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	430a      	orrs	r2, r1
 80005e8:	33c0      	adds	r3, #192	; 0xc0
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005ee:	e031      	b.n	8000654 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <__NVIC_SetPriority+0xd8>)
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	0019      	movs	r1, r3
 80005f8:	230f      	movs	r3, #15
 80005fa:	400b      	ands	r3, r1
 80005fc:	3b08      	subs	r3, #8
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	3306      	adds	r3, #6
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	18d3      	adds	r3, r2, r3
 8000606:	3304      	adds	r3, #4
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1dfa      	adds	r2, r7, #7
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	0011      	movs	r1, r2
 8000610:	2203      	movs	r2, #3
 8000612:	400a      	ands	r2, r1
 8000614:	00d2      	lsls	r2, r2, #3
 8000616:	21ff      	movs	r1, #255	; 0xff
 8000618:	4091      	lsls	r1, r2
 800061a:	000a      	movs	r2, r1
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	22ff      	movs	r2, #255	; 0xff
 8000628:	401a      	ands	r2, r3
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	0018      	movs	r0, r3
 8000630:	2303      	movs	r3, #3
 8000632:	4003      	ands	r3, r0
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <__NVIC_SetPriority+0xd8>)
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	001c      	movs	r4, r3
 8000640:	230f      	movs	r3, #15
 8000642:	4023      	ands	r3, r4
 8000644:	3b08      	subs	r3, #8
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	430a      	orrs	r2, r1
 800064a:	3306      	adds	r3, #6
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	18c3      	adds	r3, r0, r3
 8000650:	3304      	adds	r3, #4
 8000652:	601a      	str	r2, [r3, #0]
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b003      	add	sp, #12
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1e5a      	subs	r2, r3, #1
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	045b      	lsls	r3, r3, #17
 8000674:	429a      	cmp	r2, r3
 8000676:	d301      	bcc.n	800067c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000678:	2301      	movs	r3, #1
 800067a:	e010      	b.n	800069e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <SysTick_Config+0x44>)
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	3a01      	subs	r2, #1
 8000682:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000684:	2301      	movs	r3, #1
 8000686:	425b      	negs	r3, r3
 8000688:	2103      	movs	r1, #3
 800068a:	0018      	movs	r0, r3
 800068c:	f7ff ff7c 	bl	8000588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <SysTick_Config+0x44>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <SysTick_Config+0x44>)
 8000698:	2207      	movs	r2, #7
 800069a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800069c:	2300      	movs	r3, #0
}
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	e000e010 	.word	0xe000e010

080006ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	210f      	movs	r1, #15
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	1c02      	adds	r2, r0, #0
 80006bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ff5d 	bl	8000588 <__NVIC_SetPriority>
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b004      	add	sp, #16
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ffbf 	bl	8000664 <SysTick_Config>
 80006e6:	0003      	movs	r3, r0
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b002      	add	sp, #8
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	f000 fb76 	bl	8000df0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4013      	ands	r3, r2
 800070c:	d100      	bne.n	8000710 <HAL_RCC_OscConfig+0x20>
 800070e:	e08e      	b.n	800082e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000710:	4bc5      	ldr	r3, [pc, #788]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	220c      	movs	r2, #12
 8000716:	4013      	ands	r3, r2
 8000718:	2b04      	cmp	r3, #4
 800071a:	d00e      	beq.n	800073a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800071c:	4bc2      	ldr	r3, [pc, #776]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	220c      	movs	r2, #12
 8000722:	4013      	ands	r3, r2
 8000724:	2b08      	cmp	r3, #8
 8000726:	d117      	bne.n	8000758 <HAL_RCC_OscConfig+0x68>
 8000728:	4bbf      	ldr	r3, [pc, #764]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800072a:	685a      	ldr	r2, [r3, #4]
 800072c:	23c0      	movs	r3, #192	; 0xc0
 800072e:	025b      	lsls	r3, r3, #9
 8000730:	401a      	ands	r2, r3
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	025b      	lsls	r3, r3, #9
 8000736:	429a      	cmp	r2, r3
 8000738:	d10e      	bne.n	8000758 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800073a:	4bbb      	ldr	r3, [pc, #748]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	029b      	lsls	r3, r3, #10
 8000742:	4013      	ands	r3, r2
 8000744:	d100      	bne.n	8000748 <HAL_RCC_OscConfig+0x58>
 8000746:	e071      	b.n	800082c <HAL_RCC_OscConfig+0x13c>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d000      	beq.n	8000752 <HAL_RCC_OscConfig+0x62>
 8000750:	e06c      	b.n	800082c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	f000 fb4c 	bl	8000df0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d107      	bne.n	8000770 <HAL_RCC_OscConfig+0x80>
 8000760:	4bb1      	ldr	r3, [pc, #708]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4bb0      	ldr	r3, [pc, #704]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0249      	lsls	r1, r1, #9
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e02f      	b.n	80007d0 <HAL_RCC_OscConfig+0xe0>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10c      	bne.n	8000792 <HAL_RCC_OscConfig+0xa2>
 8000778:	4bab      	ldr	r3, [pc, #684]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4baa      	ldr	r3, [pc, #680]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800077e:	49ab      	ldr	r1, [pc, #684]	; (8000a2c <HAL_RCC_OscConfig+0x33c>)
 8000780:	400a      	ands	r2, r1
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	4ba8      	ldr	r3, [pc, #672]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4ba7      	ldr	r3, [pc, #668]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800078a:	49a9      	ldr	r1, [pc, #676]	; (8000a30 <HAL_RCC_OscConfig+0x340>)
 800078c:	400a      	ands	r2, r1
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e01e      	b.n	80007d0 <HAL_RCC_OscConfig+0xe0>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	2b05      	cmp	r3, #5
 8000798:	d10e      	bne.n	80007b8 <HAL_RCC_OscConfig+0xc8>
 800079a:	4ba3      	ldr	r3, [pc, #652]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4ba2      	ldr	r3, [pc, #648]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	02c9      	lsls	r1, r1, #11
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	4b9f      	ldr	r3, [pc, #636]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b9e      	ldr	r3, [pc, #632]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0249      	lsls	r1, r1, #9
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e00b      	b.n	80007d0 <HAL_RCC_OscConfig+0xe0>
 80007b8:	4b9b      	ldr	r3, [pc, #620]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b9a      	ldr	r3, [pc, #616]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007be:	499b      	ldr	r1, [pc, #620]	; (8000a2c <HAL_RCC_OscConfig+0x33c>)
 80007c0:	400a      	ands	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	4b98      	ldr	r3, [pc, #608]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b97      	ldr	r3, [pc, #604]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007ca:	4999      	ldr	r1, [pc, #612]	; (8000a30 <HAL_RCC_OscConfig+0x340>)
 80007cc:	400a      	ands	r2, r1
 80007ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d014      	beq.n	8000802 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d8:	f7ff fea8 	bl	800052c <HAL_GetTick>
 80007dc:	0003      	movs	r3, r0
 80007de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e0:	e008      	b.n	80007f4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e2:	f7ff fea3 	bl	800052c <HAL_GetTick>
 80007e6:	0002      	movs	r2, r0
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	2b64      	cmp	r3, #100	; 0x64
 80007ee:	d901      	bls.n	80007f4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80007f0:	2303      	movs	r3, #3
 80007f2:	e2fd      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f4:	4b8c      	ldr	r3, [pc, #560]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	029b      	lsls	r3, r3, #10
 80007fc:	4013      	ands	r3, r2
 80007fe:	d0f0      	beq.n	80007e2 <HAL_RCC_OscConfig+0xf2>
 8000800:	e015      	b.n	800082e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000802:	f7ff fe93 	bl	800052c <HAL_GetTick>
 8000806:	0003      	movs	r3, r0
 8000808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080a:	e008      	b.n	800081e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080c:	f7ff fe8e 	bl	800052c <HAL_GetTick>
 8000810:	0002      	movs	r2, r0
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b64      	cmp	r3, #100	; 0x64
 8000818:	d901      	bls.n	800081e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800081a:	2303      	movs	r3, #3
 800081c:	e2e8      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800081e:	4b82      	ldr	r3, [pc, #520]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	029b      	lsls	r3, r3, #10
 8000826:	4013      	ands	r3, r2
 8000828:	d1f0      	bne.n	800080c <HAL_RCC_OscConfig+0x11c>
 800082a:	e000      	b.n	800082e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	d100      	bne.n	800083a <HAL_RCC_OscConfig+0x14a>
 8000838:	e06c      	b.n	8000914 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800083a:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	220c      	movs	r2, #12
 8000840:	4013      	ands	r3, r2
 8000842:	d00e      	beq.n	8000862 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000844:	4b78      	ldr	r3, [pc, #480]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	220c      	movs	r2, #12
 800084a:	4013      	ands	r3, r2
 800084c:	2b08      	cmp	r3, #8
 800084e:	d11f      	bne.n	8000890 <HAL_RCC_OscConfig+0x1a0>
 8000850:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	23c0      	movs	r3, #192	; 0xc0
 8000856:	025b      	lsls	r3, r3, #9
 8000858:	401a      	ands	r2, r3
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	429a      	cmp	r2, r3
 8000860:	d116      	bne.n	8000890 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000862:	4b71      	ldr	r3, [pc, #452]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2202      	movs	r2, #2
 8000868:	4013      	ands	r3, r2
 800086a:	d005      	beq.n	8000878 <HAL_RCC_OscConfig+0x188>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d001      	beq.n	8000878 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e2bb      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000878:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	22f8      	movs	r2, #248	; 0xf8
 800087e:	4393      	bics	r3, r2
 8000880:	0019      	movs	r1, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	00da      	lsls	r2, r3, #3
 8000888:	4b67      	ldr	r3, [pc, #412]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800088e:	e041      	b.n	8000914 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d024      	beq.n	80008e2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000898:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a4:	f7ff fe42 	bl	800052c <HAL_GetTick>
 80008a8:	0003      	movs	r3, r0
 80008aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ac:	e008      	b.n	80008c0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ae:	f7ff fe3d 	bl	800052c <HAL_GetTick>
 80008b2:	0002      	movs	r2, r0
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d901      	bls.n	80008c0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80008bc:	2303      	movs	r3, #3
 80008be:	e297      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c0:	4b59      	ldr	r3, [pc, #356]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2202      	movs	r2, #2
 80008c6:	4013      	ands	r3, r2
 80008c8:	d0f1      	beq.n	80008ae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	22f8      	movs	r2, #248	; 0xf8
 80008d0:	4393      	bics	r3, r2
 80008d2:	0019      	movs	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	00da      	lsls	r2, r3, #3
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e018      	b.n	8000914 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008e2:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	438a      	bics	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ee:	f7ff fe1d 	bl	800052c <HAL_GetTick>
 80008f2:	0003      	movs	r3, r0
 80008f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f6:	e008      	b.n	800090a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f8:	f7ff fe18 	bl	800052c <HAL_GetTick>
 80008fc:	0002      	movs	r2, r0
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b02      	cmp	r3, #2
 8000904:	d901      	bls.n	800090a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000906:	2303      	movs	r3, #3
 8000908:	e272      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2202      	movs	r2, #2
 8000910:	4013      	ands	r3, r2
 8000912:	d1f1      	bne.n	80008f8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2208      	movs	r2, #8
 800091a:	4013      	ands	r3, r2
 800091c:	d036      	beq.n	800098c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d019      	beq.n	800095a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092a:	4b3f      	ldr	r3, [pc, #252]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000932:	f7ff fdfb 	bl	800052c <HAL_GetTick>
 8000936:	0003      	movs	r3, r0
 8000938:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800093c:	f7ff fdf6 	bl	800052c <HAL_GetTick>
 8000940:	0002      	movs	r2, r0
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e250      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	2202      	movs	r2, #2
 8000954:	4013      	ands	r3, r2
 8000956:	d0f1      	beq.n	800093c <HAL_RCC_OscConfig+0x24c>
 8000958:	e018      	b.n	800098c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 800095c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000960:	2101      	movs	r1, #1
 8000962:	438a      	bics	r2, r1
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000966:	f7ff fde1 	bl	800052c <HAL_GetTick>
 800096a:	0003      	movs	r3, r0
 800096c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800096e:	e008      	b.n	8000982 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000970:	f7ff fddc 	bl	800052c <HAL_GetTick>
 8000974:	0002      	movs	r2, r0
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b02      	cmp	r3, #2
 800097c:	d901      	bls.n	8000982 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800097e:	2303      	movs	r3, #3
 8000980:	e236      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	2202      	movs	r2, #2
 8000988:	4013      	ands	r3, r2
 800098a:	d1f1      	bne.n	8000970 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2204      	movs	r2, #4
 8000992:	4013      	ands	r3, r2
 8000994:	d100      	bne.n	8000998 <HAL_RCC_OscConfig+0x2a8>
 8000996:	e0b5      	b.n	8000b04 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000998:	201f      	movs	r0, #31
 800099a:	183b      	adds	r3, r7, r0
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80009a2:	69da      	ldr	r2, [r3, #28]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	055b      	lsls	r3, r3, #21
 80009a8:	4013      	ands	r3, r2
 80009aa:	d110      	bne.n	80009ce <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80009ae:	69da      	ldr	r2, [r3, #28]
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	0549      	lsls	r1, r1, #21
 80009b6:	430a      	orrs	r2, r1
 80009b8:	61da      	str	r2, [r3, #28]
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	055b      	lsls	r3, r3, #21
 80009c2:	4013      	ands	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_RCC_OscConfig+0x344>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	2380      	movs	r3, #128	; 0x80
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4013      	ands	r3, r2
 80009d8:	d11a      	bne.n	8000a10 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_RCC_OscConfig+0x344>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_RCC_OscConfig+0x344>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009e8:	f7ff fda0 	bl	800052c <HAL_GetTick>
 80009ec:	0003      	movs	r3, r0
 80009ee:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	e008      	b.n	8000a04 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f2:	f7ff fd9b 	bl	800052c <HAL_GetTick>
 80009f6:	0002      	movs	r2, r0
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	2b64      	cmp	r3, #100	; 0x64
 80009fe:	d901      	bls.n	8000a04 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e1f5      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_RCC_OscConfig+0x344>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d0f0      	beq.n	80009f2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10f      	bne.n	8000a38 <HAL_RCC_OscConfig+0x348>
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000a1a:	6a1a      	ldr	r2, [r3, #32]
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_RCC_OscConfig+0x338>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	621a      	str	r2, [r3, #32]
 8000a24:	e036      	b.n	8000a94 <HAL_RCC_OscConfig+0x3a4>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	fffeffff 	.word	0xfffeffff
 8000a30:	fffbffff 	.word	0xfffbffff
 8000a34:	40007000 	.word	0x40007000
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10c      	bne.n	8000a5a <HAL_RCC_OscConfig+0x36a>
 8000a40:	4bca      	ldr	r3, [pc, #808]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a42:	6a1a      	ldr	r2, [r3, #32]
 8000a44:	4bc9      	ldr	r3, [pc, #804]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	438a      	bics	r2, r1
 8000a4a:	621a      	str	r2, [r3, #32]
 8000a4c:	4bc7      	ldr	r3, [pc, #796]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a4e:	6a1a      	ldr	r2, [r3, #32]
 8000a50:	4bc6      	ldr	r3, [pc, #792]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a52:	2104      	movs	r1, #4
 8000a54:	438a      	bics	r2, r1
 8000a56:	621a      	str	r2, [r3, #32]
 8000a58:	e01c      	b.n	8000a94 <HAL_RCC_OscConfig+0x3a4>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d10c      	bne.n	8000a7c <HAL_RCC_OscConfig+0x38c>
 8000a62:	4bc2      	ldr	r3, [pc, #776]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a64:	6a1a      	ldr	r2, [r3, #32]
 8000a66:	4bc1      	ldr	r3, [pc, #772]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a68:	2104      	movs	r1, #4
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	621a      	str	r2, [r3, #32]
 8000a6e:	4bbf      	ldr	r3, [pc, #764]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a70:	6a1a      	ldr	r2, [r3, #32]
 8000a72:	4bbe      	ldr	r3, [pc, #760]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	621a      	str	r2, [r3, #32]
 8000a7a:	e00b      	b.n	8000a94 <HAL_RCC_OscConfig+0x3a4>
 8000a7c:	4bbb      	ldr	r3, [pc, #748]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a7e:	6a1a      	ldr	r2, [r3, #32]
 8000a80:	4bba      	ldr	r3, [pc, #744]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	438a      	bics	r2, r1
 8000a86:	621a      	str	r2, [r3, #32]
 8000a88:	4bb8      	ldr	r3, [pc, #736]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a8a:	6a1a      	ldr	r2, [r3, #32]
 8000a8c:	4bb7      	ldr	r3, [pc, #732]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000a8e:	2104      	movs	r1, #4
 8000a90:	438a      	bics	r2, r1
 8000a92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d014      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a9c:	f7ff fd46 	bl	800052c <HAL_GetTick>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aa4:	e009      	b.n	8000aba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa6:	f7ff fd41 	bl	800052c <HAL_GetTick>
 8000aaa:	0002      	movs	r2, r0
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	4aaf      	ldr	r2, [pc, #700]	; (8000d70 <HAL_RCC_OscConfig+0x680>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e19a      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aba:	4bac      	ldr	r3, [pc, #688]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d0f0      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x3b6>
 8000ac4:	e013      	b.n	8000aee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fd31 	bl	800052c <HAL_GetTick>
 8000aca:	0003      	movs	r3, r0
 8000acc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ace:	e009      	b.n	8000ae4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad0:	f7ff fd2c 	bl	800052c <HAL_GetTick>
 8000ad4:	0002      	movs	r2, r0
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	4aa5      	ldr	r2, [pc, #660]	; (8000d70 <HAL_RCC_OscConfig+0x680>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d901      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e185      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae4:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	2202      	movs	r2, #2
 8000aea:	4013      	ands	r3, r2
 8000aec:	d1f0      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000aee:	231f      	movs	r3, #31
 8000af0:	18fb      	adds	r3, r7, r3
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af8:	4b9c      	ldr	r3, [pc, #624]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000afe:	499d      	ldr	r1, [pc, #628]	; (8000d74 <HAL_RCC_OscConfig+0x684>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2210      	movs	r2, #16
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	d063      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d12a      	bne.n	8000b6c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b16:	4b95      	ldr	r3, [pc, #596]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1a:	4b94      	ldr	r3, [pc, #592]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b22:	4b92      	ldr	r3, [pc, #584]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b26:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fcfd 	bl	800052c <HAL_GetTick>
 8000b32:	0003      	movs	r3, r0
 8000b34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b36:	e008      	b.n	8000b4a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b38:	f7ff fcf8 	bl	800052c <HAL_GetTick>
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d901      	bls.n	8000b4a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e152      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b4a:	4b88      	ldr	r3, [pc, #544]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	2202      	movs	r2, #2
 8000b50:	4013      	ands	r3, r2
 8000b52:	d0f1      	beq.n	8000b38 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b54:	4b85      	ldr	r3, [pc, #532]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b58:	22f8      	movs	r2, #248	; 0xf8
 8000b5a:	4393      	bics	r3, r2
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	00da      	lsls	r2, r3, #3
 8000b64:	4b81      	ldr	r3, [pc, #516]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	; 0x34
 8000b6a:	e034      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	3305      	adds	r3, #5
 8000b72:	d111      	bne.n	8000b98 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000b74:	4b7d      	ldr	r3, [pc, #500]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b78:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b80:	4b7a      	ldr	r3, [pc, #488]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b84:	22f8      	movs	r2, #248	; 0xf8
 8000b86:	4393      	bics	r3, r2
 8000b88:	0019      	movs	r1, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	00da      	lsls	r2, r3, #3
 8000b90:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b92:	430a      	orrs	r2, r1
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
 8000b96:	e01e      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b98:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b9c:	4b73      	ldr	r3, [pc, #460]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ba4:	4b71      	ldr	r3, [pc, #452]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b70      	ldr	r3, [pc, #448]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	438a      	bics	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fcbc 	bl	800052c <HAL_GetTick>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bba:	f7ff fcb7 	bl	800052c <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e111      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bcc:	4b67      	ldr	r3, [pc, #412]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	d1f1      	bne.n	8000bba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2220      	movs	r2, #32
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d05c      	beq.n	8000c9a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000be0:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	220c      	movs	r2, #12
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b0c      	cmp	r3, #12
 8000bea:	d00e      	beq.n	8000c0a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000bec:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d114      	bne.n	8000c22 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000bf8:	4b5c      	ldr	r3, [pc, #368]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000bfa:	685a      	ldr	r2, [r3, #4]
 8000bfc:	23c0      	movs	r3, #192	; 0xc0
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	401a      	ands	r2, r3
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d10b      	bne.n	8000c22 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000c0a:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	4013      	ands	r3, r2
 8000c14:	d040      	beq.n	8000c98 <HAL_RCC_OscConfig+0x5a8>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d03c      	beq.n	8000c98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e0e6      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d01b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0249      	lsls	r1, r1, #9
 8000c34:	430a      	orrs	r2, r1
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc78 	bl	800052c <HAL_GetTick>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c42:	f7ff fc73 	bl	800052c <HAL_GetTick>
 8000c46:	0002      	movs	r2, r0
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e0cd      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x552>
 8000c60:	e01b      	b.n	8000c9a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000c62:	4b42      	ldr	r3, [pc, #264]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c68:	4943      	ldr	r1, [pc, #268]	; (8000d78 <HAL_RCC_OscConfig+0x688>)
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6e:	f7ff fc5d 	bl	800052c <HAL_GetTick>
 8000c72:	0003      	movs	r3, r0
 8000c74:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000c76:	e008      	b.n	8000c8a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c78:	f7ff fc58 	bl	800052c <HAL_GetTick>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d901      	bls.n	8000c8a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e0b2      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	4013      	ands	r3, r2
 8000c94:	d1f0      	bne.n	8000c78 <HAL_RCC_OscConfig+0x588>
 8000c96:	e000      	b.n	8000c9a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000c98:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x5b4>
 8000ca2:	e0a4      	b.n	8000dee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	220c      	movs	r2, #12
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d100      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x5c2>
 8000cb0:	e078      	b.n	8000da4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d14c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000cc0:	492e      	ldr	r1, [pc, #184]	; (8000d7c <HAL_RCC_OscConfig+0x68c>)
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc31 	bl	800052c <HAL_GetTick>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd0:	f7ff fc2c 	bl	800052c <HAL_GetTick>
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e086      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	049b      	lsls	r3, r3, #18
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	4393      	bics	r3, r2
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_RCC_OscConfig+0x690>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	431a      	orrs	r2, r3
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	0449      	lsls	r1, r1, #17
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fbff 	bl	800052c <HAL_GetTick>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d34:	f7ff fbfa 	bl	800052c <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e054      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	049b      	lsls	r3, r3, #18
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0x644>
 8000d52:	e04c      	b.n	8000dee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <HAL_RCC_OscConfig+0x67c>)
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <HAL_RCC_OscConfig+0x68c>)
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fbe4 	bl	800052c <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d68:	e015      	b.n	8000d96 <HAL_RCC_OscConfig+0x6a6>
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	00001388 	.word	0x00001388
 8000d74:	efffffff 	.word	0xefffffff
 8000d78:	fffeffff 	.word	0xfffeffff
 8000d7c:	feffffff 	.word	0xfeffffff
 8000d80:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d84:	f7ff fbd2 	bl	800052c <HAL_GetTick>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e02c      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_RCC_OscConfig+0x708>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	049b      	lsls	r3, r3, #18
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d1f0      	bne.n	8000d84 <HAL_RCC_OscConfig+0x694>
 8000da2:	e024      	b.n	8000dee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e01f      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_RCC_OscConfig+0x708>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_RCC_OscConfig+0x708>)
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d10e      	bne.n	8000dea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	220f      	movs	r2, #15
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d107      	bne.n	8000dea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	23f0      	movs	r3, #240	; 0xf0
 8000dde:	039b      	lsls	r3, r3, #14
 8000de0:	401a      	ands	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d001      	beq.n	8000dee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b008      	add	sp, #32
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e0bf      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e10:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d911      	bls.n	8000e42 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1e:	4b5e      	ldr	r3, [pc, #376]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4393      	bics	r3, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e30:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d001      	beq.n	8000e42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0a6      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d015      	beq.n	8000e78 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2204      	movs	r2, #4
 8000e52:	4013      	ands	r3, r2
 8000e54:	d006      	beq.n	8000e64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e56:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	4b50      	ldr	r3, [pc, #320]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000e5c:	21e0      	movs	r1, #224	; 0xe0
 8000e5e:	00c9      	lsls	r1, r1, #3
 8000e60:	430a      	orrs	r2, r1
 8000e62:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	22f0      	movs	r2, #240	; 0xf0
 8000e6a:	4393      	bics	r3, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000e74:	430a      	orrs	r2, r1
 8000e76:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d04c      	beq.n	8000f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d107      	bne.n	8000e9a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	d120      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e07a      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d107      	bne.n	8000eb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	049b      	lsls	r3, r3, #18
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d114      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e06e      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d107      	bne.n	8000eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d108      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e062      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eca:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d101      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e05b      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4393      	bics	r3, r2
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000eec:	f7ff fb1e 	bl	800052c <HAL_GetTick>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ef4:	e009      	b.n	8000f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ef6:	f7ff fb19 	bl	800052c <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <HAL_RCC_ClockConfig+0x1a4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e042      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	220c      	movs	r2, #12
 8000f10:	401a      	ands	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d1ec      	bne.n	8000ef6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d211      	bcs.n	8000f4e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	4393      	bics	r3, r2
 8000f32:	0019      	movs	r1, r3
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_RCC_ClockConfig+0x19c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4013      	ands	r3, r2
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d001      	beq.n	8000f4e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e020      	b.n	8000f90 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2204      	movs	r2, #4
 8000f54:	4013      	ands	r3, r2
 8000f56:	d009      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_RCC_ClockConfig+0x1a8>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000f6c:	f000 f820 	bl	8000fb0 <HAL_RCC_GetSysClockFreq>
 8000f70:	0001      	movs	r1, r0
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_RCC_ClockConfig+0x1a0>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_RCC_ClockConfig+0x1ac>)
 8000f7e:	5cd3      	ldrb	r3, [r2, r3]
 8000f80:	000a      	movs	r2, r1
 8000f82:	40da      	lsrs	r2, r3
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_RCC_ClockConfig+0x1b0>)
 8000f86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff fa89 	bl	80004a0 <HAL_InitTick>
  
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40022000 	.word	0x40022000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	00001388 	.word	0x00001388
 8000fa4:	fffff8ff 	.word	0xfffff8ff
 8000fa8:	0800264c 	.word	0x0800264c
 8000fac:	20000000 	.word	0x20000000

08000fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b08f      	sub	sp, #60	; 0x3c
 8000fb4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000fb6:	2314      	movs	r3, #20
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	4a38      	ldr	r2, [pc, #224]	; (800109c <HAL_RCC_GetSysClockFreq+0xec>)
 8000fbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fbe:	c313      	stmia	r3!, {r0, r1, r4}
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000fc8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000fca:	c313      	stmia	r3!, {r0, r1, r4}
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	220c      	movs	r2, #12
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b0c      	cmp	r3, #12
 8000ff2:	d047      	beq.n	8001084 <HAL_RCC_GetSysClockFreq+0xd4>
 8000ff4:	d849      	bhi.n	800108a <HAL_RCC_GetSysClockFreq+0xda>
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d002      	beq.n	8001000 <HAL_RCC_GetSysClockFreq+0x50>
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d003      	beq.n	8001006 <HAL_RCC_GetSysClockFreq+0x56>
 8000ffe:	e044      	b.n	800108a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001004:	e044      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001008:	0c9b      	lsrs	r3, r3, #18
 800100a:	220f      	movs	r2, #15
 800100c:	4013      	ands	r3, r2
 800100e:	2214      	movs	r2, #20
 8001010:	18ba      	adds	r2, r7, r2
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	220f      	movs	r2, #15
 800101c:	4013      	ands	r3, r2
 800101e:	1d3a      	adds	r2, r7, #4
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001026:	23c0      	movs	r3, #192	; 0xc0
 8001028:	025b      	lsls	r3, r3, #9
 800102a:	401a      	ands	r2, r3
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	429a      	cmp	r2, r3
 8001032:	d109      	bne.n	8001048 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001038:	f7ff f878 	bl	800012c <__udivsi3>
 800103c:	0003      	movs	r3, r0
 800103e:	001a      	movs	r2, r3
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	4353      	muls	r3, r2
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
 8001046:	e01a      	b.n	800107e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800104a:	23c0      	movs	r3, #192	; 0xc0
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	401a      	ands	r2, r3
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	429a      	cmp	r2, r3
 8001056:	d109      	bne.n	800106c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800105a:	4814      	ldr	r0, [pc, #80]	; (80010ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800105c:	f7ff f866 	bl	800012c <__udivsi3>
 8001060:	0003      	movs	r3, r0
 8001062:	001a      	movs	r2, r3
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	4353      	muls	r3, r2
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
 800106a:	e008      	b.n	800107e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800106c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001070:	f7ff f85c 	bl	800012c <__udivsi3>
 8001074:	0003      	movs	r3, r0
 8001076:	001a      	movs	r2, r3
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	4353      	muls	r3, r2
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800107e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001082:	e005      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001088:	e002      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800108e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b00f      	add	sp, #60	; 0x3c
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	0800262c 	.word	0x0800262c
 80010a0:	0800263c 	.word	0x0800263c
 80010a4:	40021000 	.word	0x40021000
 80010a8:	007a1200 	.word	0x007a1200
 80010ac:	02dc6c00 	.word	0x02dc6c00

080010b0 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	2390      	movs	r3, #144	; 0x90
 80010bc:	05db      	lsls	r3, r3, #23
 80010be:	429a      	cmp	r2, r3
 80010c0:	d107      	bne.n	80010d2 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <gpio_clk_en+0x80>)
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <gpio_clk_en+0x80>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0289      	lsls	r1, r1, #10
 80010cc:	430a      	orrs	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 80010d0:	e02a      	b.n	8001128 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <gpio_clk_en+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d107      	bne.n	80010ea <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <gpio_clk_en+0x80>)
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <gpio_clk_en+0x80>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	02c9      	lsls	r1, r1, #11
 80010e4:	430a      	orrs	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]
}
 80010e8:	e01e      	b.n	8001128 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <gpio_clk_en+0x88>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d107      	bne.n	8001102 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <gpio_clk_en+0x80>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <gpio_clk_en+0x80>)
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0309      	lsls	r1, r1, #12
 80010fc:	430a      	orrs	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
}
 8001100:	e012      	b.n	8001128 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <gpio_clk_en+0x8c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d107      	bne.n	800111a <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <gpio_clk_en+0x80>)
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <gpio_clk_en+0x80>)
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	0349      	lsls	r1, r1, #13
 8001114:	430a      	orrs	r2, r1
 8001116:	615a      	str	r2, [r3, #20]
}
 8001118:	e006      	b.n	8001128 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <gpio_clk_en+0x80>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <gpio_clk_en+0x80>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	03c9      	lsls	r1, r1, #15
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00

08001140 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d11c      	bne.n	800118e <gpio_config+0x4e>
		gpio_clk_en(port);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ffaa 	bl	80010b0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	0018      	movs	r0, r3
 8001164:	f000 f858 	bl	8001218 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	0018      	movs	r0, r3
 8001170:	f000 f86a 	bl	8001248 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f87c 	bl	8001278 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	0018      	movs	r0, r3
 8001188:	f000 f88e 	bl	80012a8 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 800118c:	e040      	b.n	8001210 <gpio_config+0xd0>
	} else if (pinMode == INPUT_MODE) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d110      	bne.n	80011b6 <gpio_config+0x76>
		gpio_clk_en(port);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff8a 	bl	80010b0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f838 	bl	8001218 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f862 	bl	8001278 <gpio_PUPD>
}
 80011b4:	e02c      	b.n	8001210 <gpio_config+0xd0>
	} else if (pinMode == ALT_MODE) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d116      	bne.n	80011ea <gpio_config+0xaa>
		gpio_clk_en(port);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff ff76 	bl	80010b0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f824 	bl	8001218 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f84e 	bl	8001278 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f860 	bl	80012a8 <gpio_PHPL_OD>
}
 80011e8:	e012      	b.n	8001210 <gpio_config+0xd0>
	} else if (pinMode == ANALOG_MODE) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d10f      	bne.n	8001210 <gpio_config+0xd0>
		gpio_clk_en(port);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff5c 	bl	80010b0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f80a 	bl	8001218 <gpio_moder>
		adc_chsel(port, pinNumber);
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	0011      	movs	r1, r2
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f898 	bl	8001340 <adc_chsel>
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}

08001218 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <gpio_moder+0x2c>)
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	0089      	lsls	r1, r1, #2
 800122e:	58cb      	ldr	r3, [r1, r3]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4099      	lsls	r1, r3
 8001234:	000b      	movs	r3, r1
 8001236:	431a      	orrs	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000000c 	.word	0x2000000c

08001248 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <gpio_speed+0x2c>)
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	0089      	lsls	r1, r1, #2
 800125e:	58cb      	ldr	r3, [r1, r3]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4099      	lsls	r1, r3
 8001264:	000b      	movs	r3, r1
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b004      	add	sp, #16
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000000c 	.word	0x2000000c

08001278 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <gpio_PUPD+0x2c>)
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	0089      	lsls	r1, r1, #2
 800128e:	58cb      	ldr	r3, [r1, r3]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4099      	lsls	r1, r3
 8001294:	000b      	movs	r3, r1
 8001296:	431a      	orrs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b004      	add	sp, #16
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	4099      	lsls	r1, r3
 80012be:	000b      	movs	r3, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	605a      	str	r2, [r3, #4]
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}

080012ce <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d80a      	bhi.n	80012f6 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4099      	lsls	r1, r3
 80012ec:	000b      	movs	r3, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 80012f4:	e00a      	b.n	800130c <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3b08      	subs	r3, #8
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4099      	lsls	r1, r3
 8001304:	000b      	movs	r3, r1
 8001306:	431a      	orrs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}

08001314 <TIM6_DAC_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	ticks++;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <TIM6_DAC_IRQHandler+0x24>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <TIM6_DAC_IRQHandler+0x24>)
 8001322:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <TIM6_DAC_IRQHandler+0x28>)
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <TIM6_DAC_IRQHandler+0x28>)
 800132a:	2101      	movs	r1, #1
 800132c:	438a      	bics	r2, r1
 800132e:	611a      	str	r2, [r3, #16]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	200000e0 	.word	0x200000e0
 800133c:	40001000 	.word	0x40001000

08001340 <adc_chsel>:
			return BML_TIMEOUT;
		}
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	000a      	movs	r2, r1
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	2390      	movs	r3, #144	; 0x90
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	429a      	cmp	r2, r3
 8001356:	d141      	bne.n	80013dc <adc_chsel+0x9c>
		switch (pin) {
 8001358:	1cbb      	adds	r3, r7, #2
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d900      	bls.n	8001362 <adc_chsel+0x22>
 8001360:	e094      	b.n	800148c <adc_chsel+0x14c>
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <adc_chsel+0x160>)
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <adc_chsel+0x164>)
 800136e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <adc_chsel+0x164>)
 8001372:	2101      	movs	r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001378:	e08d      	b.n	8001496 <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <adc_chsel+0x164>)
 800137c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <adc_chsel+0x164>)
 8001380:	2102      	movs	r1, #2
 8001382:	430a      	orrs	r2, r1
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001386:	e086      	b.n	8001496 <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <adc_chsel+0x164>)
 800138a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800138c:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <adc_chsel+0x164>)
 800138e:	2104      	movs	r1, #4
 8001390:	430a      	orrs	r2, r1
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001394:	e07f      	b.n	8001496 <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <adc_chsel+0x164>)
 8001398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139a:	4b42      	ldr	r3, [pc, #264]	; (80014a4 <adc_chsel+0x164>)
 800139c:	2108      	movs	r1, #8
 800139e:	430a      	orrs	r2, r1
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013a2:	e078      	b.n	8001496 <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <adc_chsel+0x164>)
 80013a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a8:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <adc_chsel+0x164>)
 80013aa:	2110      	movs	r1, #16
 80013ac:	430a      	orrs	r2, r1
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013b0:	e071      	b.n	8001496 <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <adc_chsel+0x164>)
 80013b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <adc_chsel+0x164>)
 80013b8:	2120      	movs	r1, #32
 80013ba:	430a      	orrs	r2, r1
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013be:	e06a      	b.n	8001496 <adc_chsel+0x156>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <adc_chsel+0x164>)
 80013c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <adc_chsel+0x164>)
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	430a      	orrs	r2, r1
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013cc:	e063      	b.n	8001496 <adc_chsel+0x156>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 80013ce:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <adc_chsel+0x164>)
 80013d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <adc_chsel+0x164>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	430a      	orrs	r2, r1
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80013da:	e05c      	b.n	8001496 <adc_chsel+0x156>
		default:
			break;
		}
	} else if (port == GPIOB) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a32      	ldr	r2, [pc, #200]	; (80014a8 <adc_chsel+0x168>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d116      	bne.n	8001412 <adc_chsel+0xd2>
		switch (pin) {
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <adc_chsel+0xb2>
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d008      	beq.n	8001402 <adc_chsel+0xc2>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 80013f0:	e051      	b.n	8001496 <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 80013f2:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <adc_chsel+0x164>)
 80013f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <adc_chsel+0x164>)
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001400:	e049      	b.n	8001496 <adc_chsel+0x156>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <adc_chsel+0x164>)
 8001404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <adc_chsel+0x164>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0089      	lsls	r1, r1, #2
 800140c:	430a      	orrs	r2, r1
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001410:	e041      	b.n	8001496 <adc_chsel+0x156>
		}
	} else if (port == GPIOC) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a25      	ldr	r2, [pc, #148]	; (80014ac <adc_chsel+0x16c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d13a      	bne.n	8001490 <adc_chsel+0x150>
		switch (pin) {
 800141a:	1cbb      	adds	r3, r7, #2
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	2b05      	cmp	r3, #5
 8001420:	d838      	bhi.n	8001494 <adc_chsel+0x154>
 8001422:	009a      	lsls	r2, r3, #2
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <adc_chsel+0x170>)
 8001426:	18d3      	adds	r3, r2, r3
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <adc_chsel+0x164>)
 800142e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <adc_chsel+0x164>)
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	00c9      	lsls	r1, r1, #3
 8001436:	430a      	orrs	r2, r1
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800143a:	e02c      	b.n	8001496 <adc_chsel+0x156>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <adc_chsel+0x164>)
 800143e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <adc_chsel+0x164>)
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	0109      	lsls	r1, r1, #4
 8001446:	430a      	orrs	r2, r1
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800144a:	e024      	b.n	8001496 <adc_chsel+0x156>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <adc_chsel+0x164>)
 800144e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <adc_chsel+0x164>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0149      	lsls	r1, r1, #5
 8001456:	430a      	orrs	r2, r1
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800145a:	e01c      	b.n	8001496 <adc_chsel+0x156>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <adc_chsel+0x164>)
 800145e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <adc_chsel+0x164>)
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	0189      	lsls	r1, r1, #6
 8001466:	430a      	orrs	r2, r1
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800146a:	e014      	b.n	8001496 <adc_chsel+0x156>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <adc_chsel+0x164>)
 800146e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <adc_chsel+0x164>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	01c9      	lsls	r1, r1, #7
 8001476:	430a      	orrs	r2, r1
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800147a:	e00c      	b.n	8001496 <adc_chsel+0x156>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <adc_chsel+0x164>)
 800147e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <adc_chsel+0x164>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	0209      	lsls	r1, r1, #8
 8001486:	430a      	orrs	r2, r1
 8001488:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800148a:	e004      	b.n	8001496 <adc_chsel+0x156>
			break;
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	e002      	b.n	8001496 <adc_chsel+0x156>
		default:
			break;
		}
	}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	e000      	b.n	8001496 <adc_chsel+0x156>
			break;
 8001494:	46c0      	nop			; (mov r8, r8)
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	0800265c 	.word	0x0800265c
 80014a4:	40012400 	.word	0x40012400
 80014a8:	48000400 	.word	0x48000400
 80014ac:	48000800 	.word	0x48000800
 80014b0:	0800267c 	.word	0x0800267c

080014b4 <I2C_EN>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_EN(I2C_TypeDef *i2c) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_PE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <I2C_DI>:

void I2C_DI(I2C_TypeDef *i2c) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	i2c->CR1 &= ~I2C_CR1_PE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4393      	bics	r3, r2
 80014e0:	001a      	movs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <I2C_INIT>:

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <I2C_INIT+0x54>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d107      	bne.n	8001512 <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <I2C_INIT+0x58>)
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <I2C_INIT+0x58>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0389      	lsls	r1, r1, #14
 800150c:	430a      	orrs	r2, r1
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	e00a      	b.n	8001528 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <I2C_INIT+0x5c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d106      	bne.n	8001528 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <I2C_INIT+0x58>)
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <I2C_INIT+0x58>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	03c9      	lsls	r1, r1, #15
 8001524:	430a      	orrs	r2, r1
 8001526:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	611a      	str	r2, [r3, #16]
	I2C_EN(i2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff ffbc 	bl	80014b4 <I2C_EN>
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	40005800 	.word	0x40005800

08001550 <I2C_CR2>:
	} else if (i2c == I2C2) {
		RCC->APB1ENR &= ~RCC_APB1ENR_I2C2EN;
	}
}

void I2C_CR2(I2C_TypeDef *i2c, uint32_t val) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	i2c->CR2 = val;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	605a      	str	r2, [r3, #4]
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}

08001568 <I2C_DeviceReady>:

BML_StatusTypeDef I2C_DeviceReady(I2C_TypeDef *i2c, uint8_t saddr,
		uint16_t timeout) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	0008      	movs	r0, r1
 8001572:	0011      	movs	r1, r2
 8001574:	1cfb      	adds	r3, r7, #3
 8001576:	1c02      	adds	r2, r0, #0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	003b      	movs	r3, r7
 800157c:	1c0a      	adds	r2, r1, #0
 800157e:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8001580:	230e      	movs	r3, #14
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	003a      	movs	r2, r7
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	801a      	strh	r2, [r3, #0]
	uint8_t flag = 0;
 800158a:	230d      	movs	r3, #13
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 8001592:	e00e      	b.n	80015b2 <I2C_DeviceReady+0x4a>
		I2C_Delay(1);
 8001594:	2001      	movs	r0, #1
 8001596:	f7fe ffd3 	bl	8000540 <HAL_Delay>
		i--;
 800159a:	210e      	movs	r1, #14
 800159c:	187b      	adds	r3, r7, r1
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	3a01      	subs	r2, #1
 80015a4:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <I2C_DeviceReady+0x4a>
			return BML_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e035      	b.n	800161e <I2C_DeviceReady+0xb6>
	while (i2c->ISR & I2C_ISR_BUSY) {/* wait until bus not busy */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	4013      	ands	r3, r2
 80015bc:	d1ea      	bne.n	8001594 <I2C_DeviceReady+0x2c>
		}
	}
	I2C_CR2(i2c, I2C_CR2_START | (saddr << 1));
 80015be:	1cfb      	adds	r3, r7, #3
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	001a      	movs	r2, r3
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff ffbd 	bl	8001550 <I2C_CR2>

	I2C_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7fe ffb2 	bl	8000540 <HAL_Delay>

	if (!(i2c->ISR & I2C_ISR_NACKF)) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2210      	movs	r2, #16
 80015e2:	4013      	ands	r3, r2
 80015e4:	d104      	bne.n	80015f0 <I2C_DeviceReady+0x88>
		flag = 1;
 80015e6:	230d      	movs	r3, #13
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e003      	b.n	80015f8 <I2C_DeviceReady+0x90>
	} else {
		flag = 0;
 80015f0:	230d      	movs	r3, #13
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
	}

	i2c->CR2 = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
	I2C_DI(i2c);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff ff65 	bl	80014d0 <I2C_DI>
	I2C_EN(i2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff53 	bl	80014b4 <I2C_EN>
	if (flag == LOW) {
 800160e:	230d      	movs	r3, #13
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <I2C_DeviceReady+0xb4>
		return BML_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <I2C_DeviceReady+0xb6>
	}
	return BML_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <I2C_MasterByteRead>:

	return BML_OK;
}

BML_StatusTypeDef I2C_MasterByteRead(I2C_TypeDef *i2c, uint8_t saddr,
		uint8_t maddr, uint8_t *data, uint16_t timeout) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	0008      	movs	r0, r1
 8001632:	0011      	movs	r1, r2
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	230b      	movs	r3, #11
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	1c02      	adds	r2, r0, #0
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	230a      	movs	r3, #10
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	1c0a      	adds	r2, r1, #0
 8001644:	701a      	strb	r2, [r3, #0]
	uint16_t i = timeout;
 8001646:	2316      	movs	r3, #22
 8001648:	18fa      	adds	r2, r7, r3
 800164a:	2320      	movs	r3, #32
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	8013      	strh	r3, [r2, #0]
	while (i2c->ISR & I2C_ISR_BUSY) {
 8001652:	e00e      	b.n	8001672 <I2C_MasterByteRead+0x4a>
		I2C_Delay(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f7fe ff73 	bl	8000540 <HAL_Delay>
		i--;
 800165a:	2116      	movs	r1, #22
 800165c:	187b      	adds	r3, r7, r1
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	187b      	adds	r3, r7, r1
 8001662:	3a01      	subs	r2, #1
 8001664:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8001666:	187b      	adds	r3, r7, r1
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <I2C_MasterByteRead+0x4a>
			return BML_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e09f      	b.n	80017b2 <I2C_MasterByteRead+0x18a>
	while (i2c->ISR & I2C_ISR_BUSY) {
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	4013      	ands	r3, r2
 800167c:	d1ea      	bne.n	8001654 <I2C_MasterByteRead+0x2c>
		}
	} /* wait until bus not busy */

	i = timeout;
 800167e:	2316      	movs	r3, #22
 8001680:	18fa      	adds	r2, r7, r3
 8001682:	2320      	movs	r3, #32
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	8013      	strh	r3, [r2, #0]

	I2C_CR2(i2c, I2C_CR2_START | (1 << 16) | (saddr << 1));
 800168a:	230b      	movs	r3, #11
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	001a      	movs	r2, r3
 8001694:	2390      	movs	r3, #144	; 0x90
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff ff56 	bl	8001550 <I2C_CR2>
	/* generate start and send slave address */
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80016a4:	e00e      	b.n	80016c4 <I2C_MasterByteRead+0x9c>
		I2C_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7fe ff4a 	bl	8000540 <HAL_Delay>
		i--;
 80016ac:	2116      	movs	r1, #22
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	3a01      	subs	r2, #1
 80016b6:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <I2C_MasterByteRead+0x9c>
			return BML_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e076      	b.n	80017b2 <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_TXIS)) {
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0eb      	beq.n	80016a6 <I2C_MasterByteRead+0x7e>
		}
	} /* wait until start flag is set */
	i = timeout;
 80016ce:	2316      	movs	r3, #22
 80016d0:	18fa      	adds	r2, r7, r3
 80016d2:	2320      	movs	r3, #32
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	8013      	strh	r3, [r2, #0]

	i2c->TXDR = maddr; /* send memory address */
 80016da:	230a      	movs	r3, #10
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28

	while (!(i2c->ISR & I2C_ISR_TC)) {
 80016e4:	e00e      	b.n	8001704 <I2C_MasterByteRead+0xdc>
		I2C_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7fe ff2a 	bl	8000540 <HAL_Delay>
		i--;
 80016ec:	2116      	movs	r1, #22
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	3a01      	subs	r2, #1
 80016f6:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <I2C_MasterByteRead+0xdc>
			return BML_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e056      	b.n	80017b2 <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_TC)) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	4013      	ands	r3, r2
 800170c:	d0eb      	beq.n	80016e6 <I2C_MasterByteRead+0xbe>
		}
	} /* wait until transfer complete */

	i = timeout;
 800170e:	2316      	movs	r3, #22
 8001710:	18fa      	adds	r2, r7, r3
 8001712:	2320      	movs	r3, #32
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	8013      	strh	r3, [r2, #0]

	/* generate restart, send slave address, read 1 byte, set for auto end */
	I2C_CR2(i2c,
			I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND | (1 << 16)
					| (saddr << 1));
 800171a:	230b      	movs	r3, #11
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	001a      	movs	r2, r3
	I2C_CR2(i2c,
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <I2C_MasterByteRead+0x194>)
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ff0f 	bl	8001550 <I2C_CR2>

	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8001732:	e00e      	b.n	8001752 <I2C_MasterByteRead+0x12a>
		I2C_Delay(1);
 8001734:	2001      	movs	r0, #1
 8001736:	f7fe ff03 	bl	8000540 <HAL_Delay>
		i--;
 800173a:	2116      	movs	r1, #22
 800173c:	187b      	adds	r3, r7, r1
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	187b      	adds	r3, r7, r1
 8001742:	3a01      	subs	r2, #1
 8001744:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8001746:	187b      	adds	r3, r7, r1
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <I2C_MasterByteRead+0x12a>
			return BML_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e02f      	b.n	80017b2 <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_RXNE)) {
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	d0eb      	beq.n	8001734 <I2C_MasterByteRead+0x10c>
		}
	} /* Wait until RXNE flag is set */
	*data = i2c->RXDR; /* Read data from DR */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	701a      	strb	r2, [r3, #0]

	i = timeout;
 8001766:	2316      	movs	r3, #22
 8001768:	18fa      	adds	r2, r7, r3
 800176a:	2320      	movs	r3, #32
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	8013      	strh	r3, [r2, #0]

	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8001772:	e00e      	b.n	8001792 <I2C_MasterByteRead+0x16a>
		I2C_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7fe fee3 	bl	8000540 <HAL_Delay>
		i--;
 800177a:	2116      	movs	r1, #22
 800177c:	187b      	adds	r3, r7, r1
 800177e:	881a      	ldrh	r2, [r3, #0]
 8001780:	187b      	adds	r3, r7, r1
 8001782:	3a01      	subs	r2, #1
 8001784:	801a      	strh	r2, [r3, #0]
		if (i <= 0) {
 8001786:	187b      	adds	r3, r7, r1
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <I2C_MasterByteRead+0x16a>
			return BML_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e00f      	b.n	80017b2 <I2C_MasterByteRead+0x18a>
	while (!(i2c->ISR & I2C_ISR_STOPF)) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2220      	movs	r2, #32
 8001798:	4013      	ands	r3, r2
 800179a:	d0eb      	beq.n	8001774 <I2C_MasterByteRead+0x14c>
		}
	} /* wait until stop flag is set */

	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	61da      	str	r2, [r3, #28]
	I2C_CR2(i2c, I2C_CR2_AUTOEND);
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	049a      	lsls	r2, r3, #18
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0011      	movs	r1, r2
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff fed0 	bl	8001550 <I2C_CR2>

	return BML_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b006      	add	sp, #24
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	02012400 	.word	0x02012400

080017c0 <RCC_CONFIG_48MHZ>:
 *      Author: hp
 */
#include "rcc.h"

//*****************************| RCC CLOCK FUNCTION |****************************//
BML_StatusTypeDef RCC_CONFIG_48MHZ() {
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b093      	sub	sp, #76	; 0x4c
 80017c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017c6:	2414      	movs	r4, #20
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	0018      	movs	r0, r3
 80017cc:	2334      	movs	r3, #52	; 0x34
 80017ce:	001a      	movs	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f000 fa69 	bl	8001ca8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	0018      	movs	r0, r3
 80017da:	2310      	movs	r3, #16
 80017dc:	001a      	movs	r2, r3
 80017de:	2100      	movs	r1, #0
 80017e0:	f000 fa62 	bl	8001ca8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80017e4:	193b      	adds	r3, r7, r4
 80017e6:	2220      	movs	r2, #32
 80017e8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	2201      	movs	r2, #1
 80017ee:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7fe ff79 	bl	80006f0 <HAL_RCC_OscConfig>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d001      	beq.n	8001806 <RCC_CONFIG_48MHZ+0x46>
		return BML_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e014      	b.n	8001830 <RCC_CONFIG_48MHZ+0x70>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2203      	movs	r2, #3
 8001810:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2101      	movs	r1, #1
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff faea 	bl	8000dfc <HAL_RCC_ClockConfig>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <RCC_CONFIG_48MHZ+0x70>
		return BML_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e7ff      	b.n	8001830 <RCC_CONFIG_48MHZ+0x70>
	}
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b013      	add	sp, #76	; 0x4c
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <USART_INIT>:
 */
#include "uart.h"

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b087      	sub	sp, #28
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0018      	movs	r0, r3
 800184a:	f000 f819 	bl	8001880 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 800184e:	683c      	ldr	r4, [r7, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	0023      	movs	r3, r4
 800185c:	f000 f852 	bl	8001904 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8001860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f960 	bl	8001b2c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	220d      	movs	r2, #13
 8001872:	431a      	orrs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	601a      	str	r2, [r3, #0]

}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b005      	add	sp, #20
 800187e:	bd90      	pop	{r4, r7, pc}

08001880 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <USART_CLK_EN+0x70>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d107      	bne.n	80018a0 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <USART_CLK_EN+0x74>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <USART_CLK_EN+0x74>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	01c9      	lsls	r1, r1, #7
 800189a:	430a      	orrs	r2, r1
 800189c:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 800189e:	e022      	b.n	80018e6 <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a15      	ldr	r2, [pc, #84]	; (80018f8 <USART_CLK_EN+0x78>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d107      	bne.n	80018b8 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <USART_CLK_EN+0x74>)
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <USART_CLK_EN+0x74>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	0289      	lsls	r1, r1, #10
 80018b2:	430a      	orrs	r2, r1
 80018b4:	61da      	str	r2, [r3, #28]
}
 80018b6:	e016      	b.n	80018e6 <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <USART_CLK_EN+0x7c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d107      	bne.n	80018d0 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <USART_CLK_EN+0x74>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <USART_CLK_EN+0x74>)
 80018c6:	2180      	movs	r1, #128	; 0x80
 80018c8:	02c9      	lsls	r1, r1, #11
 80018ca:	430a      	orrs	r2, r1
 80018cc:	61da      	str	r2, [r3, #28]
}
 80018ce:	e00a      	b.n	80018e6 <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <USART_CLK_EN+0x80>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d106      	bne.n	80018e6 <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <USART_CLK_EN+0x74>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <USART_CLK_EN+0x74>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0309      	lsls	r1, r1, #12
 80018e2:	430a      	orrs	r2, r1
 80018e4:	61da      	str	r2, [r3, #28]
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40013800 	.word	0x40013800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40004800 	.word	0x40004800
 8001900:	40004c00 	.word	0x40004c00

08001904 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2302      	movs	r3, #2
 8001920:	2202      	movs	r2, #2
 8001922:	f7ff fc0d 	bl	8001140 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8001926:	69b9      	ldr	r1, [r7, #24]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2302      	movs	r3, #2
 8001934:	2202      	movs	r2, #2
 8001936:	f7ff fc03 	bl	8001140 <gpio_config>

	if (usart == USART1) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a75      	ldr	r2, [pc, #468]	; (8001b14 <USART_PIN_CONFIG+0x210>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d13a      	bne.n	80019b8 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	2390      	movs	r3, #144	; 0x90
 8001946:	05db      	lsls	r3, r3, #23
 8001948:	429a      	cmp	r2, r3
 800194a:	d109      	bne.n	8001960 <USART_PIN_CONFIG+0x5c>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b09      	cmp	r3, #9
 8001950:	d106      	bne.n	8001960 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2201      	movs	r2, #1
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff fcb8 	bl	80012ce <gpio_altfn>
 800195e:	e00c      	b.n	800197a <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4a6d      	ldr	r2, [pc, #436]	; (8001b18 <USART_PIN_CONFIG+0x214>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d108      	bne.n	800197a <USART_PIN_CONFIG+0x76>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d105      	bne.n	800197a <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 800196e:	6839      	ldr	r1, [r7, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2200      	movs	r2, #0
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff fcaa 	bl	80012ce <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	2390      	movs	r3, #144	; 0x90
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	429a      	cmp	r2, r3
 8001982:	d109      	bne.n	8001998 <USART_PIN_CONFIG+0x94>
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0a      	cmp	r3, #10
 8001988:	d106      	bne.n	8001998 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff fc9c 	bl	80012ce <gpio_altfn>
 8001996:	e0b8      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a5f      	ldr	r2, [pc, #380]	; (8001b18 <USART_PIN_CONFIG+0x214>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d000      	beq.n	80019a2 <USART_PIN_CONFIG+0x9e>
 80019a0:	e0b3      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b07      	cmp	r3, #7
 80019a6:	d000      	beq.n	80019aa <USART_PIN_CONFIG+0xa6>
 80019a8:	e0af      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 80019aa:	69b9      	ldr	r1, [r7, #24]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fc8c 	bl	80012ce <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 80019b6:	e0a8      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <USART_PIN_CONFIG+0x218>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d13c      	bne.n	8001a3a <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	2390      	movs	r3, #144	; 0x90
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d109      	bne.n	80019de <USART_PIN_CONFIG+0xda>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d106      	bne.n	80019de <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2201      	movs	r2, #1
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fc79 	bl	80012ce <gpio_altfn>
 80019dc:	e00d      	b.n	80019fa <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	2390      	movs	r3, #144	; 0x90
 80019e2:	05db      	lsls	r3, r3, #23
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d108      	bne.n	80019fa <USART_PIN_CONFIG+0xf6>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b0e      	cmp	r3, #14
 80019ec:	d105      	bne.n	80019fa <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2201      	movs	r2, #1
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fc6a 	bl	80012ce <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	2390      	movs	r3, #144	; 0x90
 80019fe:	05db      	lsls	r3, r3, #23
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d109      	bne.n	8001a18 <USART_PIN_CONFIG+0x114>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d106      	bne.n	8001a18 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff fc5c 	bl	80012ce <gpio_altfn>
 8001a16:	e078      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	2390      	movs	r3, #144	; 0x90
 8001a1c:	05db      	lsls	r3, r3, #23
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d000      	beq.n	8001a24 <USART_PIN_CONFIG+0x120>
 8001a22:	e072      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	d000      	beq.n	8001a2c <USART_PIN_CONFIG+0x128>
 8001a2a:	e06e      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fc4b 	bl	80012ce <gpio_altfn>
}
 8001a38:	e067      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <USART_PIN_CONFIG+0x21c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d152      	bne.n	8001ae8 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4a37      	ldr	r2, [pc, #220]	; (8001b24 <USART_PIN_CONFIG+0x220>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d109      	bne.n	8001a5e <USART_PIN_CONFIG+0x15a>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d106      	bne.n	8001a5e <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2201      	movs	r2, #1
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff fc39 	bl	80012ce <gpio_altfn>
 8001a5c:	e01a      	b.n	8001a94 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <USART_PIN_CONFIG+0x214>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d109      	bne.n	8001a7a <USART_PIN_CONFIG+0x176>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d106      	bne.n	8001a7a <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2204      	movs	r2, #4
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fc2b 	bl	80012ce <gpio_altfn>
 8001a78:	e00c      	b.n	8001a94 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <USART_PIN_CONFIG+0x220>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d108      	bne.n	8001a94 <USART_PIN_CONFIG+0x190>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b0a      	cmp	r3, #10
 8001a86:	d105      	bne.n	8001a94 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 8001a88:	6839      	ldr	r1, [r7, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fc1d 	bl	80012ce <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <USART_PIN_CONFIG+0x220>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d109      	bne.n	8001ab0 <USART_PIN_CONFIG+0x1ac>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d106      	bne.n	8001ab0 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fc10 	bl	80012ce <gpio_altfn>
 8001aae:	e02c      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <USART_PIN_CONFIG+0x220>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d109      	bne.n	8001acc <USART_PIN_CONFIG+0x1c8>
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b0b      	cmp	r3, #11
 8001abc:	d106      	bne.n	8001acc <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fc02 	bl	80012ce <gpio_altfn>
 8001aca:	e01e      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <USART_PIN_CONFIG+0x214>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d11a      	bne.n	8001b0a <USART_PIN_CONFIG+0x206>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b0b      	cmp	r3, #11
 8001ad8:	d117      	bne.n	8001b0a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fbf4 	bl	80012ce <gpio_altfn>
}
 8001ae6:	e010      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <USART_PIN_CONFIG+0x224>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10c      	bne.n	8001b0a <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2204      	movs	r2, #4
 8001af6:	0018      	movs	r0, r3
 8001af8:	f7ff fbe9 	bl	80012ce <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 8001afc:	69b9      	ldr	r1, [r7, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2204      	movs	r2, #4
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff fbe3 	bl	80012ce <gpio_altfn>
}
 8001b08:	e7ff      	b.n	8001b0a <USART_PIN_CONFIG+0x206>
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40013800 	.word	0x40013800
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40004800 	.word	0x40004800
 8001b24:	48000800 	.word	0x48000800
 8001b28:	40004c00 	.word	0x40004c00

08001b2c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <USART_BDR_SEL+0x30>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6839      	ldr	r1, [r7, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7fe faf5 	bl	800012c <__udivsi3>
 8001b42:	0003      	movs	r3, r0
 8001b44:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60da      	str	r2, [r3, #12]
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b004      	add	sp, #16
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	20000000 	.word	0x20000000

08001b60 <USART_WRITE>:

/* Write a character to USART1 */
BML_StatusTypeDef USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len, uint16_t timeout) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	1cbb      	adds	r3, r7, #2
 8001b70:	801a      	strh	r2, [r3, #0]
	uint16_t i = timeout;
 8001b72:	2314      	movs	r3, #20
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	1cba      	adds	r2, r7, #2
 8001b78:	8812      	ldrh	r2, [r2, #0]
 8001b7a:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8001b7c:	2317      	movs	r3, #23
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e01c      	b.n	8001bc0 <USART_WRITE+0x60>
		if (len == 1) {
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <USART_WRITE+0x36>
			usart->TDR = ch;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b94:	e008      	b.n	8001ba8 <USART_WRITE+0x48>
		} else {
			usart->TDR = ch[i];
 8001b96:	2317      	movs	r3, #23
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	18d3      	adds	r3, r2, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE)){
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0fa      	beq.n	8001baa <USART_WRITE+0x4a>
	for (uint8_t i = 0; i < len; i++) {
 8001bb4:	2117      	movs	r1, #23
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	3201      	adds	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	2317      	movs	r3, #23
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8dc      	bhi.n	8001b86 <USART_WRITE+0x26>
//			if(i <= 0){
//				return BML_TIMEOUT;
//			}
		}
	}
	return BML_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <print>:
	return chr;
}

//******************************* UART SERIAL PRINTING ***************************************//

void print(const char *fmt, ...) {
 8001bd8:	b40f      	push	{r0, r1, r2, r3}
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001be0:	2314      	movs	r3, #20
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	0049      	lsls	r1, r1, #1
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <print+0x48>)
 8001bf0:	f000 f88e 	bl	8001d10 <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <print+0x48>)
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7fe fa86 	bl	8000108 <strlen>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	1dbb      	adds	r3, r7, #6
 8001c00:	801a      	strh	r2, [r3, #0]
	USART_WRITE(USART4, buffer, len, 100);
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	4906      	ldr	r1, [pc, #24]	; (8001c20 <print+0x48>)
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <print+0x4c>)
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	f7ff ffa8 	bl	8001b60 <USART_WRITE>

}
 8001c10:	46c0      	nop			; (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b002      	add	sp, #8
 8001c16:	bc80      	pop	{r7}
 8001c18:	bc08      	pop	{r3}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	4718      	bx	r3
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	200000e4 	.word	0x200000e4
 8001c24:	40004c00 	.word	0x40004c00

08001c28 <uart_print_config>:

void uart_print_config(uint32_t baudRate) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	6078      	str	r0, [r7, #4]
	USART_INIT(USART4, PORTC, PORTC, 10, 11, baudRate);
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <uart_print_config+0x24>)
 8001c32:	4906      	ldr	r1, [pc, #24]	; (8001c4c <uart_print_config+0x24>)
 8001c34:	4806      	ldr	r0, [pc, #24]	; (8001c50 <uart_print_config+0x28>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	230b      	movs	r3, #11
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	230a      	movs	r3, #10
 8001c40:	f7ff fdfa 	bl	8001838 <USART_INIT>
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	40004c00 	.word	0x40004c00

08001c54 <__errno>:
 8001c54:	4b01      	ldr	r3, [pc, #4]	; (8001c5c <__errno+0x8>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	4770      	bx	lr
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	2000004c 	.word	0x2000004c

08001c60 <__libc_init_array>:
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	2600      	movs	r6, #0
 8001c64:	4d0c      	ldr	r5, [pc, #48]	; (8001c98 <__libc_init_array+0x38>)
 8001c66:	4c0d      	ldr	r4, [pc, #52]	; (8001c9c <__libc_init_array+0x3c>)
 8001c68:	1b64      	subs	r4, r4, r5
 8001c6a:	10a4      	asrs	r4, r4, #2
 8001c6c:	42a6      	cmp	r6, r4
 8001c6e:	d109      	bne.n	8001c84 <__libc_init_array+0x24>
 8001c70:	2600      	movs	r6, #0
 8001c72:	f000 fca3 	bl	80025bc <_init>
 8001c76:	4d0a      	ldr	r5, [pc, #40]	; (8001ca0 <__libc_init_array+0x40>)
 8001c78:	4c0a      	ldr	r4, [pc, #40]	; (8001ca4 <__libc_init_array+0x44>)
 8001c7a:	1b64      	subs	r4, r4, r5
 8001c7c:	10a4      	asrs	r4, r4, #2
 8001c7e:	42a6      	cmp	r6, r4
 8001c80:	d105      	bne.n	8001c8e <__libc_init_array+0x2e>
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
 8001c84:	00b3      	lsls	r3, r6, #2
 8001c86:	58eb      	ldr	r3, [r5, r3]
 8001c88:	4798      	blx	r3
 8001c8a:	3601      	adds	r6, #1
 8001c8c:	e7ee      	b.n	8001c6c <__libc_init_array+0xc>
 8001c8e:	00b3      	lsls	r3, r6, #2
 8001c90:	58eb      	ldr	r3, [r5, r3]
 8001c92:	4798      	blx	r3
 8001c94:	3601      	adds	r6, #1
 8001c96:	e7f2      	b.n	8001c7e <__libc_init_array+0x1e>
 8001c98:	080026c8 	.word	0x080026c8
 8001c9c:	080026c8 	.word	0x080026c8
 8001ca0:	080026c8 	.word	0x080026c8
 8001ca4:	080026cc 	.word	0x080026cc

08001ca8 <memset>:
 8001ca8:	0003      	movs	r3, r0
 8001caa:	1882      	adds	r2, r0, r2
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d100      	bne.n	8001cb2 <memset+0xa>
 8001cb0:	4770      	bx	lr
 8001cb2:	7019      	strb	r1, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	e7f9      	b.n	8001cac <memset+0x4>

08001cb8 <_vsniprintf_r>:
 8001cb8:	b530      	push	{r4, r5, lr}
 8001cba:	0014      	movs	r4, r2
 8001cbc:	0005      	movs	r5, r0
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	b09b      	sub	sp, #108	; 0x6c
 8001cc2:	2c00      	cmp	r4, #0
 8001cc4:	da05      	bge.n	8001cd2 <_vsniprintf_r+0x1a>
 8001cc6:	238b      	movs	r3, #139	; 0x8b
 8001cc8:	6003      	str	r3, [r0, #0]
 8001cca:	2001      	movs	r0, #1
 8001ccc:	4240      	negs	r0, r0
 8001cce:	b01b      	add	sp, #108	; 0x6c
 8001cd0:	bd30      	pop	{r4, r5, pc}
 8001cd2:	2382      	movs	r3, #130	; 0x82
 8001cd4:	4668      	mov	r0, sp
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	8183      	strh	r3, [r0, #12]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9100      	str	r1, [sp, #0]
 8001cde:	9104      	str	r1, [sp, #16]
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d000      	beq.n	8001ce6 <_vsniprintf_r+0x2e>
 8001ce4:	1e63      	subs	r3, r4, #1
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	9305      	str	r3, [sp, #20]
 8001cea:	2301      	movs	r3, #1
 8001cec:	4669      	mov	r1, sp
 8001cee:	425b      	negs	r3, r3
 8001cf0:	81cb      	strh	r3, [r1, #14]
 8001cf2:	0028      	movs	r0, r5
 8001cf4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001cf6:	f000 f879 	bl	8001dec <_svfiprintf_r>
 8001cfa:	1c43      	adds	r3, r0, #1
 8001cfc:	da01      	bge.n	8001d02 <_vsniprintf_r+0x4a>
 8001cfe:	238b      	movs	r3, #139	; 0x8b
 8001d00:	602b      	str	r3, [r5, #0]
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d0e3      	beq.n	8001cce <_vsniprintf_r+0x16>
 8001d06:	2300      	movs	r3, #0
 8001d08:	9a00      	ldr	r2, [sp, #0]
 8001d0a:	7013      	strb	r3, [r2, #0]
 8001d0c:	e7df      	b.n	8001cce <_vsniprintf_r+0x16>
	...

08001d10 <vsniprintf>:
 8001d10:	b507      	push	{r0, r1, r2, lr}
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	0013      	movs	r3, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	0001      	movs	r1, r0
 8001d1a:	4802      	ldr	r0, [pc, #8]	; (8001d24 <vsniprintf+0x14>)
 8001d1c:	6800      	ldr	r0, [r0, #0]
 8001d1e:	f7ff ffcb 	bl	8001cb8 <_vsniprintf_r>
 8001d22:	bd0e      	pop	{r1, r2, r3, pc}
 8001d24:	2000004c 	.word	0x2000004c

08001d28 <__ssputs_r>:
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	688e      	ldr	r6, [r1, #8]
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	0007      	movs	r7, r0
 8001d30:	000c      	movs	r4, r1
 8001d32:	9203      	str	r2, [sp, #12]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	429e      	cmp	r6, r3
 8001d38:	d83c      	bhi.n	8001db4 <__ssputs_r+0x8c>
 8001d3a:	2390      	movs	r3, #144	; 0x90
 8001d3c:	898a      	ldrh	r2, [r1, #12]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	421a      	tst	r2, r3
 8001d42:	d034      	beq.n	8001dae <__ssputs_r+0x86>
 8001d44:	6909      	ldr	r1, [r1, #16]
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	6960      	ldr	r0, [r4, #20]
 8001d4a:	1a5b      	subs	r3, r3, r1
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2303      	movs	r3, #3
 8001d50:	4343      	muls	r3, r0
 8001d52:	0fdd      	lsrs	r5, r3, #31
 8001d54:	18ed      	adds	r5, r5, r3
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	9802      	ldr	r0, [sp, #8]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	181b      	adds	r3, r3, r0
 8001d5e:	106d      	asrs	r5, r5, #1
 8001d60:	42ab      	cmp	r3, r5
 8001d62:	d900      	bls.n	8001d66 <__ssputs_r+0x3e>
 8001d64:	001d      	movs	r5, r3
 8001d66:	0553      	lsls	r3, r2, #21
 8001d68:	d532      	bpl.n	8001dd0 <__ssputs_r+0xa8>
 8001d6a:	0029      	movs	r1, r5
 8001d6c:	0038      	movs	r0, r7
 8001d6e:	f000 fb53 	bl	8002418 <_malloc_r>
 8001d72:	1e06      	subs	r6, r0, #0
 8001d74:	d109      	bne.n	8001d8a <__ssputs_r+0x62>
 8001d76:	230c      	movs	r3, #12
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	2340      	movs	r3, #64	; 0x40
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	89a2      	ldrh	r2, [r4, #12]
 8001d80:	4240      	negs	r0, r0
 8001d82:	4313      	orrs	r3, r2
 8001d84:	81a3      	strh	r3, [r4, #12]
 8001d86:	b005      	add	sp, #20
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	9a02      	ldr	r2, [sp, #8]
 8001d8c:	6921      	ldr	r1, [r4, #16]
 8001d8e:	f000 faba 	bl	8002306 <memcpy>
 8001d92:	89a3      	ldrh	r3, [r4, #12]
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <__ssputs_r+0xc0>)
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	81a3      	strh	r3, [r4, #12]
 8001d9e:	9b02      	ldr	r3, [sp, #8]
 8001da0:	6126      	str	r6, [r4, #16]
 8001da2:	18f6      	adds	r6, r6, r3
 8001da4:	6026      	str	r6, [r4, #0]
 8001da6:	6165      	str	r5, [r4, #20]
 8001da8:	9e01      	ldr	r6, [sp, #4]
 8001daa:	1aed      	subs	r5, r5, r3
 8001dac:	60a5      	str	r5, [r4, #8]
 8001dae:	9b01      	ldr	r3, [sp, #4]
 8001db0:	429e      	cmp	r6, r3
 8001db2:	d900      	bls.n	8001db6 <__ssputs_r+0x8e>
 8001db4:	9e01      	ldr	r6, [sp, #4]
 8001db6:	0032      	movs	r2, r6
 8001db8:	9903      	ldr	r1, [sp, #12]
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	f000 faac 	bl	8002318 <memmove>
 8001dc0:	68a3      	ldr	r3, [r4, #8]
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	1b9b      	subs	r3, r3, r6
 8001dc6:	60a3      	str	r3, [r4, #8]
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	199e      	adds	r6, r3, r6
 8001dcc:	6026      	str	r6, [r4, #0]
 8001dce:	e7da      	b.n	8001d86 <__ssputs_r+0x5e>
 8001dd0:	002a      	movs	r2, r5
 8001dd2:	0038      	movs	r0, r7
 8001dd4:	f000 fb96 	bl	8002504 <_realloc_r>
 8001dd8:	1e06      	subs	r6, r0, #0
 8001dda:	d1e0      	bne.n	8001d9e <__ssputs_r+0x76>
 8001ddc:	0038      	movs	r0, r7
 8001dde:	6921      	ldr	r1, [r4, #16]
 8001de0:	f000 faae 	bl	8002340 <_free_r>
 8001de4:	e7c7      	b.n	8001d76 <__ssputs_r+0x4e>
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	fffffb7f 	.word	0xfffffb7f

08001dec <_svfiprintf_r>:
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b0a1      	sub	sp, #132	; 0x84
 8001df0:	9003      	str	r0, [sp, #12]
 8001df2:	001d      	movs	r5, r3
 8001df4:	898b      	ldrh	r3, [r1, #12]
 8001df6:	000f      	movs	r7, r1
 8001df8:	0016      	movs	r6, r2
 8001dfa:	061b      	lsls	r3, r3, #24
 8001dfc:	d511      	bpl.n	8001e22 <_svfiprintf_r+0x36>
 8001dfe:	690b      	ldr	r3, [r1, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10e      	bne.n	8001e22 <_svfiprintf_r+0x36>
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	f000 fb07 	bl	8002418 <_malloc_r>
 8001e0a:	6038      	str	r0, [r7, #0]
 8001e0c:	6138      	str	r0, [r7, #16]
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d105      	bne.n	8001e1e <_svfiprintf_r+0x32>
 8001e12:	230c      	movs	r3, #12
 8001e14:	9a03      	ldr	r2, [sp, #12]
 8001e16:	3801      	subs	r0, #1
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	b021      	add	sp, #132	; 0x84
 8001e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e1e:	2340      	movs	r3, #64	; 0x40
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	2300      	movs	r3, #0
 8001e24:	ac08      	add	r4, sp, #32
 8001e26:	6163      	str	r3, [r4, #20]
 8001e28:	3320      	adds	r3, #32
 8001e2a:	7663      	strb	r3, [r4, #25]
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	76a3      	strb	r3, [r4, #26]
 8001e30:	9507      	str	r5, [sp, #28]
 8001e32:	0035      	movs	r5, r6
 8001e34:	782b      	ldrb	r3, [r5, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <_svfiprintf_r+0x52>
 8001e3a:	2b25      	cmp	r3, #37	; 0x25
 8001e3c:	d147      	bne.n	8001ece <_svfiprintf_r+0xe2>
 8001e3e:	1bab      	subs	r3, r5, r6
 8001e40:	9305      	str	r3, [sp, #20]
 8001e42:	42b5      	cmp	r5, r6
 8001e44:	d00c      	beq.n	8001e60 <_svfiprintf_r+0x74>
 8001e46:	0032      	movs	r2, r6
 8001e48:	0039      	movs	r1, r7
 8001e4a:	9803      	ldr	r0, [sp, #12]
 8001e4c:	f7ff ff6c 	bl	8001d28 <__ssputs_r>
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d100      	bne.n	8001e56 <_svfiprintf_r+0x6a>
 8001e54:	e0ae      	b.n	8001fb4 <_svfiprintf_r+0x1c8>
 8001e56:	6962      	ldr	r2, [r4, #20]
 8001e58:	9b05      	ldr	r3, [sp, #20]
 8001e5a:	4694      	mov	ip, r2
 8001e5c:	4463      	add	r3, ip
 8001e5e:	6163      	str	r3, [r4, #20]
 8001e60:	782b      	ldrb	r3, [r5, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d100      	bne.n	8001e68 <_svfiprintf_r+0x7c>
 8001e66:	e0a5      	b.n	8001fb4 <_svfiprintf_r+0x1c8>
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	6062      	str	r2, [r4, #4]
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	3254      	adds	r2, #84	; 0x54
 8001e74:	1852      	adds	r2, r2, r1
 8001e76:	1c6e      	adds	r6, r5, #1
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	60e3      	str	r3, [r4, #12]
 8001e7c:	60a3      	str	r3, [r4, #8]
 8001e7e:	7013      	strb	r3, [r2, #0]
 8001e80:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e82:	2205      	movs	r2, #5
 8001e84:	7831      	ldrb	r1, [r6, #0]
 8001e86:	4854      	ldr	r0, [pc, #336]	; (8001fd8 <_svfiprintf_r+0x1ec>)
 8001e88:	f000 fa32 	bl	80022f0 <memchr>
 8001e8c:	1c75      	adds	r5, r6, #1
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d11f      	bne.n	8001ed2 <_svfiprintf_r+0xe6>
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	06d3      	lsls	r3, r2, #27
 8001e96:	d504      	bpl.n	8001ea2 <_svfiprintf_r+0xb6>
 8001e98:	2353      	movs	r3, #83	; 0x53
 8001e9a:	a904      	add	r1, sp, #16
 8001e9c:	185b      	adds	r3, r3, r1
 8001e9e:	2120      	movs	r1, #32
 8001ea0:	7019      	strb	r1, [r3, #0]
 8001ea2:	0713      	lsls	r3, r2, #28
 8001ea4:	d504      	bpl.n	8001eb0 <_svfiprintf_r+0xc4>
 8001ea6:	2353      	movs	r3, #83	; 0x53
 8001ea8:	a904      	add	r1, sp, #16
 8001eaa:	185b      	adds	r3, r3, r1
 8001eac:	212b      	movs	r1, #43	; 0x2b
 8001eae:	7019      	strb	r1, [r3, #0]
 8001eb0:	7833      	ldrb	r3, [r6, #0]
 8001eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8001eb4:	d016      	beq.n	8001ee4 <_svfiprintf_r+0xf8>
 8001eb6:	0035      	movs	r5, r6
 8001eb8:	2100      	movs	r1, #0
 8001eba:	200a      	movs	r0, #10
 8001ebc:	68e3      	ldr	r3, [r4, #12]
 8001ebe:	782a      	ldrb	r2, [r5, #0]
 8001ec0:	1c6e      	adds	r6, r5, #1
 8001ec2:	3a30      	subs	r2, #48	; 0x30
 8001ec4:	2a09      	cmp	r2, #9
 8001ec6:	d94e      	bls.n	8001f66 <_svfiprintf_r+0x17a>
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d111      	bne.n	8001ef0 <_svfiprintf_r+0x104>
 8001ecc:	e017      	b.n	8001efe <_svfiprintf_r+0x112>
 8001ece:	3501      	adds	r5, #1
 8001ed0:	e7b0      	b.n	8001e34 <_svfiprintf_r+0x48>
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <_svfiprintf_r+0x1ec>)
 8001ed4:	6822      	ldr	r2, [r4, #0]
 8001ed6:	1ac0      	subs	r0, r0, r3
 8001ed8:	2301      	movs	r3, #1
 8001eda:	4083      	lsls	r3, r0
 8001edc:	4313      	orrs	r3, r2
 8001ede:	002e      	movs	r6, r5
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	e7ce      	b.n	8001e82 <_svfiprintf_r+0x96>
 8001ee4:	9b07      	ldr	r3, [sp, #28]
 8001ee6:	1d19      	adds	r1, r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	9107      	str	r1, [sp, #28]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db01      	blt.n	8001ef4 <_svfiprintf_r+0x108>
 8001ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ef2:	e004      	b.n	8001efe <_svfiprintf_r+0x112>
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	60e3      	str	r3, [r4, #12]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	4313      	orrs	r3, r2
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	782b      	ldrb	r3, [r5, #0]
 8001f00:	2b2e      	cmp	r3, #46	; 0x2e
 8001f02:	d10a      	bne.n	8001f1a <_svfiprintf_r+0x12e>
 8001f04:	786b      	ldrb	r3, [r5, #1]
 8001f06:	2b2a      	cmp	r3, #42	; 0x2a
 8001f08:	d135      	bne.n	8001f76 <_svfiprintf_r+0x18a>
 8001f0a:	9b07      	ldr	r3, [sp, #28]
 8001f0c:	3502      	adds	r5, #2
 8001f0e:	1d1a      	adds	r2, r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	9207      	str	r2, [sp, #28]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db2b      	blt.n	8001f70 <_svfiprintf_r+0x184>
 8001f18:	9309      	str	r3, [sp, #36]	; 0x24
 8001f1a:	4e30      	ldr	r6, [pc, #192]	; (8001fdc <_svfiprintf_r+0x1f0>)
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	0030      	movs	r0, r6
 8001f20:	7829      	ldrb	r1, [r5, #0]
 8001f22:	f000 f9e5 	bl	80022f0 <memchr>
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d006      	beq.n	8001f38 <_svfiprintf_r+0x14c>
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	1b80      	subs	r0, r0, r6
 8001f2e:	4083      	lsls	r3, r0
 8001f30:	6822      	ldr	r2, [r4, #0]
 8001f32:	3501      	adds	r5, #1
 8001f34:	4313      	orrs	r3, r2
 8001f36:	6023      	str	r3, [r4, #0]
 8001f38:	7829      	ldrb	r1, [r5, #0]
 8001f3a:	2206      	movs	r2, #6
 8001f3c:	4828      	ldr	r0, [pc, #160]	; (8001fe0 <_svfiprintf_r+0x1f4>)
 8001f3e:	1c6e      	adds	r6, r5, #1
 8001f40:	7621      	strb	r1, [r4, #24]
 8001f42:	f000 f9d5 	bl	80022f0 <memchr>
 8001f46:	2800      	cmp	r0, #0
 8001f48:	d03c      	beq.n	8001fc4 <_svfiprintf_r+0x1d8>
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <_svfiprintf_r+0x1f8>)
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d125      	bne.n	8001f9c <_svfiprintf_r+0x1b0>
 8001f50:	2207      	movs	r2, #7
 8001f52:	9b07      	ldr	r3, [sp, #28]
 8001f54:	3307      	adds	r3, #7
 8001f56:	4393      	bics	r3, r2
 8001f58:	3308      	adds	r3, #8
 8001f5a:	9307      	str	r3, [sp, #28]
 8001f5c:	6963      	ldr	r3, [r4, #20]
 8001f5e:	9a04      	ldr	r2, [sp, #16]
 8001f60:	189b      	adds	r3, r3, r2
 8001f62:	6163      	str	r3, [r4, #20]
 8001f64:	e765      	b.n	8001e32 <_svfiprintf_r+0x46>
 8001f66:	4343      	muls	r3, r0
 8001f68:	0035      	movs	r5, r6
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	189b      	adds	r3, r3, r2
 8001f6e:	e7a6      	b.n	8001ebe <_svfiprintf_r+0xd2>
 8001f70:	2301      	movs	r3, #1
 8001f72:	425b      	negs	r3, r3
 8001f74:	e7d0      	b.n	8001f18 <_svfiprintf_r+0x12c>
 8001f76:	2300      	movs	r3, #0
 8001f78:	200a      	movs	r0, #10
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	3501      	adds	r5, #1
 8001f7e:	6063      	str	r3, [r4, #4]
 8001f80:	7829      	ldrb	r1, [r5, #0]
 8001f82:	1c6e      	adds	r6, r5, #1
 8001f84:	3930      	subs	r1, #48	; 0x30
 8001f86:	2909      	cmp	r1, #9
 8001f88:	d903      	bls.n	8001f92 <_svfiprintf_r+0x1a6>
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0c5      	beq.n	8001f1a <_svfiprintf_r+0x12e>
 8001f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f90:	e7c3      	b.n	8001f1a <_svfiprintf_r+0x12e>
 8001f92:	4342      	muls	r2, r0
 8001f94:	0035      	movs	r5, r6
 8001f96:	2301      	movs	r3, #1
 8001f98:	1852      	adds	r2, r2, r1
 8001f9a:	e7f1      	b.n	8001f80 <_svfiprintf_r+0x194>
 8001f9c:	ab07      	add	r3, sp, #28
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	003a      	movs	r2, r7
 8001fa2:	0021      	movs	r1, r4
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_svfiprintf_r+0x1fc>)
 8001fa6:	9803      	ldr	r0, [sp, #12]
 8001fa8:	e000      	b.n	8001fac <_svfiprintf_r+0x1c0>
 8001faa:	bf00      	nop
 8001fac:	9004      	str	r0, [sp, #16]
 8001fae:	9b04      	ldr	r3, [sp, #16]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	d1d3      	bne.n	8001f5c <_svfiprintf_r+0x170>
 8001fb4:	89bb      	ldrh	r3, [r7, #12]
 8001fb6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001fb8:	065b      	lsls	r3, r3, #25
 8001fba:	d400      	bmi.n	8001fbe <_svfiprintf_r+0x1d2>
 8001fbc:	e72d      	b.n	8001e1a <_svfiprintf_r+0x2e>
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	4240      	negs	r0, r0
 8001fc2:	e72a      	b.n	8001e1a <_svfiprintf_r+0x2e>
 8001fc4:	ab07      	add	r3, sp, #28
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	003a      	movs	r2, r7
 8001fca:	0021      	movs	r1, r4
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <_svfiprintf_r+0x1fc>)
 8001fce:	9803      	ldr	r0, [sp, #12]
 8001fd0:	f000 f87c 	bl	80020cc <_printf_i>
 8001fd4:	e7ea      	b.n	8001fac <_svfiprintf_r+0x1c0>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	08002694 	.word	0x08002694
 8001fdc:	0800269a 	.word	0x0800269a
 8001fe0:	0800269e 	.word	0x0800269e
 8001fe4:	00000000 	.word	0x00000000
 8001fe8:	08001d29 	.word	0x08001d29

08001fec <_printf_common>:
 8001fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fee:	0015      	movs	r5, r2
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	688a      	ldr	r2, [r1, #8]
 8001ff4:	690b      	ldr	r3, [r1, #16]
 8001ff6:	000c      	movs	r4, r1
 8001ff8:	9000      	str	r0, [sp, #0]
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	da00      	bge.n	8002000 <_printf_common+0x14>
 8001ffe:	0013      	movs	r3, r2
 8002000:	0022      	movs	r2, r4
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	3243      	adds	r2, #67	; 0x43
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	2a00      	cmp	r2, #0
 800200a:	d001      	beq.n	8002010 <_printf_common+0x24>
 800200c:	3301      	adds	r3, #1
 800200e:	602b      	str	r3, [r5, #0]
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	069b      	lsls	r3, r3, #26
 8002014:	d502      	bpl.n	800201c <_printf_common+0x30>
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	3302      	adds	r3, #2
 800201a:	602b      	str	r3, [r5, #0]
 800201c:	6822      	ldr	r2, [r4, #0]
 800201e:	2306      	movs	r3, #6
 8002020:	0017      	movs	r7, r2
 8002022:	401f      	ands	r7, r3
 8002024:	421a      	tst	r2, r3
 8002026:	d027      	beq.n	8002078 <_printf_common+0x8c>
 8002028:	0023      	movs	r3, r4
 800202a:	3343      	adds	r3, #67	; 0x43
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	4193      	sbcs	r3, r2
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	0692      	lsls	r2, r2, #26
 8002036:	d430      	bmi.n	800209a <_printf_common+0xae>
 8002038:	0022      	movs	r2, r4
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	9800      	ldr	r0, [sp, #0]
 800203e:	9e08      	ldr	r6, [sp, #32]
 8002040:	3243      	adds	r2, #67	; 0x43
 8002042:	47b0      	blx	r6
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d025      	beq.n	8002094 <_printf_common+0xa8>
 8002048:	2306      	movs	r3, #6
 800204a:	6820      	ldr	r0, [r4, #0]
 800204c:	682a      	ldr	r2, [r5, #0]
 800204e:	68e1      	ldr	r1, [r4, #12]
 8002050:	2500      	movs	r5, #0
 8002052:	4003      	ands	r3, r0
 8002054:	2b04      	cmp	r3, #4
 8002056:	d103      	bne.n	8002060 <_printf_common+0x74>
 8002058:	1a8d      	subs	r5, r1, r2
 800205a:	43eb      	mvns	r3, r5
 800205c:	17db      	asrs	r3, r3, #31
 800205e:	401d      	ands	r5, r3
 8002060:	68a3      	ldr	r3, [r4, #8]
 8002062:	6922      	ldr	r2, [r4, #16]
 8002064:	4293      	cmp	r3, r2
 8002066:	dd01      	ble.n	800206c <_printf_common+0x80>
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	18ed      	adds	r5, r5, r3
 800206c:	2700      	movs	r7, #0
 800206e:	42bd      	cmp	r5, r7
 8002070:	d120      	bne.n	80020b4 <_printf_common+0xc8>
 8002072:	2000      	movs	r0, #0
 8002074:	e010      	b.n	8002098 <_printf_common+0xac>
 8002076:	3701      	adds	r7, #1
 8002078:	68e3      	ldr	r3, [r4, #12]
 800207a:	682a      	ldr	r2, [r5, #0]
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	42bb      	cmp	r3, r7
 8002080:	ddd2      	ble.n	8002028 <_printf_common+0x3c>
 8002082:	0022      	movs	r2, r4
 8002084:	2301      	movs	r3, #1
 8002086:	9901      	ldr	r1, [sp, #4]
 8002088:	9800      	ldr	r0, [sp, #0]
 800208a:	9e08      	ldr	r6, [sp, #32]
 800208c:	3219      	adds	r2, #25
 800208e:	47b0      	blx	r6
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d1f0      	bne.n	8002076 <_printf_common+0x8a>
 8002094:	2001      	movs	r0, #1
 8002096:	4240      	negs	r0, r0
 8002098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800209a:	2030      	movs	r0, #48	; 0x30
 800209c:	18e1      	adds	r1, r4, r3
 800209e:	3143      	adds	r1, #67	; 0x43
 80020a0:	7008      	strb	r0, [r1, #0]
 80020a2:	0021      	movs	r1, r4
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	3145      	adds	r1, #69	; 0x45
 80020a8:	7809      	ldrb	r1, [r1, #0]
 80020aa:	18a2      	adds	r2, r4, r2
 80020ac:	3243      	adds	r2, #67	; 0x43
 80020ae:	3302      	adds	r3, #2
 80020b0:	7011      	strb	r1, [r2, #0]
 80020b2:	e7c1      	b.n	8002038 <_printf_common+0x4c>
 80020b4:	0022      	movs	r2, r4
 80020b6:	2301      	movs	r3, #1
 80020b8:	9901      	ldr	r1, [sp, #4]
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	9e08      	ldr	r6, [sp, #32]
 80020be:	321a      	adds	r2, #26
 80020c0:	47b0      	blx	r6
 80020c2:	1c43      	adds	r3, r0, #1
 80020c4:	d0e6      	beq.n	8002094 <_printf_common+0xa8>
 80020c6:	3701      	adds	r7, #1
 80020c8:	e7d1      	b.n	800206e <_printf_common+0x82>
	...

080020cc <_printf_i>:
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b08b      	sub	sp, #44	; 0x2c
 80020d0:	9206      	str	r2, [sp, #24]
 80020d2:	000a      	movs	r2, r1
 80020d4:	3243      	adds	r2, #67	; 0x43
 80020d6:	9307      	str	r3, [sp, #28]
 80020d8:	9005      	str	r0, [sp, #20]
 80020da:	9204      	str	r2, [sp, #16]
 80020dc:	7e0a      	ldrb	r2, [r1, #24]
 80020de:	000c      	movs	r4, r1
 80020e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020e2:	2a78      	cmp	r2, #120	; 0x78
 80020e4:	d807      	bhi.n	80020f6 <_printf_i+0x2a>
 80020e6:	2a62      	cmp	r2, #98	; 0x62
 80020e8:	d809      	bhi.n	80020fe <_printf_i+0x32>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d100      	bne.n	80020f0 <_printf_i+0x24>
 80020ee:	e0c1      	b.n	8002274 <_printf_i+0x1a8>
 80020f0:	2a58      	cmp	r2, #88	; 0x58
 80020f2:	d100      	bne.n	80020f6 <_printf_i+0x2a>
 80020f4:	e08c      	b.n	8002210 <_printf_i+0x144>
 80020f6:	0026      	movs	r6, r4
 80020f8:	3642      	adds	r6, #66	; 0x42
 80020fa:	7032      	strb	r2, [r6, #0]
 80020fc:	e022      	b.n	8002144 <_printf_i+0x78>
 80020fe:	0010      	movs	r0, r2
 8002100:	3863      	subs	r0, #99	; 0x63
 8002102:	2815      	cmp	r0, #21
 8002104:	d8f7      	bhi.n	80020f6 <_printf_i+0x2a>
 8002106:	f7fe f807 	bl	8000118 <__gnu_thumb1_case_shi>
 800210a:	0016      	.short	0x0016
 800210c:	fff6001f 	.word	0xfff6001f
 8002110:	fff6fff6 	.word	0xfff6fff6
 8002114:	001ffff6 	.word	0x001ffff6
 8002118:	fff6fff6 	.word	0xfff6fff6
 800211c:	fff6fff6 	.word	0xfff6fff6
 8002120:	003600a8 	.word	0x003600a8
 8002124:	fff6009a 	.word	0xfff6009a
 8002128:	00b9fff6 	.word	0x00b9fff6
 800212c:	0036fff6 	.word	0x0036fff6
 8002130:	fff6fff6 	.word	0xfff6fff6
 8002134:	009e      	.short	0x009e
 8002136:	0026      	movs	r6, r4
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	3642      	adds	r6, #66	; 0x42
 800213c:	1d11      	adds	r1, r2, #4
 800213e:	6019      	str	r1, [r3, #0]
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	7033      	strb	r3, [r6, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	e0a7      	b.n	8002298 <_printf_i+0x1cc>
 8002148:	6808      	ldr	r0, [r1, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	1d0a      	adds	r2, r1, #4
 800214e:	0605      	lsls	r5, r0, #24
 8002150:	d50b      	bpl.n	800216a <_printf_i+0x9e>
 8002152:	680d      	ldr	r5, [r1, #0]
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	2d00      	cmp	r5, #0
 8002158:	da03      	bge.n	8002162 <_printf_i+0x96>
 800215a:	232d      	movs	r3, #45	; 0x2d
 800215c:	9a04      	ldr	r2, [sp, #16]
 800215e:	426d      	negs	r5, r5
 8002160:	7013      	strb	r3, [r2, #0]
 8002162:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <_printf_i+0x21c>)
 8002164:	270a      	movs	r7, #10
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	e01b      	b.n	80021a2 <_printf_i+0xd6>
 800216a:	680d      	ldr	r5, [r1, #0]
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	0641      	lsls	r1, r0, #25
 8002170:	d5f1      	bpl.n	8002156 <_printf_i+0x8a>
 8002172:	b22d      	sxth	r5, r5
 8002174:	e7ef      	b.n	8002156 <_printf_i+0x8a>
 8002176:	680d      	ldr	r5, [r1, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	1d08      	adds	r0, r1, #4
 800217c:	6018      	str	r0, [r3, #0]
 800217e:	062e      	lsls	r6, r5, #24
 8002180:	d501      	bpl.n	8002186 <_printf_i+0xba>
 8002182:	680d      	ldr	r5, [r1, #0]
 8002184:	e003      	b.n	800218e <_printf_i+0xc2>
 8002186:	066d      	lsls	r5, r5, #25
 8002188:	d5fb      	bpl.n	8002182 <_printf_i+0xb6>
 800218a:	680d      	ldr	r5, [r1, #0]
 800218c:	b2ad      	uxth	r5, r5
 800218e:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <_printf_i+0x21c>)
 8002190:	2708      	movs	r7, #8
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	2a6f      	cmp	r2, #111	; 0x6f
 8002196:	d000      	beq.n	800219a <_printf_i+0xce>
 8002198:	3702      	adds	r7, #2
 800219a:	0023      	movs	r3, r4
 800219c:	2200      	movs	r2, #0
 800219e:	3343      	adds	r3, #67	; 0x43
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	6863      	ldr	r3, [r4, #4]
 80021a4:	60a3      	str	r3, [r4, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db03      	blt.n	80021b2 <_printf_i+0xe6>
 80021aa:	2204      	movs	r2, #4
 80021ac:	6821      	ldr	r1, [r4, #0]
 80021ae:	4391      	bics	r1, r2
 80021b0:	6021      	str	r1, [r4, #0]
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d102      	bne.n	80021bc <_printf_i+0xf0>
 80021b6:	9e04      	ldr	r6, [sp, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <_printf_i+0x10a>
 80021bc:	9e04      	ldr	r6, [sp, #16]
 80021be:	0028      	movs	r0, r5
 80021c0:	0039      	movs	r1, r7
 80021c2:	f7fe f839 	bl	8000238 <__aeabi_uidivmod>
 80021c6:	9b03      	ldr	r3, [sp, #12]
 80021c8:	3e01      	subs	r6, #1
 80021ca:	5c5b      	ldrb	r3, [r3, r1]
 80021cc:	7033      	strb	r3, [r6, #0]
 80021ce:	002b      	movs	r3, r5
 80021d0:	0005      	movs	r5, r0
 80021d2:	429f      	cmp	r7, r3
 80021d4:	d9f3      	bls.n	80021be <_printf_i+0xf2>
 80021d6:	2f08      	cmp	r7, #8
 80021d8:	d109      	bne.n	80021ee <_printf_i+0x122>
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	07db      	lsls	r3, r3, #31
 80021de:	d506      	bpl.n	80021ee <_printf_i+0x122>
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	6922      	ldr	r2, [r4, #16]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dc02      	bgt.n	80021ee <_printf_i+0x122>
 80021e8:	2330      	movs	r3, #48	; 0x30
 80021ea:	3e01      	subs	r6, #1
 80021ec:	7033      	strb	r3, [r6, #0]
 80021ee:	9b04      	ldr	r3, [sp, #16]
 80021f0:	1b9b      	subs	r3, r3, r6
 80021f2:	6123      	str	r3, [r4, #16]
 80021f4:	9b07      	ldr	r3, [sp, #28]
 80021f6:	0021      	movs	r1, r4
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	9805      	ldr	r0, [sp, #20]
 80021fc:	9b06      	ldr	r3, [sp, #24]
 80021fe:	aa09      	add	r2, sp, #36	; 0x24
 8002200:	f7ff fef4 	bl	8001fec <_printf_common>
 8002204:	1c43      	adds	r3, r0, #1
 8002206:	d14c      	bne.n	80022a2 <_printf_i+0x1d6>
 8002208:	2001      	movs	r0, #1
 800220a:	4240      	negs	r0, r0
 800220c:	b00b      	add	sp, #44	; 0x2c
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	3145      	adds	r1, #69	; 0x45
 8002212:	700a      	strb	r2, [r1, #0]
 8002214:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <_printf_i+0x21c>)
 8002216:	9203      	str	r2, [sp, #12]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	6821      	ldr	r1, [r4, #0]
 800221c:	ca20      	ldmia	r2!, {r5}
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	0608      	lsls	r0, r1, #24
 8002222:	d516      	bpl.n	8002252 <_printf_i+0x186>
 8002224:	07cb      	lsls	r3, r1, #31
 8002226:	d502      	bpl.n	800222e <_printf_i+0x162>
 8002228:	2320      	movs	r3, #32
 800222a:	4319      	orrs	r1, r3
 800222c:	6021      	str	r1, [r4, #0]
 800222e:	2710      	movs	r7, #16
 8002230:	2d00      	cmp	r5, #0
 8002232:	d1b2      	bne.n	800219a <_printf_i+0xce>
 8002234:	2320      	movs	r3, #32
 8002236:	6822      	ldr	r2, [r4, #0]
 8002238:	439a      	bics	r2, r3
 800223a:	6022      	str	r2, [r4, #0]
 800223c:	e7ad      	b.n	800219a <_printf_i+0xce>
 800223e:	2220      	movs	r2, #32
 8002240:	6809      	ldr	r1, [r1, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	6022      	str	r2, [r4, #0]
 8002246:	0022      	movs	r2, r4
 8002248:	2178      	movs	r1, #120	; 0x78
 800224a:	3245      	adds	r2, #69	; 0x45
 800224c:	7011      	strb	r1, [r2, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <_printf_i+0x220>)
 8002250:	e7e1      	b.n	8002216 <_printf_i+0x14a>
 8002252:	0648      	lsls	r0, r1, #25
 8002254:	d5e6      	bpl.n	8002224 <_printf_i+0x158>
 8002256:	b2ad      	uxth	r5, r5
 8002258:	e7e4      	b.n	8002224 <_printf_i+0x158>
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	680d      	ldr	r5, [r1, #0]
 800225e:	1d10      	adds	r0, r2, #4
 8002260:	6949      	ldr	r1, [r1, #20]
 8002262:	6018      	str	r0, [r3, #0]
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	062e      	lsls	r6, r5, #24
 8002268:	d501      	bpl.n	800226e <_printf_i+0x1a2>
 800226a:	6019      	str	r1, [r3, #0]
 800226c:	e002      	b.n	8002274 <_printf_i+0x1a8>
 800226e:	066d      	lsls	r5, r5, #25
 8002270:	d5fb      	bpl.n	800226a <_printf_i+0x19e>
 8002272:	8019      	strh	r1, [r3, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	9e04      	ldr	r6, [sp, #16]
 8002278:	6123      	str	r3, [r4, #16]
 800227a:	e7bb      	b.n	80021f4 <_printf_i+0x128>
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	1d11      	adds	r1, r2, #4
 8002280:	6019      	str	r1, [r3, #0]
 8002282:	6816      	ldr	r6, [r2, #0]
 8002284:	2100      	movs	r1, #0
 8002286:	0030      	movs	r0, r6
 8002288:	6862      	ldr	r2, [r4, #4]
 800228a:	f000 f831 	bl	80022f0 <memchr>
 800228e:	2800      	cmp	r0, #0
 8002290:	d001      	beq.n	8002296 <_printf_i+0x1ca>
 8002292:	1b80      	subs	r0, r0, r6
 8002294:	6060      	str	r0, [r4, #4]
 8002296:	6863      	ldr	r3, [r4, #4]
 8002298:	6123      	str	r3, [r4, #16]
 800229a:	2300      	movs	r3, #0
 800229c:	9a04      	ldr	r2, [sp, #16]
 800229e:	7013      	strb	r3, [r2, #0]
 80022a0:	e7a8      	b.n	80021f4 <_printf_i+0x128>
 80022a2:	6923      	ldr	r3, [r4, #16]
 80022a4:	0032      	movs	r2, r6
 80022a6:	9906      	ldr	r1, [sp, #24]
 80022a8:	9805      	ldr	r0, [sp, #20]
 80022aa:	9d07      	ldr	r5, [sp, #28]
 80022ac:	47a8      	blx	r5
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d0aa      	beq.n	8002208 <_printf_i+0x13c>
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	079b      	lsls	r3, r3, #30
 80022b6:	d415      	bmi.n	80022e4 <_printf_i+0x218>
 80022b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ba:	68e0      	ldr	r0, [r4, #12]
 80022bc:	4298      	cmp	r0, r3
 80022be:	daa5      	bge.n	800220c <_printf_i+0x140>
 80022c0:	0018      	movs	r0, r3
 80022c2:	e7a3      	b.n	800220c <_printf_i+0x140>
 80022c4:	0022      	movs	r2, r4
 80022c6:	2301      	movs	r3, #1
 80022c8:	9906      	ldr	r1, [sp, #24]
 80022ca:	9805      	ldr	r0, [sp, #20]
 80022cc:	9e07      	ldr	r6, [sp, #28]
 80022ce:	3219      	adds	r2, #25
 80022d0:	47b0      	blx	r6
 80022d2:	1c43      	adds	r3, r0, #1
 80022d4:	d098      	beq.n	8002208 <_printf_i+0x13c>
 80022d6:	3501      	adds	r5, #1
 80022d8:	68e3      	ldr	r3, [r4, #12]
 80022da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	42ab      	cmp	r3, r5
 80022e0:	dcf0      	bgt.n	80022c4 <_printf_i+0x1f8>
 80022e2:	e7e9      	b.n	80022b8 <_printf_i+0x1ec>
 80022e4:	2500      	movs	r5, #0
 80022e6:	e7f7      	b.n	80022d8 <_printf_i+0x20c>
 80022e8:	080026a5 	.word	0x080026a5
 80022ec:	080026b6 	.word	0x080026b6

080022f0 <memchr>:
 80022f0:	b2c9      	uxtb	r1, r1
 80022f2:	1882      	adds	r2, r0, r2
 80022f4:	4290      	cmp	r0, r2
 80022f6:	d101      	bne.n	80022fc <memchr+0xc>
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr
 80022fc:	7803      	ldrb	r3, [r0, #0]
 80022fe:	428b      	cmp	r3, r1
 8002300:	d0fb      	beq.n	80022fa <memchr+0xa>
 8002302:	3001      	adds	r0, #1
 8002304:	e7f6      	b.n	80022f4 <memchr+0x4>

08002306 <memcpy>:
 8002306:	2300      	movs	r3, #0
 8002308:	b510      	push	{r4, lr}
 800230a:	429a      	cmp	r2, r3
 800230c:	d100      	bne.n	8002310 <memcpy+0xa>
 800230e:	bd10      	pop	{r4, pc}
 8002310:	5ccc      	ldrb	r4, [r1, r3]
 8002312:	54c4      	strb	r4, [r0, r3]
 8002314:	3301      	adds	r3, #1
 8002316:	e7f8      	b.n	800230a <memcpy+0x4>

08002318 <memmove>:
 8002318:	b510      	push	{r4, lr}
 800231a:	4288      	cmp	r0, r1
 800231c:	d902      	bls.n	8002324 <memmove+0xc>
 800231e:	188b      	adds	r3, r1, r2
 8002320:	4298      	cmp	r0, r3
 8002322:	d303      	bcc.n	800232c <memmove+0x14>
 8002324:	2300      	movs	r3, #0
 8002326:	e007      	b.n	8002338 <memmove+0x20>
 8002328:	5c8b      	ldrb	r3, [r1, r2]
 800232a:	5483      	strb	r3, [r0, r2]
 800232c:	3a01      	subs	r2, #1
 800232e:	d2fb      	bcs.n	8002328 <memmove+0x10>
 8002330:	bd10      	pop	{r4, pc}
 8002332:	5ccc      	ldrb	r4, [r1, r3]
 8002334:	54c4      	strb	r4, [r0, r3]
 8002336:	3301      	adds	r3, #1
 8002338:	429a      	cmp	r2, r3
 800233a:	d1fa      	bne.n	8002332 <memmove+0x1a>
 800233c:	e7f8      	b.n	8002330 <memmove+0x18>
	...

08002340 <_free_r>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	0005      	movs	r5, r0
 8002344:	2900      	cmp	r1, #0
 8002346:	d010      	beq.n	800236a <_free_r+0x2a>
 8002348:	1f0c      	subs	r4, r1, #4
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da00      	bge.n	8002352 <_free_r+0x12>
 8002350:	18e4      	adds	r4, r4, r3
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f918 	bl	8002588 <__malloc_lock>
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <_free_r+0x90>)
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <_free_r+0x2c>
 8002360:	6063      	str	r3, [r4, #4]
 8002362:	6014      	str	r4, [r2, #0]
 8002364:	0028      	movs	r0, r5
 8002366:	f000 f917 	bl	8002598 <__malloc_unlock>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	42a3      	cmp	r3, r4
 800236e:	d908      	bls.n	8002382 <_free_r+0x42>
 8002370:	6821      	ldr	r1, [r4, #0]
 8002372:	1860      	adds	r0, r4, r1
 8002374:	4283      	cmp	r3, r0
 8002376:	d1f3      	bne.n	8002360 <_free_r+0x20>
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	1841      	adds	r1, r0, r1
 800237e:	6021      	str	r1, [r4, #0]
 8002380:	e7ee      	b.n	8002360 <_free_r+0x20>
 8002382:	001a      	movs	r2, r3
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <_free_r+0x4e>
 800238a:	42a3      	cmp	r3, r4
 800238c:	d9f9      	bls.n	8002382 <_free_r+0x42>
 800238e:	6811      	ldr	r1, [r2, #0]
 8002390:	1850      	adds	r0, r2, r1
 8002392:	42a0      	cmp	r0, r4
 8002394:	d10b      	bne.n	80023ae <_free_r+0x6e>
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	1809      	adds	r1, r1, r0
 800239a:	1850      	adds	r0, r2, r1
 800239c:	6011      	str	r1, [r2, #0]
 800239e:	4283      	cmp	r3, r0
 80023a0:	d1e0      	bne.n	8002364 <_free_r+0x24>
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	1841      	adds	r1, r0, r1
 80023a8:	6011      	str	r1, [r2, #0]
 80023aa:	6053      	str	r3, [r2, #4]
 80023ac:	e7da      	b.n	8002364 <_free_r+0x24>
 80023ae:	42a0      	cmp	r0, r4
 80023b0:	d902      	bls.n	80023b8 <_free_r+0x78>
 80023b2:	230c      	movs	r3, #12
 80023b4:	602b      	str	r3, [r5, #0]
 80023b6:	e7d5      	b.n	8002364 <_free_r+0x24>
 80023b8:	6821      	ldr	r1, [r4, #0]
 80023ba:	1860      	adds	r0, r4, r1
 80023bc:	4283      	cmp	r3, r0
 80023be:	d103      	bne.n	80023c8 <_free_r+0x88>
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	1841      	adds	r1, r0, r1
 80023c6:	6021      	str	r1, [r4, #0]
 80023c8:	6063      	str	r3, [r4, #4]
 80023ca:	6054      	str	r4, [r2, #4]
 80023cc:	e7ca      	b.n	8002364 <_free_r+0x24>
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	200001e4 	.word	0x200001e4

080023d4 <sbrk_aligned>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4e0f      	ldr	r6, [pc, #60]	; (8002414 <sbrk_aligned+0x40>)
 80023d8:	000d      	movs	r5, r1
 80023da:	6831      	ldr	r1, [r6, #0]
 80023dc:	0004      	movs	r4, r0
 80023de:	2900      	cmp	r1, #0
 80023e0:	d102      	bne.n	80023e8 <sbrk_aligned+0x14>
 80023e2:	f000 f8bf 	bl	8002564 <_sbrk_r>
 80023e6:	6030      	str	r0, [r6, #0]
 80023e8:	0029      	movs	r1, r5
 80023ea:	0020      	movs	r0, r4
 80023ec:	f000 f8ba 	bl	8002564 <_sbrk_r>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d00a      	beq.n	800240a <sbrk_aligned+0x36>
 80023f4:	2303      	movs	r3, #3
 80023f6:	1cc5      	adds	r5, r0, #3
 80023f8:	439d      	bics	r5, r3
 80023fa:	42a8      	cmp	r0, r5
 80023fc:	d007      	beq.n	800240e <sbrk_aligned+0x3a>
 80023fe:	1a29      	subs	r1, r5, r0
 8002400:	0020      	movs	r0, r4
 8002402:	f000 f8af 	bl	8002564 <_sbrk_r>
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	d101      	bne.n	800240e <sbrk_aligned+0x3a>
 800240a:	2501      	movs	r5, #1
 800240c:	426d      	negs	r5, r5
 800240e:	0028      	movs	r0, r5
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	200001e8 	.word	0x200001e8

08002418 <_malloc_r>:
 8002418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800241a:	2203      	movs	r2, #3
 800241c:	1ccb      	adds	r3, r1, #3
 800241e:	4393      	bics	r3, r2
 8002420:	3308      	adds	r3, #8
 8002422:	0006      	movs	r6, r0
 8002424:	001f      	movs	r7, r3
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d232      	bcs.n	8002490 <_malloc_r+0x78>
 800242a:	270c      	movs	r7, #12
 800242c:	42b9      	cmp	r1, r7
 800242e:	d831      	bhi.n	8002494 <_malloc_r+0x7c>
 8002430:	0030      	movs	r0, r6
 8002432:	f000 f8a9 	bl	8002588 <__malloc_lock>
 8002436:	4d32      	ldr	r5, [pc, #200]	; (8002500 <_malloc_r+0xe8>)
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	001c      	movs	r4, r3
 800243c:	2c00      	cmp	r4, #0
 800243e:	d12e      	bne.n	800249e <_malloc_r+0x86>
 8002440:	0039      	movs	r1, r7
 8002442:	0030      	movs	r0, r6
 8002444:	f7ff ffc6 	bl	80023d4 <sbrk_aligned>
 8002448:	0004      	movs	r4, r0
 800244a:	1c43      	adds	r3, r0, #1
 800244c:	d11e      	bne.n	800248c <_malloc_r+0x74>
 800244e:	682c      	ldr	r4, [r5, #0]
 8002450:	0025      	movs	r5, r4
 8002452:	2d00      	cmp	r5, #0
 8002454:	d14a      	bne.n	80024ec <_malloc_r+0xd4>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	0029      	movs	r1, r5
 800245a:	18e3      	adds	r3, r4, r3
 800245c:	0030      	movs	r0, r6
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	f000 f880 	bl	8002564 <_sbrk_r>
 8002464:	9b01      	ldr	r3, [sp, #4]
 8002466:	4283      	cmp	r3, r0
 8002468:	d143      	bne.n	80024f2 <_malloc_r+0xda>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	3703      	adds	r7, #3
 800246e:	1aff      	subs	r7, r7, r3
 8002470:	2303      	movs	r3, #3
 8002472:	439f      	bics	r7, r3
 8002474:	3708      	adds	r7, #8
 8002476:	2f0c      	cmp	r7, #12
 8002478:	d200      	bcs.n	800247c <_malloc_r+0x64>
 800247a:	270c      	movs	r7, #12
 800247c:	0039      	movs	r1, r7
 800247e:	0030      	movs	r0, r6
 8002480:	f7ff ffa8 	bl	80023d4 <sbrk_aligned>
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	d034      	beq.n	80024f2 <_malloc_r+0xda>
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	19df      	adds	r7, r3, r7
 800248c:	6027      	str	r7, [r4, #0]
 800248e:	e013      	b.n	80024b8 <_malloc_r+0xa0>
 8002490:	2b00      	cmp	r3, #0
 8002492:	dacb      	bge.n	800242c <_malloc_r+0x14>
 8002494:	230c      	movs	r3, #12
 8002496:	2500      	movs	r5, #0
 8002498:	6033      	str	r3, [r6, #0]
 800249a:	0028      	movs	r0, r5
 800249c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800249e:	6822      	ldr	r2, [r4, #0]
 80024a0:	1bd1      	subs	r1, r2, r7
 80024a2:	d420      	bmi.n	80024e6 <_malloc_r+0xce>
 80024a4:	290b      	cmp	r1, #11
 80024a6:	d917      	bls.n	80024d8 <_malloc_r+0xc0>
 80024a8:	19e2      	adds	r2, r4, r7
 80024aa:	6027      	str	r7, [r4, #0]
 80024ac:	42a3      	cmp	r3, r4
 80024ae:	d111      	bne.n	80024d4 <_malloc_r+0xbc>
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	6863      	ldr	r3, [r4, #4]
 80024b4:	6011      	str	r1, [r2, #0]
 80024b6:	6053      	str	r3, [r2, #4]
 80024b8:	0030      	movs	r0, r6
 80024ba:	0025      	movs	r5, r4
 80024bc:	f000 f86c 	bl	8002598 <__malloc_unlock>
 80024c0:	2207      	movs	r2, #7
 80024c2:	350b      	adds	r5, #11
 80024c4:	1d23      	adds	r3, r4, #4
 80024c6:	4395      	bics	r5, r2
 80024c8:	1aea      	subs	r2, r5, r3
 80024ca:	429d      	cmp	r5, r3
 80024cc:	d0e5      	beq.n	800249a <_malloc_r+0x82>
 80024ce:	1b5b      	subs	r3, r3, r5
 80024d0:	50a3      	str	r3, [r4, r2]
 80024d2:	e7e2      	b.n	800249a <_malloc_r+0x82>
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e7ec      	b.n	80024b2 <_malloc_r+0x9a>
 80024d8:	6862      	ldr	r2, [r4, #4]
 80024da:	42a3      	cmp	r3, r4
 80024dc:	d101      	bne.n	80024e2 <_malloc_r+0xca>
 80024de:	602a      	str	r2, [r5, #0]
 80024e0:	e7ea      	b.n	80024b8 <_malloc_r+0xa0>
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	e7e8      	b.n	80024b8 <_malloc_r+0xa0>
 80024e6:	0023      	movs	r3, r4
 80024e8:	6864      	ldr	r4, [r4, #4]
 80024ea:	e7a7      	b.n	800243c <_malloc_r+0x24>
 80024ec:	002c      	movs	r4, r5
 80024ee:	686d      	ldr	r5, [r5, #4]
 80024f0:	e7af      	b.n	8002452 <_malloc_r+0x3a>
 80024f2:	230c      	movs	r3, #12
 80024f4:	0030      	movs	r0, r6
 80024f6:	6033      	str	r3, [r6, #0]
 80024f8:	f000 f84e 	bl	8002598 <__malloc_unlock>
 80024fc:	e7cd      	b.n	800249a <_malloc_r+0x82>
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	200001e4 	.word	0x200001e4

08002504 <_realloc_r>:
 8002504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002506:	0007      	movs	r7, r0
 8002508:	000e      	movs	r6, r1
 800250a:	0014      	movs	r4, r2
 800250c:	2900      	cmp	r1, #0
 800250e:	d105      	bne.n	800251c <_realloc_r+0x18>
 8002510:	0011      	movs	r1, r2
 8002512:	f7ff ff81 	bl	8002418 <_malloc_r>
 8002516:	0005      	movs	r5, r0
 8002518:	0028      	movs	r0, r5
 800251a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800251c:	2a00      	cmp	r2, #0
 800251e:	d103      	bne.n	8002528 <_realloc_r+0x24>
 8002520:	f7ff ff0e 	bl	8002340 <_free_r>
 8002524:	0025      	movs	r5, r4
 8002526:	e7f7      	b.n	8002518 <_realloc_r+0x14>
 8002528:	f000 f83e 	bl	80025a8 <_malloc_usable_size_r>
 800252c:	9001      	str	r0, [sp, #4]
 800252e:	4284      	cmp	r4, r0
 8002530:	d803      	bhi.n	800253a <_realloc_r+0x36>
 8002532:	0035      	movs	r5, r6
 8002534:	0843      	lsrs	r3, r0, #1
 8002536:	42a3      	cmp	r3, r4
 8002538:	d3ee      	bcc.n	8002518 <_realloc_r+0x14>
 800253a:	0021      	movs	r1, r4
 800253c:	0038      	movs	r0, r7
 800253e:	f7ff ff6b 	bl	8002418 <_malloc_r>
 8002542:	1e05      	subs	r5, r0, #0
 8002544:	d0e8      	beq.n	8002518 <_realloc_r+0x14>
 8002546:	9b01      	ldr	r3, [sp, #4]
 8002548:	0022      	movs	r2, r4
 800254a:	429c      	cmp	r4, r3
 800254c:	d900      	bls.n	8002550 <_realloc_r+0x4c>
 800254e:	001a      	movs	r2, r3
 8002550:	0031      	movs	r1, r6
 8002552:	0028      	movs	r0, r5
 8002554:	f7ff fed7 	bl	8002306 <memcpy>
 8002558:	0031      	movs	r1, r6
 800255a:	0038      	movs	r0, r7
 800255c:	f7ff fef0 	bl	8002340 <_free_r>
 8002560:	e7da      	b.n	8002518 <_realloc_r+0x14>
	...

08002564 <_sbrk_r>:
 8002564:	2300      	movs	r3, #0
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	4d06      	ldr	r5, [pc, #24]	; (8002584 <_sbrk_r+0x20>)
 800256a:	0004      	movs	r4, r0
 800256c:	0008      	movs	r0, r1
 800256e:	602b      	str	r3, [r5, #0]
 8002570:	f7fd ff30 	bl	80003d4 <_sbrk>
 8002574:	1c43      	adds	r3, r0, #1
 8002576:	d103      	bne.n	8002580 <_sbrk_r+0x1c>
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d000      	beq.n	8002580 <_sbrk_r+0x1c>
 800257e:	6023      	str	r3, [r4, #0]
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	200001ec 	.word	0x200001ec

08002588 <__malloc_lock>:
 8002588:	b510      	push	{r4, lr}
 800258a:	4802      	ldr	r0, [pc, #8]	; (8002594 <__malloc_lock+0xc>)
 800258c:	f000 f814 	bl	80025b8 <__retarget_lock_acquire_recursive>
 8002590:	bd10      	pop	{r4, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	200001f0 	.word	0x200001f0

08002598 <__malloc_unlock>:
 8002598:	b510      	push	{r4, lr}
 800259a:	4802      	ldr	r0, [pc, #8]	; (80025a4 <__malloc_unlock+0xc>)
 800259c:	f000 f80d 	bl	80025ba <__retarget_lock_release_recursive>
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	200001f0 	.word	0x200001f0

080025a8 <_malloc_usable_size_r>:
 80025a8:	1f0b      	subs	r3, r1, #4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	1f18      	subs	r0, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da01      	bge.n	80025b6 <_malloc_usable_size_r+0xe>
 80025b2:	580b      	ldr	r3, [r1, r0]
 80025b4:	18c0      	adds	r0, r0, r3
 80025b6:	4770      	bx	lr

080025b8 <__retarget_lock_acquire_recursive>:
 80025b8:	4770      	bx	lr

080025ba <__retarget_lock_release_recursive>:
 80025ba:	4770      	bx	lr

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
