
RTC_Dataread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002320  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080023e0  080023e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024b4  080024b4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080024bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200000b0  0800256c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  0800256c  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d38  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000100c  00000000  00000000  00023e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000528  00000000  00000000  00024e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000490  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dee  00000000  00000000  000257d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b00  00000000  00000000  0003e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1a7  00000000  00000000  000440c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d126d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014c0  00000000  00000000  000d12c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b0 	.word	0x200000b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023c8 	.word	0x080023c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b4 	.word	0x200000b4
 8000104:	080023c8 	.word	0x080023c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <bcdToDec>:
#define SCL_PIN		8

#define SDA_PORT	PORTB
#define SDA_PIN		9

int bcdToDec(uint8_t val) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
	return (int) (((val / 16) * 10) + (val % 16));
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	091b      	lsrs	r3, r3, #4
 8000256:	b2db      	uxtb	r3, r3
 8000258:	001a      	movs	r2, r3
 800025a:	0013      	movs	r3, r2
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	189b      	adds	r3, r3, r2
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	0019      	movs	r1, r3
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	220f      	movs	r2, #15
 800026a:	4013      	ands	r3, r2
 800026c:	18cb      	adds	r3, r1, r3
}
 800026e:	0018      	movs	r0, r3
 8000270:	46bd      	mov	sp, r7
 8000272:	b002      	add	sp, #8
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <i2c_config>:

I2C_CONFIG i2c1;

void i2c_config(){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	i2c1.i2c = I2C1;
 800027c:	4b04      	ldr	r3, [pc, #16]	; (8000290 <i2c_config+0x18>)
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <i2c_config+0x1c>)
 8000280:	601a      	str	r2, [r3, #0]
	i2c1.TIMING = FAST_MODE;
 8000282:	4b03      	ldr	r3, [pc, #12]	; (8000290 <i2c_config+0x18>)
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <i2c_config+0x20>)
 8000286:	605a      	str	r2, [r3, #4]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	200000cc 	.word	0x200000cc
 8000294:	40005400 	.word	0x40005400
 8000298:	0000020b 	.word	0x0000020b

0800029c <main>:

int main() {
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46d6      	mov	lr, sl
 80002a0:	464f      	mov	r7, r9
 80002a2:	4646      	mov	r6, r8
 80002a4:	b5c0      	push	{r6, r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af04      	add	r7, sp, #16
	RCC_CONFIG_48MHZ();
 80002aa:	f001 fb06 	bl	80018ba <RCC_CONFIG_48MHZ>
	USART_INIT(USART4, PORTC, PORTC, 10, 11, 9600);
 80002ae:	4a46      	ldr	r2, [pc, #280]	; (80003c8 <main+0x12c>)
 80002b0:	4945      	ldr	r1, [pc, #276]	; (80003c8 <main+0x12c>)
 80002b2:	4846      	ldr	r0, [pc, #280]	; (80003cc <main+0x130>)
 80002b4:	2396      	movs	r3, #150	; 0x96
 80002b6:	019b      	lsls	r3, r3, #6
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	230b      	movs	r3, #11
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	230a      	movs	r3, #10
 80002c0:	f001 f934 	bl	800152c <USART_INIT>

	gpio_config(SCL_PORT, SCL_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 80002c4:	4842      	ldr	r0, [pc, #264]	; (80003d0 <main+0x134>)
 80002c6:	2301      	movs	r3, #1
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2302      	movs	r3, #2
 80002d0:	2202      	movs	r2, #2
 80002d2:	2108      	movs	r1, #8
 80002d4:	f000 ff54 	bl	8001180 <gpio_config>
	gpio_config(SDA_PORT, SDA_PIN, ALT_MODE, HIGH_SPEED, EN_PU, OD);
 80002d8:	483d      	ldr	r0, [pc, #244]	; (80003d0 <main+0x134>)
 80002da:	2301      	movs	r3, #1
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	2302      	movs	r3, #2
 80002e4:	2202      	movs	r2, #2
 80002e6:	2109      	movs	r1, #9
 80002e8:	f000 ff4a 	bl	8001180 <gpio_config>

	gpio_altfn(SCL_PORT, SCL_PIN, I2C1_SCL_PB8);
 80002ec:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <main+0x134>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 f80d 	bl	8001312 <gpio_altfn>
	gpio_altfn(SDA_PORT, SDA_PIN, I2C1_SDA_PB9);
 80002f8:	4b35      	ldr	r3, [pc, #212]	; (80003d0 <main+0x134>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	2109      	movs	r1, #9
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f807 	bl	8001312 <gpio_altfn>

	i2c_config();
 8000304:	f7ff ffb8 	bl	8000278 <i2c_config>

	I2C_INIT(i2c1.i2c, i2c1.TIMING);
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <main+0x138>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b31      	ldr	r3, [pc, #196]	; (80003d4 <main+0x138>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	0019      	movs	r1, r3
 8000312:	0010      	movs	r0, r2
 8000314:	f001 fb0c 	bl	8001930 <I2C_INIT>

	/*                            Sec   Min    HR   DAY   DATE  Month  YR   */
//	uint8_t timeDateToSet[15] = { 0x00, 0x44, 0x04, 0x00, 0x23, 0x10, 0x22, 0 };
	uint8_t timeDateToSet[15] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0 };
 8000318:	2308      	movs	r3, #8
 800031a:	18f9      	adds	r1, r7, r3
 800031c:	4a2e      	ldr	r2, [pc, #184]	; (80003d8 <main+0x13c>)
 800031e:	000b      	movs	r3, r1
 8000320:	ca11      	ldmia	r2!, {r0, r4}
 8000322:	c311      	stmia	r3!, {r0, r4}
 8000324:	7812      	ldrb	r2, [r2, #0]
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	2309      	movs	r3, #9
 800032a:	18cb      	adds	r3, r1, r3
 800032c:	2206      	movs	r2, #6
 800032e:	2100      	movs	r1, #0
 8000330:	0018      	movs	r0, r3
 8000332:	f001 fbbf 	bl	8001ab4 <memset>
	/* 2017 September 26, Tuesday, 10:58:55 */
//	       I2C_MultiWrite(I2C1, SLAVE_ADDR, 0, 7, timeDateToSet);
	uint8_t data[7];

	USART_WRITE(USART4, "Working\n", 9);
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <main+0x140>)
 8000338:	4824      	ldr	r0, [pc, #144]	; (80003cc <main+0x130>)
 800033a:	2209      	movs	r2, #9
 800033c:	0019      	movs	r1, r3
 800033e:	f001 fa89 	bl	8001854 <USART_WRITE>


	while (1) {
//		gpio_toggle(PORTA, 5);
		I2C_MultiRead(i2c1.i2c, SLAVE_ADDR, 0x00, 7, &data);
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <main+0x138>)
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	003b      	movs	r3, r7
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2307      	movs	r3, #7
 800034c:	2200      	movs	r2, #0
 800034e:	2168      	movs	r1, #104	; 0x68
 8000350:	f001 fb20 	bl	8001994 <I2C_MultiRead>
		print("%d:%d:%d ,%d, %d, %d, %d\n\r", bcdToDec(data[2]), bcdToDec(data[1]), bcdToDec(data[0]), bcdToDec(data[3]), bcdToDec(data[4]), bcdToDec(data[5]), bcdToDec(data[6]));
 8000354:	003b      	movs	r3, r7
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	0018      	movs	r0, r3
 800035a:	f7ff ff73 	bl	8000244 <bcdToDec>
 800035e:	4680      	mov	r8, r0
 8000360:	003b      	movs	r3, r7
 8000362:	785b      	ldrb	r3, [r3, #1]
 8000364:	0018      	movs	r0, r3
 8000366:	f7ff ff6d 	bl	8000244 <bcdToDec>
 800036a:	4681      	mov	r9, r0
 800036c:	003b      	movs	r3, r7
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	0018      	movs	r0, r3
 8000372:	f7ff ff67 	bl	8000244 <bcdToDec>
 8000376:	4682      	mov	sl, r0
 8000378:	003b      	movs	r3, r7
 800037a:	78db      	ldrb	r3, [r3, #3]
 800037c:	0018      	movs	r0, r3
 800037e:	f7ff ff61 	bl	8000244 <bcdToDec>
 8000382:	0004      	movs	r4, r0
 8000384:	003b      	movs	r3, r7
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff ff5b 	bl	8000244 <bcdToDec>
 800038e:	0005      	movs	r5, r0
 8000390:	003b      	movs	r3, r7
 8000392:	795b      	ldrb	r3, [r3, #5]
 8000394:	0018      	movs	r0, r3
 8000396:	f7ff ff55 	bl	8000244 <bcdToDec>
 800039a:	0006      	movs	r6, r0
 800039c:	003b      	movs	r3, r7
 800039e:	799b      	ldrb	r3, [r3, #6]
 80003a0:	0018      	movs	r0, r3
 80003a2:	f7ff ff4f 	bl	8000244 <bcdToDec>
 80003a6:	0003      	movs	r3, r0
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <main+0x144>)
 80003aa:	9303      	str	r3, [sp, #12]
 80003ac:	9602      	str	r6, [sp, #8]
 80003ae:	9501      	str	r5, [sp, #4]
 80003b0:	9400      	str	r4, [sp, #0]
 80003b2:	4653      	mov	r3, sl
 80003b4:	464a      	mov	r2, r9
 80003b6:	4641      	mov	r1, r8
 80003b8:	f000 ffce 	bl	8001358 <print>

		HAL_Delay(500);
 80003bc:	23fa      	movs	r3, #250	; 0xfa
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f8dd 	bl	8000580 <HAL_Delay>
		I2C_MultiRead(i2c1.i2c, SLAVE_ADDR, 0x00, 7, &data);
 80003c6:	e7bc      	b.n	8000342 <main+0xa6>
 80003c8:	48000800 	.word	0x48000800
 80003cc:	40004c00 	.word	0x40004c00
 80003d0:	48000400 	.word	0x48000400
 80003d4:	200000cc 	.word	0x200000cc
 80003d8:	08002408 	.word	0x08002408
 80003dc:	080023e0 	.word	0x080023e0
 80003e0:	080023ec 	.word	0x080023ec

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <NMI_Handler+0x4>

080003ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <HardFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000408:	f000 f89e 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <_sbrk+0x5c>)
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <_sbrk+0x60>)
 8000420:	1ad3      	subs	r3, r2, r3
 8000422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000428:	4b13      	ldr	r3, [pc, #76]	; (8000478 <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <_sbrk+0x64>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <_sbrk+0x68>)
 8000434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <_sbrk+0x64>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	18d3      	adds	r3, r2, r3
 800043e:	693a      	ldr	r2, [r7, #16]
 8000440:	429a      	cmp	r2, r3
 8000442:	d207      	bcs.n	8000454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000444:	f001 fb0c 	bl	8001a60 <__errno>
 8000448:	0003      	movs	r3, r0
 800044a:	220c      	movs	r2, #12
 800044c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800044e:	2301      	movs	r3, #1
 8000450:	425b      	negs	r3, r3
 8000452:	e009      	b.n	8000468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <_sbrk+0x64>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <_sbrk+0x64>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	18d2      	adds	r2, r2, r3
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <_sbrk+0x64>)
 8000464:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000466:	68fb      	ldr	r3, [r7, #12]
}
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	b006      	add	sp, #24
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20004000 	.word	0x20004000
 8000474:	00000400 	.word	0x00000400
 8000478:	200000d4 	.word	0x200000d4
 800047c:	200001f0 	.word	0x200001f0

08000480 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000492:	490e      	ldr	r1, [pc, #56]	; (80004cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000494:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <LoopForever+0xe>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a8:	4c0b      	ldr	r4, [pc, #44]	; (80004d8 <LoopForever+0x16>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b6:	f7ff ffe3 	bl	8000480 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004ba:	f001 fad7 	bl	8001a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f7ff feed 	bl	800029c <main>

080004c2 <LoopForever>:

LoopForever:
    b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>
  ldr   r0, =_estack
 80004c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80004c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004cc:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80004d0:	080024bc 	.word	0x080024bc
  ldr r2, =_sbss
 80004d4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80004d8:	200001f0 	.word	0x200001f0

080004dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC1_COMP_IRQHandler>
	...

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_InitTick+0x5c>)
 80004ea:	681c      	ldr	r4, [r3, #0]
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <HAL_InitTick+0x60>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	0019      	movs	r1, r3
 80004f2:	23fa      	movs	r3, #250	; 0xfa
 80004f4:	0098      	lsls	r0, r3, #2
 80004f6:	f7ff fe19 	bl	800012c <__udivsi3>
 80004fa:	0003      	movs	r3, r0
 80004fc:	0019      	movs	r1, r3
 80004fe:	0020      	movs	r0, r4
 8000500:	f7ff fe14 	bl	800012c <__udivsi3>
 8000504:	0003      	movs	r3, r0
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f905 	bl	8000716 <HAL_SYSTICK_Config>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	e00f      	b.n	8000534 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d80b      	bhi.n	8000532 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	2301      	movs	r3, #1
 800051e:	425b      	negs	r3, r3
 8000520:	2200      	movs	r2, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f000 f8e2 	bl	80006ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_InitTick+0x64>)
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	b003      	add	sp, #12
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_IncTick+0x1c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	001a      	movs	r2, r3
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x20>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	18d2      	adds	r2, r2, r3
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_IncTick+0x20>)
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	20000008 	.word	0x20000008
 8000568:	200000d8 	.word	0x200000d8

0800056c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b02      	ldr	r3, [pc, #8]	; (800057c <HAL_GetTick+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	200000d8 	.word	0x200000d8

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000588:	f7ff fff0 	bl	800056c <HAL_GetTick>
 800058c:	0003      	movs	r3, r0
 800058e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	d005      	beq.n	80005a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_Delay+0x44>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	001a      	movs	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	f7ff ffe0 	bl	800056c <HAL_GetTick>
 80005ac:	0002      	movs	r2, r0
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f7      	bhi.n	80005a8 <HAL_Delay+0x28>
  {
  }
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	20000008 	.word	0x20000008

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	0002      	movs	r2, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b7f      	cmp	r3, #127	; 0x7f
 80005dc:	d828      	bhi.n	8000630 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005de:	4a2f      	ldr	r2, [pc, #188]	; (800069c <__NVIC_SetPriority+0xd4>)
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	33c0      	adds	r3, #192	; 0xc0
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	589b      	ldr	r3, [r3, r2]
 80005ee:	1dfa      	adds	r2, r7, #7
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	0011      	movs	r1, r2
 80005f4:	2203      	movs	r2, #3
 80005f6:	400a      	ands	r2, r1
 80005f8:	00d2      	lsls	r2, r2, #3
 80005fa:	21ff      	movs	r1, #255	; 0xff
 80005fc:	4091      	lsls	r1, r2
 80005fe:	000a      	movs	r2, r1
 8000600:	43d2      	mvns	r2, r2
 8000602:	401a      	ands	r2, r3
 8000604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	22ff      	movs	r2, #255	; 0xff
 800060c:	401a      	ands	r2, r3
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	0018      	movs	r0, r3
 8000614:	2303      	movs	r3, #3
 8000616:	4003      	ands	r3, r0
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061c:	481f      	ldr	r0, [pc, #124]	; (800069c <__NVIC_SetPriority+0xd4>)
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b25b      	sxtb	r3, r3
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	430a      	orrs	r2, r1
 8000628:	33c0      	adds	r3, #192	; 0xc0
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800062e:	e031      	b.n	8000694 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <__NVIC_SetPriority+0xd8>)
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	0019      	movs	r1, r3
 8000638:	230f      	movs	r3, #15
 800063a:	400b      	ands	r3, r1
 800063c:	3b08      	subs	r3, #8
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	3306      	adds	r3, #6
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	18d3      	adds	r3, r2, r3
 8000646:	3304      	adds	r3, #4
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	1dfa      	adds	r2, r7, #7
 800064c:	7812      	ldrb	r2, [r2, #0]
 800064e:	0011      	movs	r1, r2
 8000650:	2203      	movs	r2, #3
 8000652:	400a      	ands	r2, r1
 8000654:	00d2      	lsls	r2, r2, #3
 8000656:	21ff      	movs	r1, #255	; 0xff
 8000658:	4091      	lsls	r1, r2
 800065a:	000a      	movs	r2, r1
 800065c:	43d2      	mvns	r2, r2
 800065e:	401a      	ands	r2, r3
 8000660:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	019b      	lsls	r3, r3, #6
 8000666:	22ff      	movs	r2, #255	; 0xff
 8000668:	401a      	ands	r2, r3
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	0018      	movs	r0, r3
 8000670:	2303      	movs	r3, #3
 8000672:	4003      	ands	r3, r0
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <__NVIC_SetPriority+0xd8>)
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	001c      	movs	r4, r3
 8000680:	230f      	movs	r3, #15
 8000682:	4023      	ands	r3, r4
 8000684:	3b08      	subs	r3, #8
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	430a      	orrs	r2, r1
 800068a:	3306      	adds	r3, #6
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	18c3      	adds	r3, r0, r3
 8000690:	3304      	adds	r3, #4
 8000692:	601a      	str	r2, [r3, #0]
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b003      	add	sp, #12
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	045b      	lsls	r3, r3, #17
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d301      	bcc.n	80006bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b8:	2301      	movs	r3, #1
 80006ba:	e010      	b.n	80006de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <SysTick_Config+0x44>)
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	3a01      	subs	r2, #1
 80006c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c4:	2301      	movs	r3, #1
 80006c6:	425b      	negs	r3, r3
 80006c8:	2103      	movs	r1, #3
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff ff7c 	bl	80005c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SysTick_Config+0x44>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SysTick_Config+0x44>)
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006dc:	2300      	movs	r3, #0
}
 80006de:	0018      	movs	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	e000e010 	.word	0xe000e010

080006ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	210f      	movs	r1, #15
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	1c02      	adds	r2, r0, #0
 80006fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	187b      	adds	r3, r7, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ff5d 	bl	80005c8 <__NVIC_SetPriority>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ffbf 	bl	80006a4 <SysTick_Config>
 8000726:	0003      	movs	r3, r0
}
 8000728:	0018      	movs	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	b002      	add	sp, #8
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d102      	bne.n	8000744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	f000 fb76 	bl	8000e30 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2201      	movs	r2, #1
 800074a:	4013      	ands	r3, r2
 800074c:	d100      	bne.n	8000750 <HAL_RCC_OscConfig+0x20>
 800074e:	e08e      	b.n	800086e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000750:	4bc5      	ldr	r3, [pc, #788]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	220c      	movs	r2, #12
 8000756:	4013      	ands	r3, r2
 8000758:	2b04      	cmp	r3, #4
 800075a:	d00e      	beq.n	800077a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800075c:	4bc2      	ldr	r3, [pc, #776]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	220c      	movs	r2, #12
 8000762:	4013      	ands	r3, r2
 8000764:	2b08      	cmp	r3, #8
 8000766:	d117      	bne.n	8000798 <HAL_RCC_OscConfig+0x68>
 8000768:	4bbf      	ldr	r3, [pc, #764]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	23c0      	movs	r3, #192	; 0xc0
 800076e:	025b      	lsls	r3, r3, #9
 8000770:	401a      	ands	r2, r3
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	025b      	lsls	r3, r3, #9
 8000776:	429a      	cmp	r2, r3
 8000778:	d10e      	bne.n	8000798 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800077a:	4bbb      	ldr	r3, [pc, #748]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	029b      	lsls	r3, r3, #10
 8000782:	4013      	ands	r3, r2
 8000784:	d100      	bne.n	8000788 <HAL_RCC_OscConfig+0x58>
 8000786:	e071      	b.n	800086c <HAL_RCC_OscConfig+0x13c>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <HAL_RCC_OscConfig+0x62>
 8000790:	e06c      	b.n	800086c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	f000 fb4c 	bl	8000e30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d107      	bne.n	80007b0 <HAL_RCC_OscConfig+0x80>
 80007a0:	4bb1      	ldr	r3, [pc, #708]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4bb0      	ldr	r3, [pc, #704]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0249      	lsls	r1, r1, #9
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	e02f      	b.n	8000810 <HAL_RCC_OscConfig+0xe0>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10c      	bne.n	80007d2 <HAL_RCC_OscConfig+0xa2>
 80007b8:	4bab      	ldr	r3, [pc, #684]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4baa      	ldr	r3, [pc, #680]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007be:	49ab      	ldr	r1, [pc, #684]	; (8000a6c <HAL_RCC_OscConfig+0x33c>)
 80007c0:	400a      	ands	r2, r1
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	4ba8      	ldr	r3, [pc, #672]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4ba7      	ldr	r3, [pc, #668]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007ca:	49a9      	ldr	r1, [pc, #676]	; (8000a70 <HAL_RCC_OscConfig+0x340>)
 80007cc:	400a      	ands	r2, r1
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e01e      	b.n	8000810 <HAL_RCC_OscConfig+0xe0>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	2b05      	cmp	r3, #5
 80007d8:	d10e      	bne.n	80007f8 <HAL_RCC_OscConfig+0xc8>
 80007da:	4ba3      	ldr	r3, [pc, #652]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4ba2      	ldr	r3, [pc, #648]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	02c9      	lsls	r1, r1, #11
 80007e4:	430a      	orrs	r2, r1
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	4b9f      	ldr	r3, [pc, #636]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b9e      	ldr	r3, [pc, #632]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	0249      	lsls	r1, r1, #9
 80007f2:	430a      	orrs	r2, r1
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	e00b      	b.n	8000810 <HAL_RCC_OscConfig+0xe0>
 80007f8:	4b9b      	ldr	r3, [pc, #620]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b9a      	ldr	r3, [pc, #616]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80007fe:	499b      	ldr	r1, [pc, #620]	; (8000a6c <HAL_RCC_OscConfig+0x33c>)
 8000800:	400a      	ands	r2, r1
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	4b98      	ldr	r3, [pc, #608]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b97      	ldr	r3, [pc, #604]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800080a:	4999      	ldr	r1, [pc, #612]	; (8000a70 <HAL_RCC_OscConfig+0x340>)
 800080c:	400a      	ands	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d014      	beq.n	8000842 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000818:	f7ff fea8 	bl	800056c <HAL_GetTick>
 800081c:	0003      	movs	r3, r0
 800081e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000820:	e008      	b.n	8000834 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000822:	f7ff fea3 	bl	800056c <HAL_GetTick>
 8000826:	0002      	movs	r2, r0
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	2b64      	cmp	r3, #100	; 0x64
 800082e:	d901      	bls.n	8000834 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000830:	2303      	movs	r3, #3
 8000832:	e2fd      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000834:	4b8c      	ldr	r3, [pc, #560]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	d0f0      	beq.n	8000822 <HAL_RCC_OscConfig+0xf2>
 8000840:	e015      	b.n	800086e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000842:	f7ff fe93 	bl	800056c <HAL_GetTick>
 8000846:	0003      	movs	r3, r0
 8000848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800084a:	e008      	b.n	800085e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800084c:	f7ff fe8e 	bl	800056c <HAL_GetTick>
 8000850:	0002      	movs	r2, r0
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	2b64      	cmp	r3, #100	; 0x64
 8000858:	d901      	bls.n	800085e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800085a:	2303      	movs	r3, #3
 800085c:	e2e8      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800085e:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	029b      	lsls	r3, r3, #10
 8000866:	4013      	ands	r3, r2
 8000868:	d1f0      	bne.n	800084c <HAL_RCC_OscConfig+0x11c>
 800086a:	e000      	b.n	800086e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800086c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2202      	movs	r2, #2
 8000874:	4013      	ands	r3, r2
 8000876:	d100      	bne.n	800087a <HAL_RCC_OscConfig+0x14a>
 8000878:	e06c      	b.n	8000954 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800087a:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	220c      	movs	r2, #12
 8000880:	4013      	ands	r3, r2
 8000882:	d00e      	beq.n	80008a2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000884:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	220c      	movs	r2, #12
 800088a:	4013      	ands	r3, r2
 800088c:	2b08      	cmp	r3, #8
 800088e:	d11f      	bne.n	80008d0 <HAL_RCC_OscConfig+0x1a0>
 8000890:	4b75      	ldr	r3, [pc, #468]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	23c0      	movs	r3, #192	; 0xc0
 8000896:	025b      	lsls	r3, r3, #9
 8000898:	401a      	ands	r2, r3
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	429a      	cmp	r2, r3
 80008a0:	d116      	bne.n	80008d0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a2:	4b71      	ldr	r3, [pc, #452]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2202      	movs	r2, #2
 80008a8:	4013      	ands	r3, r2
 80008aa:	d005      	beq.n	80008b8 <HAL_RCC_OscConfig+0x188>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d001      	beq.n	80008b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e2bb      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008b8:	4b6b      	ldr	r3, [pc, #428]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	22f8      	movs	r2, #248	; 0xf8
 80008be:	4393      	bics	r3, r2
 80008c0:	0019      	movs	r1, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	00da      	lsls	r2, r3, #3
 80008c8:	4b67      	ldr	r3, [pc, #412]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80008ca:	430a      	orrs	r2, r1
 80008cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ce:	e041      	b.n	8000954 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d024      	beq.n	8000922 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008d8:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e4:	f7ff fe42 	bl	800056c <HAL_GetTick>
 80008e8:	0003      	movs	r3, r0
 80008ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	e008      	b.n	8000900 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ee:	f7ff fe3d 	bl	800056c <HAL_GetTick>
 80008f2:	0002      	movs	r2, r0
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d901      	bls.n	8000900 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80008fc:	2303      	movs	r3, #3
 80008fe:	e297      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	4b59      	ldr	r3, [pc, #356]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2202      	movs	r2, #2
 8000906:	4013      	ands	r3, r2
 8000908:	d0f1      	beq.n	80008ee <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090a:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	22f8      	movs	r2, #248	; 0xf8
 8000910:	4393      	bics	r3, r2
 8000912:	0019      	movs	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	00da      	lsls	r2, r3, #3
 800091a:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800091c:	430a      	orrs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e018      	b.n	8000954 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000922:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000928:	2101      	movs	r1, #1
 800092a:	438a      	bics	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092e:	f7ff fe1d 	bl	800056c <HAL_GetTick>
 8000932:	0003      	movs	r3, r0
 8000934:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fe18 	bl	800056c <HAL_GetTick>
 800093c:	0002      	movs	r2, r0
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e272      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094a:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	d1f1      	bne.n	8000938 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2208      	movs	r2, #8
 800095a:	4013      	ands	r3, r2
 800095c:	d036      	beq.n	80009cc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d019      	beq.n	800099a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000972:	f7ff fdfb 	bl	800056c <HAL_GetTick>
 8000976:	0003      	movs	r3, r0
 8000978:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800097a:	e008      	b.n	800098e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097c:	f7ff fdf6 	bl	800056c <HAL_GetTick>
 8000980:	0002      	movs	r2, r0
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b02      	cmp	r3, #2
 8000988:	d901      	bls.n	800098e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	e250      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	2202      	movs	r2, #2
 8000994:	4013      	ands	r3, r2
 8000996:	d0f1      	beq.n	800097c <HAL_RCC_OscConfig+0x24c>
 8000998:	e018      	b.n	80009cc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 800099c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	438a      	bics	r2, r1
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a6:	f7ff fde1 	bl	800056c <HAL_GetTick>
 80009aa:	0003      	movs	r3, r0
 80009ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ae:	e008      	b.n	80009c2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b0:	f7ff fddc 	bl	800056c <HAL_GetTick>
 80009b4:	0002      	movs	r2, r0
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d901      	bls.n	80009c2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e236      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	2202      	movs	r2, #2
 80009c8:	4013      	ands	r3, r2
 80009ca:	d1f1      	bne.n	80009b0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2204      	movs	r2, #4
 80009d2:	4013      	ands	r3, r2
 80009d4:	d100      	bne.n	80009d8 <HAL_RCC_OscConfig+0x2a8>
 80009d6:	e0b5      	b.n	8000b44 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009d8:	201f      	movs	r0, #31
 80009da:	183b      	adds	r3, r7, r0
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	4013      	ands	r3, r2
 80009ea:	d110      	bne.n	8000a0e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009ee:	69da      	ldr	r2, [r3, #28]
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	0549      	lsls	r1, r1, #21
 80009f6:	430a      	orrs	r2, r1
 80009f8:	61da      	str	r2, [r3, #28]
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 80009fc:	69da      	ldr	r2, [r3, #28]
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	055b      	lsls	r3, r3, #21
 8000a02:	4013      	ands	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a08:	183b      	adds	r3, r7, r0
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_RCC_OscConfig+0x344>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4013      	ands	r3, r2
 8000a18:	d11a      	bne.n	8000a50 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_RCC_OscConfig+0x344>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_RCC_OscConfig+0x344>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0049      	lsls	r1, r1, #1
 8000a24:	430a      	orrs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a28:	f7ff fda0 	bl	800056c <HAL_GetTick>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	e008      	b.n	8000a44 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a32:	f7ff fd9b 	bl	800056c <HAL_GetTick>
 8000a36:	0002      	movs	r2, r0
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b64      	cmp	r3, #100	; 0x64
 8000a3e:	d901      	bls.n	8000a44 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000a40:	2303      	movs	r3, #3
 8000a42:	e1f5      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_RCC_OscConfig+0x344>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d0f0      	beq.n	8000a32 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10f      	bne.n	8000a78 <HAL_RCC_OscConfig+0x348>
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000a5a:	6a1a      	ldr	r2, [r3, #32]
 8000a5c:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <HAL_RCC_OscConfig+0x338>)
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	621a      	str	r2, [r3, #32]
 8000a64:	e036      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3a4>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	fffeffff 	.word	0xfffeffff
 8000a70:	fffbffff 	.word	0xfffbffff
 8000a74:	40007000 	.word	0x40007000
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10c      	bne.n	8000a9a <HAL_RCC_OscConfig+0x36a>
 8000a80:	4bca      	ldr	r3, [pc, #808]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000a82:	6a1a      	ldr	r2, [r3, #32]
 8000a84:	4bc9      	ldr	r3, [pc, #804]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	438a      	bics	r2, r1
 8000a8a:	621a      	str	r2, [r3, #32]
 8000a8c:	4bc7      	ldr	r3, [pc, #796]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000a8e:	6a1a      	ldr	r2, [r3, #32]
 8000a90:	4bc6      	ldr	r3, [pc, #792]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000a92:	2104      	movs	r1, #4
 8000a94:	438a      	bics	r2, r1
 8000a96:	621a      	str	r2, [r3, #32]
 8000a98:	e01c      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3a4>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b05      	cmp	r3, #5
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x38c>
 8000aa2:	4bc2      	ldr	r3, [pc, #776]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000aa4:	6a1a      	ldr	r2, [r3, #32]
 8000aa6:	4bc1      	ldr	r3, [pc, #772]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	621a      	str	r2, [r3, #32]
 8000aae:	4bbf      	ldr	r3, [pc, #764]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ab0:	6a1a      	ldr	r2, [r3, #32]
 8000ab2:	4bbe      	ldr	r3, [pc, #760]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	621a      	str	r2, [r3, #32]
 8000aba:	e00b      	b.n	8000ad4 <HAL_RCC_OscConfig+0x3a4>
 8000abc:	4bbb      	ldr	r3, [pc, #748]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	4bba      	ldr	r3, [pc, #744]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	438a      	bics	r2, r1
 8000ac6:	621a      	str	r2, [r3, #32]
 8000ac8:	4bb8      	ldr	r3, [pc, #736]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000aca:	6a1a      	ldr	r2, [r3, #32]
 8000acc:	4bb7      	ldr	r3, [pc, #732]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d014      	beq.n	8000b06 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000adc:	f7ff fd46 	bl	800056c <HAL_GetTick>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	e009      	b.n	8000afa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae6:	f7ff fd41 	bl	800056c <HAL_GetTick>
 8000aea:	0002      	movs	r2, r0
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	4aaf      	ldr	r2, [pc, #700]	; (8000db0 <HAL_RCC_OscConfig+0x680>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d901      	bls.n	8000afa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e19a      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000afa:	4bac      	ldr	r3, [pc, #688]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	2202      	movs	r2, #2
 8000b00:	4013      	ands	r3, r2
 8000b02:	d0f0      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x3b6>
 8000b04:	e013      	b.n	8000b2e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fd31 	bl	800056c <HAL_GetTick>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b0e:	e009      	b.n	8000b24 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b10:	f7ff fd2c 	bl	800056c <HAL_GetTick>
 8000b14:	0002      	movs	r2, r0
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	4aa5      	ldr	r2, [pc, #660]	; (8000db0 <HAL_RCC_OscConfig+0x680>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e185      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b24:	4ba1      	ldr	r3, [pc, #644]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	d1f0      	bne.n	8000b10 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b2e:	231f      	movs	r3, #31
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d105      	bne.n	8000b44 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b38:	4b9c      	ldr	r3, [pc, #624]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b3a:	69da      	ldr	r2, [r3, #28]
 8000b3c:	4b9b      	ldr	r3, [pc, #620]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b3e:	499d      	ldr	r1, [pc, #628]	; (8000db4 <HAL_RCC_OscConfig+0x684>)
 8000b40:	400a      	ands	r2, r1
 8000b42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2210      	movs	r2, #16
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	d063      	beq.n	8000c16 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d12a      	bne.n	8000bac <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b56:	4b95      	ldr	r3, [pc, #596]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5a:	4b94      	ldr	r3, [pc, #592]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000b62:	4b92      	ldr	r3, [pc, #584]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b66:	4b91      	ldr	r3, [pc, #580]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6e:	f7ff fcfd 	bl	800056c <HAL_GetTick>
 8000b72:	0003      	movs	r3, r0
 8000b74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b76:	e008      	b.n	8000b8a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b78:	f7ff fcf8 	bl	800056c <HAL_GetTick>
 8000b7c:	0002      	movs	r2, r0
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d901      	bls.n	8000b8a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e152      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b8a:	4b88      	ldr	r3, [pc, #544]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2202      	movs	r2, #2
 8000b90:	4013      	ands	r3, r2
 8000b92:	d0f1      	beq.n	8000b78 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b94:	4b85      	ldr	r3, [pc, #532]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b98:	22f8      	movs	r2, #248	; 0xf8
 8000b9a:	4393      	bics	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	00da      	lsls	r2, r3, #3
 8000ba4:	4b81      	ldr	r3, [pc, #516]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8000baa:	e034      	b.n	8000c16 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	3305      	adds	r3, #5
 8000bb2:	d111      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000bb4:	4b7d      	ldr	r3, [pc, #500]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb8:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bba:	2104      	movs	r1, #4
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bc0:	4b7a      	ldr	r3, [pc, #488]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	22f8      	movs	r2, #248	; 0xf8
 8000bc6:	4393      	bics	r3, r2
 8000bc8:	0019      	movs	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	00da      	lsls	r2, r3, #3
 8000bd0:	4b76      	ldr	r3, [pc, #472]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	e01e      	b.n	8000c16 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bd8:	4b74      	ldr	r3, [pc, #464]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bde:	2104      	movs	r1, #4
 8000be0:	430a      	orrs	r2, r1
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000be4:	4b71      	ldr	r3, [pc, #452]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be8:	4b70      	ldr	r3, [pc, #448]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	438a      	bics	r2, r1
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bf0:	f7ff fcbc 	bl	800056c <HAL_GetTick>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000bfa:	f7ff fcb7 	bl	800056c <HAL_GetTick>
 8000bfe:	0002      	movs	r2, r0
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e111      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c0c:	4b67      	ldr	r3, [pc, #412]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	d1f1      	bne.n	8000bfa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d05c      	beq.n	8000cda <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c20:	4b62      	ldr	r3, [pc, #392]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	220c      	movs	r2, #12
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b0c      	cmp	r3, #12
 8000c2a:	d00e      	beq.n	8000c4a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000c2c:	4b5f      	ldr	r3, [pc, #380]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	220c      	movs	r2, #12
 8000c32:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c34:	2b08      	cmp	r3, #8
 8000c36:	d114      	bne.n	8000c62 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000c38:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	23c0      	movs	r3, #192	; 0xc0
 8000c3e:	025b      	lsls	r3, r3, #9
 8000c40:	401a      	ands	r2, r3
 8000c42:	23c0      	movs	r3, #192	; 0xc0
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d10b      	bne.n	8000c62 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	025b      	lsls	r3, r3, #9
 8000c52:	4013      	ands	r3, r2
 8000c54:	d040      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x5a8>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a1b      	ldr	r3, [r3, #32]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d03c      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0e6      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d01b      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000c6a:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c6e:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0249      	lsls	r1, r1, #9
 8000c74:	430a      	orrs	r2, r1
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c78:	f7ff fc78 	bl	800056c <HAL_GetTick>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c82:	f7ff fc73 	bl	800056c <HAL_GetTick>
 8000c86:	0002      	movs	r2, r0
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e0cd      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c94:	4b45      	ldr	r3, [pc, #276]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	025b      	lsls	r3, r3, #9
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x552>
 8000ca0:	e01b      	b.n	8000cda <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8000ca2:	4b42      	ldr	r3, [pc, #264]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca6:	4b41      	ldr	r3, [pc, #260]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ca8:	4943      	ldr	r1, [pc, #268]	; (8000db8 <HAL_RCC_OscConfig+0x688>)
 8000caa:	400a      	ands	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cae:	f7ff fc5d 	bl	800056c <HAL_GetTick>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000cb8:	f7ff fc58 	bl	800056c <HAL_GetTick>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e0b2      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x588>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000cd8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x5b4>
 8000ce2:	e0a4      	b.n	8000e2e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	220c      	movs	r2, #12
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b08      	cmp	r3, #8
 8000cee:	d100      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5c2>
 8000cf0:	e078      	b.n	8000de4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d14c      	bne.n	8000d94 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d00:	492e      	ldr	r1, [pc, #184]	; (8000dbc <HAL_RCC_OscConfig+0x68c>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc31 	bl	800056c <HAL_GetTick>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d10:	f7ff fc2c 	bl	800056c <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e086      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	049b      	lsls	r3, r3, #18
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d32:	220f      	movs	r2, #15
 8000d34:	4393      	bics	r3, r2
 8000d36:	0019      	movs	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_RCC_OscConfig+0x690>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d54:	431a      	orrs	r2, r3
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	0449      	lsls	r1, r1, #17
 8000d66:	430a      	orrs	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fbff 	bl	800056c <HAL_GetTick>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d74:	f7ff fbfa 	bl	800056c <HAL_GetTick>
 8000d78:	0002      	movs	r2, r0
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e054      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	049b      	lsls	r3, r3, #18
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0x644>
 8000d92:	e04c      	b.n	8000e2e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_RCC_OscConfig+0x67c>)
 8000d9a:	4908      	ldr	r1, [pc, #32]	; (8000dbc <HAL_RCC_OscConfig+0x68c>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fbe4 	bl	800056c <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x6a6>
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40021000 	.word	0x40021000
 8000db0:	00001388 	.word	0x00001388
 8000db4:	efffffff 	.word	0xefffffff
 8000db8:	fffeffff 	.word	0xfffeffff
 8000dbc:	feffffff 	.word	0xfeffffff
 8000dc0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fbd2 	bl	800056c <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e02c      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_RCC_OscConfig+0x708>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	049b      	lsls	r3, r3, #18
 8000dde:	4013      	ands	r3, r2
 8000de0:	d1f0      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x694>
 8000de2:	e024      	b.n	8000e2e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e01f      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_RCC_OscConfig+0x708>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_RCC_OscConfig+0x708>)
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	23c0      	movs	r3, #192	; 0xc0
 8000e00:	025b      	lsls	r3, r3, #9
 8000e02:	401a      	ands	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d10e      	bne.n	8000e2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	220f      	movs	r2, #15
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d107      	bne.n	8000e2a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	23f0      	movs	r3, #240	; 0xf0
 8000e1e:	039b      	lsls	r3, r3, #14
 8000e20:	401a      	ands	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d001      	beq.n	8000e2e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b008      	add	sp, #32
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0bf      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e50:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4013      	ands	r3, r2
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d911      	bls.n	8000e82 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4393      	bics	r3, r2
 8000e66:	0019      	movs	r1, r3
 8000e68:	4b5b      	ldr	r3, [pc, #364]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e70:	4b59      	ldr	r3, [pc, #356]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2201      	movs	r2, #1
 8000e76:	4013      	ands	r3, r2
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e0a6      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d015      	beq.n	8000eb8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2204      	movs	r2, #4
 8000e92:	4013      	ands	r3, r2
 8000e94:	d006      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000e96:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	4b50      	ldr	r3, [pc, #320]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000e9c:	21e0      	movs	r1, #224	; 0xe0
 8000e9e:	00c9      	lsls	r1, r1, #3
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	22f0      	movs	r2, #240	; 0xf0
 8000eaa:	4393      	bics	r3, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d04c      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d120      	bne.n	8000f18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e07a      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d107      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	049b      	lsls	r3, r3, #18
 8000eea:	4013      	ands	r3, r2
 8000eec:	d114      	bne.n	8000f18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e06e      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d107      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	025b      	lsls	r3, r3, #9
 8000f02:	4013      	ands	r3, r2
 8000f04:	d108      	bne.n	8000f18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e062      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	d101      	bne.n	8000f18 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e05b      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4393      	bics	r3, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f2c:	f7ff fb1e 	bl	800056c <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f34:	e009      	b.n	8000f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f36:	f7ff fb19 	bl	800056c <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <HAL_RCC_ClockConfig+0x1a4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e042      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f4a:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	220c      	movs	r2, #12
 8000f50:	401a      	ands	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d1ec      	bne.n	8000f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4013      	ands	r3, r2
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d211      	bcs.n	8000f8e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4393      	bics	r3, r2
 8000f72:	0019      	movs	r1, r3
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_RCC_ClockConfig+0x19c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2201      	movs	r2, #1
 8000f82:	4013      	ands	r3, r2
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e020      	b.n	8000fd0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d009      	beq.n	8000fac <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_RCC_ClockConfig+0x1a8>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fac:	f000 f820 	bl	8000ff0 <HAL_RCC_GetSysClockFreq>
 8000fb0:	0001      	movs	r1, r0
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_RCC_ClockConfig+0x1a0>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	220f      	movs	r2, #15
 8000fba:	4013      	ands	r3, r2
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_RCC_ClockConfig+0x1ac>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	000a      	movs	r2, r1
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_RCC_ClockConfig+0x1b0>)
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fa89 	bl	80004e0 <HAL_InitTick>
  
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40022000 	.word	0x40022000
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	00001388 	.word	0x00001388
 8000fe4:	fffff8ff 	.word	0xfffff8ff
 8000fe8:	08002438 	.word	0x08002438
 8000fec:	20000000 	.word	0x20000000

08000ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b08f      	sub	sp, #60	; 0x3c
 8000ff4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	4a38      	ldr	r2, [pc, #224]	; (80010dc <HAL_RCC_GetSysClockFreq+0xec>)
 8000ffc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ffe:	c313      	stmia	r3!, {r0, r1, r4}
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001008:	ca13      	ldmia	r2!, {r0, r1, r4}
 800100a:	c313      	stmia	r3!, {r0, r1, r4}
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102c:	220c      	movs	r2, #12
 800102e:	4013      	ands	r3, r2
 8001030:	2b0c      	cmp	r3, #12
 8001032:	d047      	beq.n	80010c4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001034:	d849      	bhi.n	80010ca <HAL_RCC_GetSysClockFreq+0xda>
 8001036:	2b04      	cmp	r3, #4
 8001038:	d002      	beq.n	8001040 <HAL_RCC_GetSysClockFreq+0x50>
 800103a:	2b08      	cmp	r3, #8
 800103c:	d003      	beq.n	8001046 <HAL_RCC_GetSysClockFreq+0x56>
 800103e:	e044      	b.n	80010ca <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001044:	e044      	b.n	80010d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	0c9b      	lsrs	r3, r3, #18
 800104a:	220f      	movs	r2, #15
 800104c:	4013      	ands	r3, r2
 800104e:	2214      	movs	r2, #20
 8001050:	18ba      	adds	r2, r7, r2
 8001052:	5cd3      	ldrb	r3, [r2, r3]
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	220f      	movs	r2, #15
 800105c:	4013      	ands	r3, r2
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	401a      	ands	r2, r3
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	429a      	cmp	r2, r3
 8001072:	d109      	bne.n	8001088 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001076:	481c      	ldr	r0, [pc, #112]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001078:	f7ff f858 	bl	800012c <__udivsi3>
 800107c:	0003      	movs	r3, r0
 800107e:	001a      	movs	r2, r3
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	4353      	muls	r3, r2
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
 8001086:	e01a      	b.n	80010be <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	025b      	lsls	r3, r3, #9
 800108e:	401a      	ands	r2, r3
 8001090:	23c0      	movs	r3, #192	; 0xc0
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	429a      	cmp	r2, r3
 8001096:	d109      	bne.n	80010ac <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800109a:	4814      	ldr	r0, [pc, #80]	; (80010ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800109c:	f7ff f846 	bl	800012c <__udivsi3>
 80010a0:	0003      	movs	r3, r0
 80010a2:	001a      	movs	r2, r3
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	4353      	muls	r3, r2
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
 80010aa:	e008      	b.n	80010be <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80010ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010b0:	f7ff f83c 	bl	800012c <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	001a      	movs	r2, r3
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	4353      	muls	r3, r2
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010c2:	e005      	b.n	80010d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_RCC_GetSysClockFreq+0xfc>)
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010c8:	e002      	b.n	80010d0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010ce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80010d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b00f      	add	sp, #60	; 0x3c
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	08002418 	.word	0x08002418
 80010e0:	08002428 	.word	0x08002428
 80010e4:	40021000 	.word	0x40021000
 80010e8:	007a1200 	.word	0x007a1200
 80010ec:	02dc6c00 	.word	0x02dc6c00

080010f0 <gpio_clk_en>:
		uint16_t out_max) {
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
}

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	2390      	movs	r3, #144	; 0x90
 80010fc:	05db      	lsls	r3, r3, #23
 80010fe:	429a      	cmp	r2, r3
 8001100:	d107      	bne.n	8001112 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <gpio_clk_en+0x80>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <gpio_clk_en+0x80>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	0289      	lsls	r1, r1, #10
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8001110:	e02a      	b.n	8001168 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <gpio_clk_en+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d107      	bne.n	800112a <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <gpio_clk_en+0x80>)
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <gpio_clk_en+0x80>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	02c9      	lsls	r1, r1, #11
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
}
 8001128:	e01e      	b.n	8001168 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <gpio_clk_en+0x88>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d107      	bne.n	8001142 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <gpio_clk_en+0x80>)
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <gpio_clk_en+0x80>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	0309      	lsls	r1, r1, #12
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]
}
 8001140:	e012      	b.n	8001168 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <gpio_clk_en+0x8c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d107      	bne.n	800115a <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <gpio_clk_en+0x80>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <gpio_clk_en+0x80>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0349      	lsls	r1, r1, #13
 8001154:	430a      	orrs	r2, r1
 8001156:	615a      	str	r2, [r3, #20]
}
 8001158:	e006      	b.n	8001168 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <gpio_clk_en+0x80>)
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <gpio_clk_en+0x80>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	03c9      	lsls	r1, r1, #15
 8001164:	430a      	orrs	r2, r1
 8001166:	615a      	str	r2, [r3, #20]
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	48000400 	.word	0x48000400
 8001178:	48000800 	.word	0x48000800
 800117c:	48000c00 	.word	0x48000c00

08001180 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d11c      	bne.n	80011ce <gpio_config+0x4e>
		gpio_clk_en(port);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ffaa 	bl	80010f0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	68b9      	ldr	r1, [r7, #8]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f85a 	bl	800125c <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 f86c 	bl	800128c <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 f87e 	bl	80012bc <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f890 	bl	80012ec <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 80011cc:	e041      	b.n	8001252 <gpio_config+0xd2>
	} else if (pinMode == INPUT_MODE) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d110      	bne.n	80011f6 <gpio_config+0x76>
		gpio_clk_en(port);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff8a 	bl	80010f0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f83a 	bl	800125c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 f864 	bl	80012bc <gpio_PUPD>
}
 80011f4:	e02d      	b.n	8001252 <gpio_config+0xd2>
	} else if (pinMode == ALT_MODE) {
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d116      	bne.n	800122a <gpio_config+0xaa>
		gpio_clk_en(port);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff76 	bl	80010f0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f826 	bl	800125c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f850 	bl	80012bc <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f862 	bl	80012ec <gpio_PHPL_OD>
}
 8001228:	e013      	b.n	8001252 <gpio_config+0xd2>
	} else if (pinMode == ANALOG_MODE) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d110      	bne.n	8001252 <gpio_config+0xd2>
		gpio_clk_en(port);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0018      	movs	r0, r3
 8001234:	f7ff ff5c 	bl	80010f0 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	0018      	movs	r0, r3
 8001240:	f000 f80c 	bl	800125c <gpio_moder>
		adc_chsel(port, pinNumber);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	b29a      	uxth	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f000 f8c1 	bl	80013d4 <adc_chsel>
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <gpio_moder+0x2c>)
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	0089      	lsls	r1, r1, #2
 8001272:	58cb      	ldr	r3, [r1, r3]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4099      	lsls	r1, r3
 8001278:	000b      	movs	r3, r1
 800127a:	431a      	orrs	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000000c 	.word	0x2000000c

0800128c <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <gpio_speed+0x2c>)
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	0089      	lsls	r1, r1, #2
 80012a2:	58cb      	ldr	r3, [r1, r3]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4099      	lsls	r1, r3
 80012a8:	000b      	movs	r3, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000000c 	.word	0x2000000c

080012bc <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <gpio_PUPD+0x2c>)
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	0089      	lsls	r1, r1, #2
 80012d2:	58cb      	ldr	r3, [r1, r3]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4099      	lsls	r1, r3
 80012d8:	000b      	movs	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	60da      	str	r2, [r3, #12]
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b004      	add	sp, #16
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000000c 	.word	0x2000000c

080012ec <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	4099      	lsls	r1, r3
 8001302:	000b      	movs	r3, r1
 8001304:	431a      	orrs	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	605a      	str	r2, [r3, #4]
}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}

08001312 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b07      	cmp	r3, #7
 8001322:	d80a      	bhi.n	800133a <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4099      	lsls	r1, r3
 8001330:	000b      	movs	r3, r1
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8001338:	e00a      	b.n	8001350 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b08      	subs	r3, #8
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4099      	lsls	r1, r3
 8001348:	000b      	movs	r3, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}

08001358 <print>:

//*******************************************************************************************//

//************************** UART SERIAL PRINTING *******************************************//

void print(const char *fmt, ...) {
 8001358:	b40f      	push	{r0, r1, r2, r3}
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001360:	2314      	movs	r3, #20
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	0049      	lsls	r1, r1, #1
 800136e:	480c      	ldr	r0, [pc, #48]	; (80013a0 <print+0x48>)
 8001370:	f000 fbd4 	bl	8001b1c <vsniprintf>
	va_end(args);

	uint16_t len = strlen(buffer);
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <print+0x48>)
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe fec6 	bl	8000108 <strlen>
 800137c:	0002      	movs	r2, r0
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	801a      	strh	r2, [r3, #0]
//	for (uint8_t i = 0; i < len; i++) {
//		USART2->TDR = buffer[i];
//		while (!(USART2->ISR & USART_ISR_TXE))
//			;
//	}
	USART_WRITE(USART4, buffer, len);
 8001382:	1dbb      	adds	r3, r7, #6
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <print+0x48>)
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <print+0x4c>)
 800138a:	0019      	movs	r1, r3
 800138c:	f000 fa62 	bl	8001854 <USART_WRITE>

}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bc80      	pop	{r7}
 8001398:	bc08      	pop	{r3}
 800139a:	b004      	add	sp, #16
 800139c:	4718      	bx	r3
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	200000e0 	.word	0x200000e0
 80013a4:	40004c00 	.word	0x40004c00

080013a8 <TIM6_DAC_IRQHandler>:
	return ticks;
}
void ticks_reset() {
	ticks = 0;
}
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	ticks++;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <TIM6_DAC_IRQHandler+0x24>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <TIM6_DAC_IRQHandler+0x24>)
 80013b6:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <TIM6_DAC_IRQHandler+0x28>)
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <TIM6_DAC_IRQHandler+0x28>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	200000dc 	.word	0x200000dc
 80013d0:	40001000 	.word	0x40001000

080013d4 <adc_chsel>:
	while ((ADC1->CR & ADC_CR_ADEN) != 0) /* (4) */
	{
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	000a      	movs	r2, r1
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	2390      	movs	r3, #144	; 0x90
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d133      	bne.n	8001454 <adc_chsel+0x80>
		switch (pin) {
 80013ec:	1cbb      	adds	r3, r7, #2
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	d900      	bls.n	80013f6 <adc_chsel+0x22>
 80013f4:	e086      	b.n	8001504 <adc_chsel+0x130>
 80013f6:	009a      	lsls	r2, r3, #2
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <adc_chsel+0x144>)
 80013fa:	18d3      	adds	r3, r2, r3
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <adc_chsel+0x148>)
 8001402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001404:	4b45      	ldr	r3, [pc, #276]	; (800151c <adc_chsel+0x148>)
 8001406:	2101      	movs	r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800140c:	e07f      	b.n	800150e <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 800140e:	4b43      	ldr	r3, [pc, #268]	; (800151c <adc_chsel+0x148>)
 8001410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <adc_chsel+0x148>)
 8001414:	2102      	movs	r1, #2
 8001416:	430a      	orrs	r2, r1
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800141a:	e078      	b.n	800150e <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <adc_chsel+0x148>)
 800141e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001420:	4b3e      	ldr	r3, [pc, #248]	; (800151c <adc_chsel+0x148>)
 8001422:	2110      	movs	r1, #16
 8001424:	430a      	orrs	r2, r1
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001428:	e071      	b.n	800150e <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <adc_chsel+0x148>)
 800142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <adc_chsel+0x148>)
 8001430:	2120      	movs	r1, #32
 8001432:	430a      	orrs	r2, r1
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001436:	e06a      	b.n	800150e <adc_chsel+0x13a>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <adc_chsel+0x148>)
 800143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143c:	4b37      	ldr	r3, [pc, #220]	; (800151c <adc_chsel+0x148>)
 800143e:	2140      	movs	r1, #64	; 0x40
 8001440:	430a      	orrs	r2, r1
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001444:	e063      	b.n	800150e <adc_chsel+0x13a>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <adc_chsel+0x148>)
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <adc_chsel+0x148>)
 800144c:	2180      	movs	r1, #128	; 0x80
 800144e:	430a      	orrs	r2, r1
 8001450:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001452:	e05c      	b.n	800150e <adc_chsel+0x13a>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <adc_chsel+0x14c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d116      	bne.n	800148a <adc_chsel+0xb6>
		switch (pin) {
 800145c:	1cbb      	adds	r3, r7, #2
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <adc_chsel+0x96>
 8001464:	2b01      	cmp	r3, #1
 8001466:	d008      	beq.n	800147a <adc_chsel+0xa6>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8001468:	e051      	b.n	800150e <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <adc_chsel+0x148>)
 800146c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <adc_chsel+0x148>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0049      	lsls	r1, r1, #1
 8001474:	430a      	orrs	r2, r1
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001478:	e049      	b.n	800150e <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <adc_chsel+0x148>)
 800147c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <adc_chsel+0x148>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0089      	lsls	r1, r1, #2
 8001484:	430a      	orrs	r2, r1
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001488:	e041      	b.n	800150e <adc_chsel+0x13a>
		}
	} else if (port == GPIOC) {
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a25      	ldr	r2, [pc, #148]	; (8001524 <adc_chsel+0x150>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13a      	bne.n	8001508 <adc_chsel+0x134>
		switch (pin) {
 8001492:	1cbb      	adds	r3, r7, #2
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d838      	bhi.n	800150c <adc_chsel+0x138>
 800149a:	009a      	lsls	r2, r3, #2
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <adc_chsel+0x154>)
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <adc_chsel+0x148>)
 80014a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <adc_chsel+0x148>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	00c9      	lsls	r1, r1, #3
 80014ae:	430a      	orrs	r2, r1
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80014b2:	e02c      	b.n	800150e <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <adc_chsel+0x148>)
 80014b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <adc_chsel+0x148>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	0109      	lsls	r1, r1, #4
 80014be:	430a      	orrs	r2, r1
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80014c2:	e024      	b.n	800150e <adc_chsel+0x13a>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <adc_chsel+0x148>)
 80014c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <adc_chsel+0x148>)
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0149      	lsls	r1, r1, #5
 80014ce:	430a      	orrs	r2, r1
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80014d2:	e01c      	b.n	800150e <adc_chsel+0x13a>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <adc_chsel+0x148>)
 80014d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <adc_chsel+0x148>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0189      	lsls	r1, r1, #6
 80014de:	430a      	orrs	r2, r1
 80014e0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80014e2:	e014      	b.n	800150e <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <adc_chsel+0x148>)
 80014e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <adc_chsel+0x148>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	01c9      	lsls	r1, r1, #7
 80014ee:	430a      	orrs	r2, r1
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80014f2:	e00c      	b.n	800150e <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <adc_chsel+0x148>)
 80014f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <adc_chsel+0x148>)
 80014fa:	2180      	movs	r1, #128	; 0x80
 80014fc:	0209      	lsls	r1, r1, #8
 80014fe:	430a      	orrs	r2, r1
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8001502:	e004      	b.n	800150e <adc_chsel+0x13a>
			break;
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	e002      	b.n	800150e <adc_chsel+0x13a>
		default:
			break;
		}
	}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	e000      	b.n	800150e <adc_chsel+0x13a>
			break;
 800150c:	46c0      	nop			; (mov r8, r8)
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	08002448 	.word	0x08002448
 800151c:	40012400 	.word	0x40012400
 8001520:	48000400 	.word	0x48000400
 8001524:	48000800 	.word	0x48000800
 8001528:	08002468 	.word	0x08002468

0800152c <USART_INIT>:

//*******************************| USART FUNCTIONS |*****************************//

void USART_INIT(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]

	USART_CLK_EN(usart);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0018      	movs	r0, r3
 800153e:	f000 f819 	bl	8001574 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8001542:	683c      	ldr	r4, [r7, #0]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	0023      	movs	r3, r4
 8001550:	f000 f852 	bl	80015f8 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, bd_rate);
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f960 	bl	8001820 <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	220d      	movs	r2, #13
 8001566:	431a      	orrs	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	601a      	str	r2, [r3, #0]

}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b005      	add	sp, #20
 8001572:	bd90      	pop	{r4, r7, pc}

08001574 <USART_CLK_EN>:
	if (IDLE_IT) {
		usart->CR1 |= USART_CR1_IDLEIE;
	}
}
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <USART_CLK_EN+0x70>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d107      	bne.n	8001594 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <USART_CLK_EN+0x74>)
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <USART_CLK_EN+0x74>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	01c9      	lsls	r1, r1, #7
 800158e:	430a      	orrs	r2, r1
 8001590:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 8001592:	e022      	b.n	80015da <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <USART_CLK_EN+0x78>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d107      	bne.n	80015ac <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <USART_CLK_EN+0x74>)
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <USART_CLK_EN+0x74>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0289      	lsls	r1, r1, #10
 80015a6:	430a      	orrs	r2, r1
 80015a8:	61da      	str	r2, [r3, #28]
}
 80015aa:	e016      	b.n	80015da <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <USART_CLK_EN+0x7c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d107      	bne.n	80015c4 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <USART_CLK_EN+0x74>)
 80015b6:	69da      	ldr	r2, [r3, #28]
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <USART_CLK_EN+0x74>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	02c9      	lsls	r1, r1, #11
 80015be:	430a      	orrs	r2, r1
 80015c0:	61da      	str	r2, [r3, #28]
}
 80015c2:	e00a      	b.n	80015da <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <USART_CLK_EN+0x80>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d106      	bne.n	80015da <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <USART_CLK_EN+0x74>)
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <USART_CLK_EN+0x74>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0309      	lsls	r1, r1, #12
 80015d6:	430a      	orrs	r2, r1
 80015d8:	61da      	str	r2, [r3, #28]
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40004800 	.word	0x40004800
 80015f4:	40004c00 	.word	0x40004c00

080015f8 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	68b8      	ldr	r0, [r7, #8]
 800160a:	2300      	movs	r3, #0
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	2300      	movs	r3, #0
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2302      	movs	r3, #2
 8001614:	2202      	movs	r2, #2
 8001616:	f7ff fdb3 	bl	8001180 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800161a:	69b9      	ldr	r1, [r7, #24]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	2300      	movs	r3, #0
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2302      	movs	r3, #2
 8001628:	2202      	movs	r2, #2
 800162a:	f7ff fda9 	bl	8001180 <gpio_config>

	if (usart == USART1) {
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a75      	ldr	r2, [pc, #468]	; (8001808 <USART_PIN_CONFIG+0x210>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d13a      	bne.n	80016ac <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	2390      	movs	r3, #144	; 0x90
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	429a      	cmp	r2, r3
 800163e:	d109      	bne.n	8001654 <USART_PIN_CONFIG+0x5c>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b09      	cmp	r3, #9
 8001644:	d106      	bne.n	8001654 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2201      	movs	r2, #1
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fe60 	bl	8001312 <gpio_altfn>
 8001652:	e00c      	b.n	800166e <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4a6d      	ldr	r2, [pc, #436]	; (800180c <USART_PIN_CONFIG+0x214>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d108      	bne.n	800166e <USART_PIN_CONFIG+0x76>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b06      	cmp	r3, #6
 8001660:	d105      	bne.n	800166e <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2200      	movs	r2, #0
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff fe52 	bl	8001312 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	2390      	movs	r3, #144	; 0x90
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	429a      	cmp	r2, r3
 8001676:	d109      	bne.n	800168c <USART_PIN_CONFIG+0x94>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d106      	bne.n	800168c <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fe44 	bl	8001312 <gpio_altfn>
 800168a:	e0b8      	b.n	80017fe <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a5f      	ldr	r2, [pc, #380]	; (800180c <USART_PIN_CONFIG+0x214>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d000      	beq.n	8001696 <USART_PIN_CONFIG+0x9e>
 8001694:	e0b3      	b.n	80017fe <USART_PIN_CONFIG+0x206>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b07      	cmp	r3, #7
 800169a:	d000      	beq.n	800169e <USART_PIN_CONFIG+0xa6>
 800169c:	e0af      	b.n	80017fe <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fe34 	bl	8001312 <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 80016aa:	e0a8      	b.n	80017fe <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a58      	ldr	r2, [pc, #352]	; (8001810 <USART_PIN_CONFIG+0x218>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d13c      	bne.n	800172e <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	2390      	movs	r3, #144	; 0x90
 80016b8:	05db      	lsls	r3, r3, #23
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <USART_PIN_CONFIG+0xda>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d106      	bne.n	80016d2 <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 80016c4:	6839      	ldr	r1, [r7, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2201      	movs	r2, #1
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff fe21 	bl	8001312 <gpio_altfn>
 80016d0:	e00d      	b.n	80016ee <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	2390      	movs	r3, #144	; 0x90
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	429a      	cmp	r2, r3
 80016da:	d108      	bne.n	80016ee <USART_PIN_CONFIG+0xf6>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2b0e      	cmp	r3, #14
 80016e0:	d105      	bne.n	80016ee <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 80016e2:	6839      	ldr	r1, [r7, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2201      	movs	r2, #1
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff fe12 	bl	8001312 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	2390      	movs	r3, #144	; 0x90
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d109      	bne.n	800170c <USART_PIN_CONFIG+0x114>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d106      	bne.n	800170c <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fe04 	bl	8001312 <gpio_altfn>
 800170a:	e078      	b.n	80017fe <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	2390      	movs	r3, #144	; 0x90
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	429a      	cmp	r2, r3
 8001714:	d000      	beq.n	8001718 <USART_PIN_CONFIG+0x120>
 8001716:	e072      	b.n	80017fe <USART_PIN_CONFIG+0x206>
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	d000      	beq.n	8001720 <USART_PIN_CONFIG+0x128>
 800171e:	e06e      	b.n	80017fe <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 8001720:	69b9      	ldr	r1, [r7, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	0018      	movs	r0, r3
 8001728:	f7ff fdf3 	bl	8001312 <gpio_altfn>
}
 800172c:	e067      	b.n	80017fe <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <USART_PIN_CONFIG+0x21c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d152      	bne.n	80017dc <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4a37      	ldr	r2, [pc, #220]	; (8001818 <USART_PIN_CONFIG+0x220>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d109      	bne.n	8001752 <USART_PIN_CONFIG+0x15a>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b04      	cmp	r3, #4
 8001742:	d106      	bne.n	8001752 <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2201      	movs	r2, #1
 800174a:	0018      	movs	r0, r3
 800174c:	f7ff fde1 	bl	8001312 <gpio_altfn>
 8001750:	e01a      	b.n	8001788 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4a2d      	ldr	r2, [pc, #180]	; (800180c <USART_PIN_CONFIG+0x214>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d109      	bne.n	800176e <USART_PIN_CONFIG+0x176>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b0a      	cmp	r3, #10
 800175e:	d106      	bne.n	800176e <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2204      	movs	r2, #4
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff fdd3 	bl	8001312 <gpio_altfn>
 800176c:	e00c      	b.n	8001788 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <USART_PIN_CONFIG+0x220>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d108      	bne.n	8001788 <USART_PIN_CONFIG+0x190>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b0a      	cmp	r3, #10
 800177a:	d105      	bne.n	8001788 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2201      	movs	r2, #1
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fdc5 	bl	8001312 <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a23      	ldr	r2, [pc, #140]	; (8001818 <USART_PIN_CONFIG+0x220>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d109      	bne.n	80017a4 <USART_PIN_CONFIG+0x1ac>
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d106      	bne.n	80017a4 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff fdb8 	bl	8001312 <gpio_altfn>
 80017a2:	e02c      	b.n	80017fe <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <USART_PIN_CONFIG+0x220>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d109      	bne.n	80017c0 <USART_PIN_CONFIG+0x1c8>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0b      	cmp	r3, #11
 80017b0:	d106      	bne.n	80017c0 <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff fdaa 	bl	8001312 <gpio_altfn>
 80017be:	e01e      	b.n	80017fe <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <USART_PIN_CONFIG+0x214>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d11a      	bne.n	80017fe <USART_PIN_CONFIG+0x206>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0b      	cmp	r3, #11
 80017cc:	d117      	bne.n	80017fe <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2204      	movs	r2, #4
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff fd9c 	bl	8001312 <gpio_altfn>
}
 80017da:	e010      	b.n	80017fe <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <USART_PIN_CONFIG+0x224>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d10c      	bne.n	80017fe <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2204      	movs	r2, #4
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff fd91 	bl	8001312 <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 80017f0:	69b9      	ldr	r1, [r7, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2204      	movs	r2, #4
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fd8b 	bl	8001312 <gpio_altfn>
}
 80017fc:	e7ff      	b.n	80017fe <USART_PIN_CONFIG+0x206>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40013800 	.word	0x40013800
 800180c:	48000400 	.word	0x48000400
 8001810:	40004400 	.word	0x40004400
 8001814:	40004800 	.word	0x40004800
 8001818:	48000800 	.word	0x48000800
 800181c:	40004c00 	.word	0x40004c00

08001820 <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint32_t bd_rate) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//
	uint32_t baud = (uint32_t) (SystemCoreClock / bd_rate);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <USART_BDR_SEL+0x30>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6839      	ldr	r1, [r7, #0]
 8001830:	0018      	movs	r0, r3
 8001832:	f7fe fc7b 	bl	800012c <__udivsi3>
 8001836:	0003      	movs	r3, r0
 8001838:	60fb      	str	r3, [r7, #12]
	usart->BRR |= baud;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60da      	str	r2, [r3, #12]
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b004      	add	sp, #16
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000000 	.word	0x20000000

08001854 <USART_WRITE>:

/* Write a character to USART1 */
void USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < len; i++) {
 8001860:	2317      	movs	r3, #23
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e01c      	b.n	80018a4 <USART_WRITE+0x50>
		if (len == 1) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d104      	bne.n	800187a <USART_WRITE+0x26>
			usart->TDR = ch;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28
 8001878:	e008      	b.n	800188c <USART_WRITE+0x38>
		} else {
			usart->TDR = ch[i];
 800187a:	2317      	movs	r3, #23
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	18d3      	adds	r3, r2, r3
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE))
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	4013      	ands	r3, r2
 8001896:	d0fa      	beq.n	800188e <USART_WRITE+0x3a>
	for (uint8_t i = 0; i < len; i++) {
 8001898:	2117      	movs	r1, #23
 800189a:	187b      	adds	r3, r7, r1
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	3201      	adds	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	2317      	movs	r3, #23
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8dc      	bhi.n	800186a <USART_WRITE+0x16>
			;
	}
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b006      	add	sp, #24
 80018b8:	bd80      	pop	{r7, pc}

080018ba <RCC_CONFIG_48MHZ>:
}

//*******************************************************************************//

//*****************************| RCC CLOCK FUNCTION |****************************//
void RCC_CONFIG_48MHZ() {
 80018ba:	b590      	push	{r4, r7, lr}
 80018bc:	b093      	sub	sp, #76	; 0x4c
 80018be:	af00      	add	r7, sp, #0
//	}
//
//	SystemCoreClockUpdate();
//	SysTick_Config(SystemCoreClock/1000);

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018c0:	2414      	movs	r4, #20
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	0018      	movs	r0, r3
 80018c6:	2334      	movs	r3, #52	; 0x34
 80018c8:	001a      	movs	r2, r3
 80018ca:	2100      	movs	r1, #0
 80018cc:	f000 f8f2 	bl	8001ab4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	0018      	movs	r0, r3
 80018d4:	2310      	movs	r3, #16
 80018d6:	001a      	movs	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	f000 f8eb 	bl	8001ab4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	2220      	movs	r2, #32
 80018e2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	2201      	movs	r2, #1
 80018e8:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7fe ff1c 	bl	8000730 <HAL_RCC_OscConfig>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d000      	beq.n	80018fe <RCC_CONFIG_48MHZ+0x44>
//	    Error_Handler();
//		print("Error in CLK func(1)");
//		USART_WRITE(USART2, "Error in CLK func(1)\n", 21);
		while (1)
 80018fc:	e7fe      	b.n	80018fc <RCC_CONFIG_48MHZ+0x42>
			;
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2203      	movs	r2, #3
 8001908:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2101      	movs	r1, #1
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fa8e 	bl	8000e3c <HAL_RCC_ClockConfig>
 8001920:	1e03      	subs	r3, r0, #0
 8001922:	d000      	beq.n	8001926 <RCC_CONFIG_48MHZ+0x6c>
//	    Error_Handler();
//		print("Error in CLK func(2)");
//		USART_WRITE(USART2, "Error in CLK func(2)\n", 21);
		while (1)
 8001924:	e7fe      	b.n	8001924 <RCC_CONFIG_48MHZ+0x6a>
			;
	}
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b013      	add	sp, #76	; 0x4c
 800192c:	bd90      	pop	{r4, r7, pc}
	...

08001930 <I2C_INIT>:
 *  Created on: Oct 23, 2022
 *      Author: hp
 */
#include "i2c.h"

void I2C_INIT(I2C_TypeDef *i2c, uint32_t timing) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	if (i2c == I2C1) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <I2C_INIT+0x58>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d107      	bne.n	8001952 <I2C_INIT+0x22>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <I2C_INIT+0x5c>)
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <I2C_INIT+0x5c>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0389      	lsls	r1, r1, #14
 800194c:	430a      	orrs	r2, r1
 800194e:	61da      	str	r2, [r3, #28]
 8001950:	e00a      	b.n	8001968 <I2C_INIT+0x38>
	} else if (i2c == I2C2) {
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <I2C_INIT+0x60>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d106      	bne.n	8001968 <I2C_INIT+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <I2C_INIT+0x5c>)
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <I2C_INIT+0x5c>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	03c9      	lsls	r1, r1, #15
 8001964:	430a      	orrs	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
	}
	i2c->CR1 = 0; /* software reset I2C1 */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	i2c->TIMINGR = timing; /* 100 KHz, peripheral clock is 8/48 MHz */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	611a      	str	r2, [r3, #16]
//	i2c->CR1 = 0x00000001; /* enable I2C1 module */
	i2c->CR1 |= I2C_CR1_PE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40021000 	.word	0x40021000
 8001990:	40005800 	.word	0x40005800

08001994 <I2C_MultiRead>:
//	i2c->CR2 = 0; /* clear configuration register 2 */
	i2c->CR2 |= I2C_CR2_AUTOEND;
}

void I2C_MultiRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t maddr, uint32_t n,
		uint8_t *data) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	0008      	movs	r0, r1
 800199e:	0011      	movs	r1, r2
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	230b      	movs	r3, #11
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	1c02      	adds	r2, r0, #0
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	230a      	movs	r3, #10
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	1c0a      	adds	r2, r1, #0
 80019b0:	701a      	strb	r2, [r3, #0]
	while (i2c->ISR & I2C_ISR_BUSY)
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699a      	ldr	r2, [r3, #24]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4013      	ands	r3, r2
 80019be:	d1f9      	bne.n	80019b4 <I2C_MultiRead+0x20>
		; /* wait until bus not busy */

	i2c->CR2 = 	I2C_CR2_START | (1 << 16) | (saddr << 1);	/* generate start and send slave address */
 80019c0:	230b      	movs	r3, #11
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	001a      	movs	r2, r3
 80019ca:	2390      	movs	r3, #144	; 0x90
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]

	while (!(i2c->ISR & I2C_ISR_TXIS))
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d0fa      	beq.n	80019d6 <I2C_MultiRead+0x42>
		; /* wait until transmitter is ready */
	i2c->TXDR = maddr; /* send memory address */
 80019e0:	230a      	movs	r3, #10
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(i2c->ISR & I2C_ISR_TC))
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0fa      	beq.n	80019ec <I2C_MultiRead+0x58>
		; /* wait until transfer complete */

	/* generate restart, send slave address, repeat read n bytes, set for auto end */
	i2c->CR2 = I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND | ((n & 0xFF) << 16) | (saddr << 1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	041a      	lsls	r2, r3, #16
 80019fa:	23ff      	movs	r3, #255	; 0xff
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	4013      	ands	r3, r2
 8001a00:	220b      	movs	r2, #11
 8001a02:	18ba      	adds	r2, r7, r2
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	0052      	lsls	r2, r2, #1
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <I2C_MultiRead+0xc8>)
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]

	for (; n > 0; n--) {
 8001a12:	e00f      	b.n	8001a34 <I2C_MultiRead+0xa0>
		while (!(i2c->ISR & I2C_ISR_RXNE))
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d0fa      	beq.n	8001a16 <I2C_MultiRead+0x82>
			; /* Wait until RXNE flag is set */
		*data++ = i2c->RXDR; /* Read data from DR */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	61ba      	str	r2, [r7, #24]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (; n > 0; n--) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ec      	bne.n	8001a14 <I2C_MultiRead+0x80>
	}

	while (!(i2c->ISR & I2C_ISR_STOPF))
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2220      	movs	r2, #32
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0fa      	beq.n	8001a3c <I2C_MultiRead+0xa8>
		; /* wait until stop flag is set */

	i2c->ICR = I2C_ISR_STOPF; /* clear stop flag */
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	61da      	str	r2, [r3, #28]
//	i2c->CR2 = 0; /* clear configuration register 2 */
	i2c->CR2 = I2C_CR2_AUTOEND;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	0492      	lsls	r2, r2, #18
 8001a52:	605a      	str	r2, [r3, #4]
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b004      	add	sp, #16
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	02002400 	.word	0x02002400

08001a60 <__errno>:
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <__errno+0x8>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	4770      	bx	lr
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	2000004c 	.word	0x2000004c

08001a6c <__libc_init_array>:
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	2600      	movs	r6, #0
 8001a70:	4d0c      	ldr	r5, [pc, #48]	; (8001aa4 <__libc_init_array+0x38>)
 8001a72:	4c0d      	ldr	r4, [pc, #52]	; (8001aa8 <__libc_init_array+0x3c>)
 8001a74:	1b64      	subs	r4, r4, r5
 8001a76:	10a4      	asrs	r4, r4, #2
 8001a78:	42a6      	cmp	r6, r4
 8001a7a:	d109      	bne.n	8001a90 <__libc_init_array+0x24>
 8001a7c:	2600      	movs	r6, #0
 8001a7e:	f000 fca3 	bl	80023c8 <_init>
 8001a82:	4d0a      	ldr	r5, [pc, #40]	; (8001aac <__libc_init_array+0x40>)
 8001a84:	4c0a      	ldr	r4, [pc, #40]	; (8001ab0 <__libc_init_array+0x44>)
 8001a86:	1b64      	subs	r4, r4, r5
 8001a88:	10a4      	asrs	r4, r4, #2
 8001a8a:	42a6      	cmp	r6, r4
 8001a8c:	d105      	bne.n	8001a9a <__libc_init_array+0x2e>
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
 8001a90:	00b3      	lsls	r3, r6, #2
 8001a92:	58eb      	ldr	r3, [r5, r3]
 8001a94:	4798      	blx	r3
 8001a96:	3601      	adds	r6, #1
 8001a98:	e7ee      	b.n	8001a78 <__libc_init_array+0xc>
 8001a9a:	00b3      	lsls	r3, r6, #2
 8001a9c:	58eb      	ldr	r3, [r5, r3]
 8001a9e:	4798      	blx	r3
 8001aa0:	3601      	adds	r6, #1
 8001aa2:	e7f2      	b.n	8001a8a <__libc_init_array+0x1e>
 8001aa4:	080024b4 	.word	0x080024b4
 8001aa8:	080024b4 	.word	0x080024b4
 8001aac:	080024b4 	.word	0x080024b4
 8001ab0:	080024b8 	.word	0x080024b8

08001ab4 <memset>:
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	1882      	adds	r2, r0, r2
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d100      	bne.n	8001abe <memset+0xa>
 8001abc:	4770      	bx	lr
 8001abe:	7019      	strb	r1, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	e7f9      	b.n	8001ab8 <memset+0x4>

08001ac4 <_vsniprintf_r>:
 8001ac4:	b530      	push	{r4, r5, lr}
 8001ac6:	0014      	movs	r4, r2
 8001ac8:	0005      	movs	r5, r0
 8001aca:	001a      	movs	r2, r3
 8001acc:	b09b      	sub	sp, #108	; 0x6c
 8001ace:	2c00      	cmp	r4, #0
 8001ad0:	da05      	bge.n	8001ade <_vsniprintf_r+0x1a>
 8001ad2:	238b      	movs	r3, #139	; 0x8b
 8001ad4:	6003      	str	r3, [r0, #0]
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	4240      	negs	r0, r0
 8001ada:	b01b      	add	sp, #108	; 0x6c
 8001adc:	bd30      	pop	{r4, r5, pc}
 8001ade:	2382      	movs	r3, #130	; 0x82
 8001ae0:	4668      	mov	r0, sp
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	8183      	strh	r3, [r0, #12]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9100      	str	r1, [sp, #0]
 8001aea:	9104      	str	r1, [sp, #16]
 8001aec:	429c      	cmp	r4, r3
 8001aee:	d000      	beq.n	8001af2 <_vsniprintf_r+0x2e>
 8001af0:	1e63      	subs	r3, r4, #1
 8001af2:	9302      	str	r3, [sp, #8]
 8001af4:	9305      	str	r3, [sp, #20]
 8001af6:	2301      	movs	r3, #1
 8001af8:	4669      	mov	r1, sp
 8001afa:	425b      	negs	r3, r3
 8001afc:	81cb      	strh	r3, [r1, #14]
 8001afe:	0028      	movs	r0, r5
 8001b00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001b02:	f000 f879 	bl	8001bf8 <_svfiprintf_r>
 8001b06:	1c43      	adds	r3, r0, #1
 8001b08:	da01      	bge.n	8001b0e <_vsniprintf_r+0x4a>
 8001b0a:	238b      	movs	r3, #139	; 0x8b
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	2c00      	cmp	r4, #0
 8001b10:	d0e3      	beq.n	8001ada <_vsniprintf_r+0x16>
 8001b12:	2300      	movs	r3, #0
 8001b14:	9a00      	ldr	r2, [sp, #0]
 8001b16:	7013      	strb	r3, [r2, #0]
 8001b18:	e7df      	b.n	8001ada <_vsniprintf_r+0x16>
	...

08001b1c <vsniprintf>:
 8001b1c:	b507      	push	{r0, r1, r2, lr}
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	0013      	movs	r3, r2
 8001b22:	000a      	movs	r2, r1
 8001b24:	0001      	movs	r1, r0
 8001b26:	4802      	ldr	r0, [pc, #8]	; (8001b30 <vsniprintf+0x14>)
 8001b28:	6800      	ldr	r0, [r0, #0]
 8001b2a:	f7ff ffcb 	bl	8001ac4 <_vsniprintf_r>
 8001b2e:	bd0e      	pop	{r1, r2, r3, pc}
 8001b30:	2000004c 	.word	0x2000004c

08001b34 <__ssputs_r>:
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	688e      	ldr	r6, [r1, #8]
 8001b38:	b085      	sub	sp, #20
 8001b3a:	0007      	movs	r7, r0
 8001b3c:	000c      	movs	r4, r1
 8001b3e:	9203      	str	r2, [sp, #12]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	429e      	cmp	r6, r3
 8001b44:	d83c      	bhi.n	8001bc0 <__ssputs_r+0x8c>
 8001b46:	2390      	movs	r3, #144	; 0x90
 8001b48:	898a      	ldrh	r2, [r1, #12]
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	421a      	tst	r2, r3
 8001b4e:	d034      	beq.n	8001bba <__ssputs_r+0x86>
 8001b50:	6909      	ldr	r1, [r1, #16]
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	6960      	ldr	r0, [r4, #20]
 8001b56:	1a5b      	subs	r3, r3, r1
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	4343      	muls	r3, r0
 8001b5e:	0fdd      	lsrs	r5, r3, #31
 8001b60:	18ed      	adds	r5, r5, r3
 8001b62:	9b01      	ldr	r3, [sp, #4]
 8001b64:	9802      	ldr	r0, [sp, #8]
 8001b66:	3301      	adds	r3, #1
 8001b68:	181b      	adds	r3, r3, r0
 8001b6a:	106d      	asrs	r5, r5, #1
 8001b6c:	42ab      	cmp	r3, r5
 8001b6e:	d900      	bls.n	8001b72 <__ssputs_r+0x3e>
 8001b70:	001d      	movs	r5, r3
 8001b72:	0553      	lsls	r3, r2, #21
 8001b74:	d532      	bpl.n	8001bdc <__ssputs_r+0xa8>
 8001b76:	0029      	movs	r1, r5
 8001b78:	0038      	movs	r0, r7
 8001b7a:	f000 fb53 	bl	8002224 <_malloc_r>
 8001b7e:	1e06      	subs	r6, r0, #0
 8001b80:	d109      	bne.n	8001b96 <__ssputs_r+0x62>
 8001b82:	230c      	movs	r3, #12
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	2001      	movs	r0, #1
 8001b8a:	89a2      	ldrh	r2, [r4, #12]
 8001b8c:	4240      	negs	r0, r0
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	b005      	add	sp, #20
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b96:	9a02      	ldr	r2, [sp, #8]
 8001b98:	6921      	ldr	r1, [r4, #16]
 8001b9a:	f000 faba 	bl	8002112 <memcpy>
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <__ssputs_r+0xc0>)
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	81a3      	strh	r3, [r4, #12]
 8001baa:	9b02      	ldr	r3, [sp, #8]
 8001bac:	6126      	str	r6, [r4, #16]
 8001bae:	18f6      	adds	r6, r6, r3
 8001bb0:	6026      	str	r6, [r4, #0]
 8001bb2:	6165      	str	r5, [r4, #20]
 8001bb4:	9e01      	ldr	r6, [sp, #4]
 8001bb6:	1aed      	subs	r5, r5, r3
 8001bb8:	60a5      	str	r5, [r4, #8]
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	429e      	cmp	r6, r3
 8001bbe:	d900      	bls.n	8001bc2 <__ssputs_r+0x8e>
 8001bc0:	9e01      	ldr	r6, [sp, #4]
 8001bc2:	0032      	movs	r2, r6
 8001bc4:	9903      	ldr	r1, [sp, #12]
 8001bc6:	6820      	ldr	r0, [r4, #0]
 8001bc8:	f000 faac 	bl	8002124 <memmove>
 8001bcc:	68a3      	ldr	r3, [r4, #8]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	1b9b      	subs	r3, r3, r6
 8001bd2:	60a3      	str	r3, [r4, #8]
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	199e      	adds	r6, r3, r6
 8001bd8:	6026      	str	r6, [r4, #0]
 8001bda:	e7da      	b.n	8001b92 <__ssputs_r+0x5e>
 8001bdc:	002a      	movs	r2, r5
 8001bde:	0038      	movs	r0, r7
 8001be0:	f000 fb96 	bl	8002310 <_realloc_r>
 8001be4:	1e06      	subs	r6, r0, #0
 8001be6:	d1e0      	bne.n	8001baa <__ssputs_r+0x76>
 8001be8:	0038      	movs	r0, r7
 8001bea:	6921      	ldr	r1, [r4, #16]
 8001bec:	f000 faae 	bl	800214c <_free_r>
 8001bf0:	e7c7      	b.n	8001b82 <__ssputs_r+0x4e>
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	fffffb7f 	.word	0xfffffb7f

08001bf8 <_svfiprintf_r>:
 8001bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfa:	b0a1      	sub	sp, #132	; 0x84
 8001bfc:	9003      	str	r0, [sp, #12]
 8001bfe:	001d      	movs	r5, r3
 8001c00:	898b      	ldrh	r3, [r1, #12]
 8001c02:	000f      	movs	r7, r1
 8001c04:	0016      	movs	r6, r2
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	d511      	bpl.n	8001c2e <_svfiprintf_r+0x36>
 8001c0a:	690b      	ldr	r3, [r1, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10e      	bne.n	8001c2e <_svfiprintf_r+0x36>
 8001c10:	2140      	movs	r1, #64	; 0x40
 8001c12:	f000 fb07 	bl	8002224 <_malloc_r>
 8001c16:	6038      	str	r0, [r7, #0]
 8001c18:	6138      	str	r0, [r7, #16]
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d105      	bne.n	8001c2a <_svfiprintf_r+0x32>
 8001c1e:	230c      	movs	r3, #12
 8001c20:	9a03      	ldr	r2, [sp, #12]
 8001c22:	3801      	subs	r0, #1
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	b021      	add	sp, #132	; 0x84
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	ac08      	add	r4, sp, #32
 8001c32:	6163      	str	r3, [r4, #20]
 8001c34:	3320      	adds	r3, #32
 8001c36:	7663      	strb	r3, [r4, #25]
 8001c38:	3310      	adds	r3, #16
 8001c3a:	76a3      	strb	r3, [r4, #26]
 8001c3c:	9507      	str	r5, [sp, #28]
 8001c3e:	0035      	movs	r5, r6
 8001c40:	782b      	ldrb	r3, [r5, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <_svfiprintf_r+0x52>
 8001c46:	2b25      	cmp	r3, #37	; 0x25
 8001c48:	d147      	bne.n	8001cda <_svfiprintf_r+0xe2>
 8001c4a:	1bab      	subs	r3, r5, r6
 8001c4c:	9305      	str	r3, [sp, #20]
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00c      	beq.n	8001c6c <_svfiprintf_r+0x74>
 8001c52:	0032      	movs	r2, r6
 8001c54:	0039      	movs	r1, r7
 8001c56:	9803      	ldr	r0, [sp, #12]
 8001c58:	f7ff ff6c 	bl	8001b34 <__ssputs_r>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d100      	bne.n	8001c62 <_svfiprintf_r+0x6a>
 8001c60:	e0ae      	b.n	8001dc0 <_svfiprintf_r+0x1c8>
 8001c62:	6962      	ldr	r2, [r4, #20]
 8001c64:	9b05      	ldr	r3, [sp, #20]
 8001c66:	4694      	mov	ip, r2
 8001c68:	4463      	add	r3, ip
 8001c6a:	6163      	str	r3, [r4, #20]
 8001c6c:	782b      	ldrb	r3, [r5, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d100      	bne.n	8001c74 <_svfiprintf_r+0x7c>
 8001c72:	e0a5      	b.n	8001dc0 <_svfiprintf_r+0x1c8>
 8001c74:	2201      	movs	r2, #1
 8001c76:	2300      	movs	r3, #0
 8001c78:	4252      	negs	r2, r2
 8001c7a:	6062      	str	r2, [r4, #4]
 8001c7c:	a904      	add	r1, sp, #16
 8001c7e:	3254      	adds	r2, #84	; 0x54
 8001c80:	1852      	adds	r2, r2, r1
 8001c82:	1c6e      	adds	r6, r5, #1
 8001c84:	6023      	str	r3, [r4, #0]
 8001c86:	60e3      	str	r3, [r4, #12]
 8001c88:	60a3      	str	r3, [r4, #8]
 8001c8a:	7013      	strb	r3, [r2, #0]
 8001c8c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c8e:	2205      	movs	r2, #5
 8001c90:	7831      	ldrb	r1, [r6, #0]
 8001c92:	4854      	ldr	r0, [pc, #336]	; (8001de4 <_svfiprintf_r+0x1ec>)
 8001c94:	f000 fa32 	bl	80020fc <memchr>
 8001c98:	1c75      	adds	r5, r6, #1
 8001c9a:	2800      	cmp	r0, #0
 8001c9c:	d11f      	bne.n	8001cde <_svfiprintf_r+0xe6>
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	06d3      	lsls	r3, r2, #27
 8001ca2:	d504      	bpl.n	8001cae <_svfiprintf_r+0xb6>
 8001ca4:	2353      	movs	r3, #83	; 0x53
 8001ca6:	a904      	add	r1, sp, #16
 8001ca8:	185b      	adds	r3, r3, r1
 8001caa:	2120      	movs	r1, #32
 8001cac:	7019      	strb	r1, [r3, #0]
 8001cae:	0713      	lsls	r3, r2, #28
 8001cb0:	d504      	bpl.n	8001cbc <_svfiprintf_r+0xc4>
 8001cb2:	2353      	movs	r3, #83	; 0x53
 8001cb4:	a904      	add	r1, sp, #16
 8001cb6:	185b      	adds	r3, r3, r1
 8001cb8:	212b      	movs	r1, #43	; 0x2b
 8001cba:	7019      	strb	r1, [r3, #0]
 8001cbc:	7833      	ldrb	r3, [r6, #0]
 8001cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc0:	d016      	beq.n	8001cf0 <_svfiprintf_r+0xf8>
 8001cc2:	0035      	movs	r5, r6
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	68e3      	ldr	r3, [r4, #12]
 8001cca:	782a      	ldrb	r2, [r5, #0]
 8001ccc:	1c6e      	adds	r6, r5, #1
 8001cce:	3a30      	subs	r2, #48	; 0x30
 8001cd0:	2a09      	cmp	r2, #9
 8001cd2:	d94e      	bls.n	8001d72 <_svfiprintf_r+0x17a>
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	d111      	bne.n	8001cfc <_svfiprintf_r+0x104>
 8001cd8:	e017      	b.n	8001d0a <_svfiprintf_r+0x112>
 8001cda:	3501      	adds	r5, #1
 8001cdc:	e7b0      	b.n	8001c40 <_svfiprintf_r+0x48>
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <_svfiprintf_r+0x1ec>)
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	1ac0      	subs	r0, r0, r3
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4083      	lsls	r3, r0
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	002e      	movs	r6, r5
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	e7ce      	b.n	8001c8e <_svfiprintf_r+0x96>
 8001cf0:	9b07      	ldr	r3, [sp, #28]
 8001cf2:	1d19      	adds	r1, r3, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	9107      	str	r1, [sp, #28]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db01      	blt.n	8001d00 <_svfiprintf_r+0x108>
 8001cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cfe:	e004      	b.n	8001d0a <_svfiprintf_r+0x112>
 8001d00:	425b      	negs	r3, r3
 8001d02:	60e3      	str	r3, [r4, #12]
 8001d04:	2302      	movs	r3, #2
 8001d06:	4313      	orrs	r3, r2
 8001d08:	6023      	str	r3, [r4, #0]
 8001d0a:	782b      	ldrb	r3, [r5, #0]
 8001d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d0e:	d10a      	bne.n	8001d26 <_svfiprintf_r+0x12e>
 8001d10:	786b      	ldrb	r3, [r5, #1]
 8001d12:	2b2a      	cmp	r3, #42	; 0x2a
 8001d14:	d135      	bne.n	8001d82 <_svfiprintf_r+0x18a>
 8001d16:	9b07      	ldr	r3, [sp, #28]
 8001d18:	3502      	adds	r5, #2
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	9207      	str	r2, [sp, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db2b      	blt.n	8001d7c <_svfiprintf_r+0x184>
 8001d24:	9309      	str	r3, [sp, #36]	; 0x24
 8001d26:	4e30      	ldr	r6, [pc, #192]	; (8001de8 <_svfiprintf_r+0x1f0>)
 8001d28:	2203      	movs	r2, #3
 8001d2a:	0030      	movs	r0, r6
 8001d2c:	7829      	ldrb	r1, [r5, #0]
 8001d2e:	f000 f9e5 	bl	80020fc <memchr>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d006      	beq.n	8001d44 <_svfiprintf_r+0x14c>
 8001d36:	2340      	movs	r3, #64	; 0x40
 8001d38:	1b80      	subs	r0, r0, r6
 8001d3a:	4083      	lsls	r3, r0
 8001d3c:	6822      	ldr	r2, [r4, #0]
 8001d3e:	3501      	adds	r5, #1
 8001d40:	4313      	orrs	r3, r2
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	7829      	ldrb	r1, [r5, #0]
 8001d46:	2206      	movs	r2, #6
 8001d48:	4828      	ldr	r0, [pc, #160]	; (8001dec <_svfiprintf_r+0x1f4>)
 8001d4a:	1c6e      	adds	r6, r5, #1
 8001d4c:	7621      	strb	r1, [r4, #24]
 8001d4e:	f000 f9d5 	bl	80020fc <memchr>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d03c      	beq.n	8001dd0 <_svfiprintf_r+0x1d8>
 8001d56:	4b26      	ldr	r3, [pc, #152]	; (8001df0 <_svfiprintf_r+0x1f8>)
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d125      	bne.n	8001da8 <_svfiprintf_r+0x1b0>
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	9b07      	ldr	r3, [sp, #28]
 8001d60:	3307      	adds	r3, #7
 8001d62:	4393      	bics	r3, r2
 8001d64:	3308      	adds	r3, #8
 8001d66:	9307      	str	r3, [sp, #28]
 8001d68:	6963      	ldr	r3, [r4, #20]
 8001d6a:	9a04      	ldr	r2, [sp, #16]
 8001d6c:	189b      	adds	r3, r3, r2
 8001d6e:	6163      	str	r3, [r4, #20]
 8001d70:	e765      	b.n	8001c3e <_svfiprintf_r+0x46>
 8001d72:	4343      	muls	r3, r0
 8001d74:	0035      	movs	r5, r6
 8001d76:	2101      	movs	r1, #1
 8001d78:	189b      	adds	r3, r3, r2
 8001d7a:	e7a6      	b.n	8001cca <_svfiprintf_r+0xd2>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	425b      	negs	r3, r3
 8001d80:	e7d0      	b.n	8001d24 <_svfiprintf_r+0x12c>
 8001d82:	2300      	movs	r3, #0
 8001d84:	200a      	movs	r0, #10
 8001d86:	001a      	movs	r2, r3
 8001d88:	3501      	adds	r5, #1
 8001d8a:	6063      	str	r3, [r4, #4]
 8001d8c:	7829      	ldrb	r1, [r5, #0]
 8001d8e:	1c6e      	adds	r6, r5, #1
 8001d90:	3930      	subs	r1, #48	; 0x30
 8001d92:	2909      	cmp	r1, #9
 8001d94:	d903      	bls.n	8001d9e <_svfiprintf_r+0x1a6>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0c5      	beq.n	8001d26 <_svfiprintf_r+0x12e>
 8001d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8001d9c:	e7c3      	b.n	8001d26 <_svfiprintf_r+0x12e>
 8001d9e:	4342      	muls	r2, r0
 8001da0:	0035      	movs	r5, r6
 8001da2:	2301      	movs	r3, #1
 8001da4:	1852      	adds	r2, r2, r1
 8001da6:	e7f1      	b.n	8001d8c <_svfiprintf_r+0x194>
 8001da8:	ab07      	add	r3, sp, #28
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	003a      	movs	r2, r7
 8001dae:	0021      	movs	r1, r4
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <_svfiprintf_r+0x1fc>)
 8001db2:	9803      	ldr	r0, [sp, #12]
 8001db4:	e000      	b.n	8001db8 <_svfiprintf_r+0x1c0>
 8001db6:	bf00      	nop
 8001db8:	9004      	str	r0, [sp, #16]
 8001dba:	9b04      	ldr	r3, [sp, #16]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	d1d3      	bne.n	8001d68 <_svfiprintf_r+0x170>
 8001dc0:	89bb      	ldrh	r3, [r7, #12]
 8001dc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001dc4:	065b      	lsls	r3, r3, #25
 8001dc6:	d400      	bmi.n	8001dca <_svfiprintf_r+0x1d2>
 8001dc8:	e72d      	b.n	8001c26 <_svfiprintf_r+0x2e>
 8001dca:	2001      	movs	r0, #1
 8001dcc:	4240      	negs	r0, r0
 8001dce:	e72a      	b.n	8001c26 <_svfiprintf_r+0x2e>
 8001dd0:	ab07      	add	r3, sp, #28
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	003a      	movs	r2, r7
 8001dd6:	0021      	movs	r1, r4
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <_svfiprintf_r+0x1fc>)
 8001dda:	9803      	ldr	r0, [sp, #12]
 8001ddc:	f000 f87c 	bl	8001ed8 <_printf_i>
 8001de0:	e7ea      	b.n	8001db8 <_svfiprintf_r+0x1c0>
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	08002480 	.word	0x08002480
 8001de8:	08002486 	.word	0x08002486
 8001dec:	0800248a 	.word	0x0800248a
 8001df0:	00000000 	.word	0x00000000
 8001df4:	08001b35 	.word	0x08001b35

08001df8 <_printf_common>:
 8001df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dfa:	0015      	movs	r5, r2
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	688a      	ldr	r2, [r1, #8]
 8001e00:	690b      	ldr	r3, [r1, #16]
 8001e02:	000c      	movs	r4, r1
 8001e04:	9000      	str	r0, [sp, #0]
 8001e06:	4293      	cmp	r3, r2
 8001e08:	da00      	bge.n	8001e0c <_printf_common+0x14>
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	0022      	movs	r2, r4
 8001e0e:	602b      	str	r3, [r5, #0]
 8001e10:	3243      	adds	r2, #67	; 0x43
 8001e12:	7812      	ldrb	r2, [r2, #0]
 8001e14:	2a00      	cmp	r2, #0
 8001e16:	d001      	beq.n	8001e1c <_printf_common+0x24>
 8001e18:	3301      	adds	r3, #1
 8001e1a:	602b      	str	r3, [r5, #0]
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	d502      	bpl.n	8001e28 <_printf_common+0x30>
 8001e22:	682b      	ldr	r3, [r5, #0]
 8001e24:	3302      	adds	r3, #2
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	6822      	ldr	r2, [r4, #0]
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	0017      	movs	r7, r2
 8001e2e:	401f      	ands	r7, r3
 8001e30:	421a      	tst	r2, r3
 8001e32:	d027      	beq.n	8001e84 <_printf_common+0x8c>
 8001e34:	0023      	movs	r3, r4
 8001e36:	3343      	adds	r3, #67	; 0x43
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	1e5a      	subs	r2, r3, #1
 8001e3c:	4193      	sbcs	r3, r2
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	0692      	lsls	r2, r2, #26
 8001e42:	d430      	bmi.n	8001ea6 <_printf_common+0xae>
 8001e44:	0022      	movs	r2, r4
 8001e46:	9901      	ldr	r1, [sp, #4]
 8001e48:	9800      	ldr	r0, [sp, #0]
 8001e4a:	9e08      	ldr	r6, [sp, #32]
 8001e4c:	3243      	adds	r2, #67	; 0x43
 8001e4e:	47b0      	blx	r6
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d025      	beq.n	8001ea0 <_printf_common+0xa8>
 8001e54:	2306      	movs	r3, #6
 8001e56:	6820      	ldr	r0, [r4, #0]
 8001e58:	682a      	ldr	r2, [r5, #0]
 8001e5a:	68e1      	ldr	r1, [r4, #12]
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	4003      	ands	r3, r0
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d103      	bne.n	8001e6c <_printf_common+0x74>
 8001e64:	1a8d      	subs	r5, r1, r2
 8001e66:	43eb      	mvns	r3, r5
 8001e68:	17db      	asrs	r3, r3, #31
 8001e6a:	401d      	ands	r5, r3
 8001e6c:	68a3      	ldr	r3, [r4, #8]
 8001e6e:	6922      	ldr	r2, [r4, #16]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	dd01      	ble.n	8001e78 <_printf_common+0x80>
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	18ed      	adds	r5, r5, r3
 8001e78:	2700      	movs	r7, #0
 8001e7a:	42bd      	cmp	r5, r7
 8001e7c:	d120      	bne.n	8001ec0 <_printf_common+0xc8>
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e010      	b.n	8001ea4 <_printf_common+0xac>
 8001e82:	3701      	adds	r7, #1
 8001e84:	68e3      	ldr	r3, [r4, #12]
 8001e86:	682a      	ldr	r2, [r5, #0]
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	42bb      	cmp	r3, r7
 8001e8c:	ddd2      	ble.n	8001e34 <_printf_common+0x3c>
 8001e8e:	0022      	movs	r2, r4
 8001e90:	2301      	movs	r3, #1
 8001e92:	9901      	ldr	r1, [sp, #4]
 8001e94:	9800      	ldr	r0, [sp, #0]
 8001e96:	9e08      	ldr	r6, [sp, #32]
 8001e98:	3219      	adds	r2, #25
 8001e9a:	47b0      	blx	r6
 8001e9c:	1c43      	adds	r3, r0, #1
 8001e9e:	d1f0      	bne.n	8001e82 <_printf_common+0x8a>
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	4240      	negs	r0, r0
 8001ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ea6:	2030      	movs	r0, #48	; 0x30
 8001ea8:	18e1      	adds	r1, r4, r3
 8001eaa:	3143      	adds	r1, #67	; 0x43
 8001eac:	7008      	strb	r0, [r1, #0]
 8001eae:	0021      	movs	r1, r4
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	3145      	adds	r1, #69	; 0x45
 8001eb4:	7809      	ldrb	r1, [r1, #0]
 8001eb6:	18a2      	adds	r2, r4, r2
 8001eb8:	3243      	adds	r2, #67	; 0x43
 8001eba:	3302      	adds	r3, #2
 8001ebc:	7011      	strb	r1, [r2, #0]
 8001ebe:	e7c1      	b.n	8001e44 <_printf_common+0x4c>
 8001ec0:	0022      	movs	r2, r4
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	9901      	ldr	r1, [sp, #4]
 8001ec6:	9800      	ldr	r0, [sp, #0]
 8001ec8:	9e08      	ldr	r6, [sp, #32]
 8001eca:	321a      	adds	r2, #26
 8001ecc:	47b0      	blx	r6
 8001ece:	1c43      	adds	r3, r0, #1
 8001ed0:	d0e6      	beq.n	8001ea0 <_printf_common+0xa8>
 8001ed2:	3701      	adds	r7, #1
 8001ed4:	e7d1      	b.n	8001e7a <_printf_common+0x82>
	...

08001ed8 <_printf_i>:
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	9206      	str	r2, [sp, #24]
 8001ede:	000a      	movs	r2, r1
 8001ee0:	3243      	adds	r2, #67	; 0x43
 8001ee2:	9307      	str	r3, [sp, #28]
 8001ee4:	9005      	str	r0, [sp, #20]
 8001ee6:	9204      	str	r2, [sp, #16]
 8001ee8:	7e0a      	ldrb	r2, [r1, #24]
 8001eea:	000c      	movs	r4, r1
 8001eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001eee:	2a78      	cmp	r2, #120	; 0x78
 8001ef0:	d807      	bhi.n	8001f02 <_printf_i+0x2a>
 8001ef2:	2a62      	cmp	r2, #98	; 0x62
 8001ef4:	d809      	bhi.n	8001f0a <_printf_i+0x32>
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	d100      	bne.n	8001efc <_printf_i+0x24>
 8001efa:	e0c1      	b.n	8002080 <_printf_i+0x1a8>
 8001efc:	2a58      	cmp	r2, #88	; 0x58
 8001efe:	d100      	bne.n	8001f02 <_printf_i+0x2a>
 8001f00:	e08c      	b.n	800201c <_printf_i+0x144>
 8001f02:	0026      	movs	r6, r4
 8001f04:	3642      	adds	r6, #66	; 0x42
 8001f06:	7032      	strb	r2, [r6, #0]
 8001f08:	e022      	b.n	8001f50 <_printf_i+0x78>
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	3863      	subs	r0, #99	; 0x63
 8001f0e:	2815      	cmp	r0, #21
 8001f10:	d8f7      	bhi.n	8001f02 <_printf_i+0x2a>
 8001f12:	f7fe f901 	bl	8000118 <__gnu_thumb1_case_shi>
 8001f16:	0016      	.short	0x0016
 8001f18:	fff6001f 	.word	0xfff6001f
 8001f1c:	fff6fff6 	.word	0xfff6fff6
 8001f20:	001ffff6 	.word	0x001ffff6
 8001f24:	fff6fff6 	.word	0xfff6fff6
 8001f28:	fff6fff6 	.word	0xfff6fff6
 8001f2c:	003600a8 	.word	0x003600a8
 8001f30:	fff6009a 	.word	0xfff6009a
 8001f34:	00b9fff6 	.word	0x00b9fff6
 8001f38:	0036fff6 	.word	0x0036fff6
 8001f3c:	fff6fff6 	.word	0xfff6fff6
 8001f40:	009e      	.short	0x009e
 8001f42:	0026      	movs	r6, r4
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	3642      	adds	r6, #66	; 0x42
 8001f48:	1d11      	adds	r1, r2, #4
 8001f4a:	6019      	str	r1, [r3, #0]
 8001f4c:	6813      	ldr	r3, [r2, #0]
 8001f4e:	7033      	strb	r3, [r6, #0]
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0a7      	b.n	80020a4 <_printf_i+0x1cc>
 8001f54:	6808      	ldr	r0, [r1, #0]
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	1d0a      	adds	r2, r1, #4
 8001f5a:	0605      	lsls	r5, r0, #24
 8001f5c:	d50b      	bpl.n	8001f76 <_printf_i+0x9e>
 8001f5e:	680d      	ldr	r5, [r1, #0]
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	da03      	bge.n	8001f6e <_printf_i+0x96>
 8001f66:	232d      	movs	r3, #45	; 0x2d
 8001f68:	9a04      	ldr	r2, [sp, #16]
 8001f6a:	426d      	negs	r5, r5
 8001f6c:	7013      	strb	r3, [r2, #0]
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <_printf_i+0x21c>)
 8001f70:	270a      	movs	r7, #10
 8001f72:	9303      	str	r3, [sp, #12]
 8001f74:	e01b      	b.n	8001fae <_printf_i+0xd6>
 8001f76:	680d      	ldr	r5, [r1, #0]
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	0641      	lsls	r1, r0, #25
 8001f7c:	d5f1      	bpl.n	8001f62 <_printf_i+0x8a>
 8001f7e:	b22d      	sxth	r5, r5
 8001f80:	e7ef      	b.n	8001f62 <_printf_i+0x8a>
 8001f82:	680d      	ldr	r5, [r1, #0]
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	1d08      	adds	r0, r1, #4
 8001f88:	6018      	str	r0, [r3, #0]
 8001f8a:	062e      	lsls	r6, r5, #24
 8001f8c:	d501      	bpl.n	8001f92 <_printf_i+0xba>
 8001f8e:	680d      	ldr	r5, [r1, #0]
 8001f90:	e003      	b.n	8001f9a <_printf_i+0xc2>
 8001f92:	066d      	lsls	r5, r5, #25
 8001f94:	d5fb      	bpl.n	8001f8e <_printf_i+0xb6>
 8001f96:	680d      	ldr	r5, [r1, #0]
 8001f98:	b2ad      	uxth	r5, r5
 8001f9a:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <_printf_i+0x21c>)
 8001f9c:	2708      	movs	r7, #8
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	2a6f      	cmp	r2, #111	; 0x6f
 8001fa2:	d000      	beq.n	8001fa6 <_printf_i+0xce>
 8001fa4:	3702      	adds	r7, #2
 8001fa6:	0023      	movs	r3, r4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	3343      	adds	r3, #67	; 0x43
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	6863      	ldr	r3, [r4, #4]
 8001fb0:	60a3      	str	r3, [r4, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db03      	blt.n	8001fbe <_printf_i+0xe6>
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	6821      	ldr	r1, [r4, #0]
 8001fba:	4391      	bics	r1, r2
 8001fbc:	6021      	str	r1, [r4, #0]
 8001fbe:	2d00      	cmp	r5, #0
 8001fc0:	d102      	bne.n	8001fc8 <_printf_i+0xf0>
 8001fc2:	9e04      	ldr	r6, [sp, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00c      	beq.n	8001fe2 <_printf_i+0x10a>
 8001fc8:	9e04      	ldr	r6, [sp, #16]
 8001fca:	0028      	movs	r0, r5
 8001fcc:	0039      	movs	r1, r7
 8001fce:	f7fe f933 	bl	8000238 <__aeabi_uidivmod>
 8001fd2:	9b03      	ldr	r3, [sp, #12]
 8001fd4:	3e01      	subs	r6, #1
 8001fd6:	5c5b      	ldrb	r3, [r3, r1]
 8001fd8:	7033      	strb	r3, [r6, #0]
 8001fda:	002b      	movs	r3, r5
 8001fdc:	0005      	movs	r5, r0
 8001fde:	429f      	cmp	r7, r3
 8001fe0:	d9f3      	bls.n	8001fca <_printf_i+0xf2>
 8001fe2:	2f08      	cmp	r7, #8
 8001fe4:	d109      	bne.n	8001ffa <_printf_i+0x122>
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	07db      	lsls	r3, r3, #31
 8001fea:	d506      	bpl.n	8001ffa <_printf_i+0x122>
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	6922      	ldr	r2, [r4, #16]
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	dc02      	bgt.n	8001ffa <_printf_i+0x122>
 8001ff4:	2330      	movs	r3, #48	; 0x30
 8001ff6:	3e01      	subs	r6, #1
 8001ff8:	7033      	strb	r3, [r6, #0]
 8001ffa:	9b04      	ldr	r3, [sp, #16]
 8001ffc:	1b9b      	subs	r3, r3, r6
 8001ffe:	6123      	str	r3, [r4, #16]
 8002000:	9b07      	ldr	r3, [sp, #28]
 8002002:	0021      	movs	r1, r4
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	9805      	ldr	r0, [sp, #20]
 8002008:	9b06      	ldr	r3, [sp, #24]
 800200a:	aa09      	add	r2, sp, #36	; 0x24
 800200c:	f7ff fef4 	bl	8001df8 <_printf_common>
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	d14c      	bne.n	80020ae <_printf_i+0x1d6>
 8002014:	2001      	movs	r0, #1
 8002016:	4240      	negs	r0, r0
 8002018:	b00b      	add	sp, #44	; 0x2c
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201c:	3145      	adds	r1, #69	; 0x45
 800201e:	700a      	strb	r2, [r1, #0]
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <_printf_i+0x21c>)
 8002022:	9203      	str	r2, [sp, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	6821      	ldr	r1, [r4, #0]
 8002028:	ca20      	ldmia	r2!, {r5}
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	0608      	lsls	r0, r1, #24
 800202e:	d516      	bpl.n	800205e <_printf_i+0x186>
 8002030:	07cb      	lsls	r3, r1, #31
 8002032:	d502      	bpl.n	800203a <_printf_i+0x162>
 8002034:	2320      	movs	r3, #32
 8002036:	4319      	orrs	r1, r3
 8002038:	6021      	str	r1, [r4, #0]
 800203a:	2710      	movs	r7, #16
 800203c:	2d00      	cmp	r5, #0
 800203e:	d1b2      	bne.n	8001fa6 <_printf_i+0xce>
 8002040:	2320      	movs	r3, #32
 8002042:	6822      	ldr	r2, [r4, #0]
 8002044:	439a      	bics	r2, r3
 8002046:	6022      	str	r2, [r4, #0]
 8002048:	e7ad      	b.n	8001fa6 <_printf_i+0xce>
 800204a:	2220      	movs	r2, #32
 800204c:	6809      	ldr	r1, [r1, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	6022      	str	r2, [r4, #0]
 8002052:	0022      	movs	r2, r4
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	3245      	adds	r2, #69	; 0x45
 8002058:	7011      	strb	r1, [r2, #0]
 800205a:	4a27      	ldr	r2, [pc, #156]	; (80020f8 <_printf_i+0x220>)
 800205c:	e7e1      	b.n	8002022 <_printf_i+0x14a>
 800205e:	0648      	lsls	r0, r1, #25
 8002060:	d5e6      	bpl.n	8002030 <_printf_i+0x158>
 8002062:	b2ad      	uxth	r5, r5
 8002064:	e7e4      	b.n	8002030 <_printf_i+0x158>
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	680d      	ldr	r5, [r1, #0]
 800206a:	1d10      	adds	r0, r2, #4
 800206c:	6949      	ldr	r1, [r1, #20]
 800206e:	6018      	str	r0, [r3, #0]
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	062e      	lsls	r6, r5, #24
 8002074:	d501      	bpl.n	800207a <_printf_i+0x1a2>
 8002076:	6019      	str	r1, [r3, #0]
 8002078:	e002      	b.n	8002080 <_printf_i+0x1a8>
 800207a:	066d      	lsls	r5, r5, #25
 800207c:	d5fb      	bpl.n	8002076 <_printf_i+0x19e>
 800207e:	8019      	strh	r1, [r3, #0]
 8002080:	2300      	movs	r3, #0
 8002082:	9e04      	ldr	r6, [sp, #16]
 8002084:	6123      	str	r3, [r4, #16]
 8002086:	e7bb      	b.n	8002000 <_printf_i+0x128>
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	1d11      	adds	r1, r2, #4
 800208c:	6019      	str	r1, [r3, #0]
 800208e:	6816      	ldr	r6, [r2, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	0030      	movs	r0, r6
 8002094:	6862      	ldr	r2, [r4, #4]
 8002096:	f000 f831 	bl	80020fc <memchr>
 800209a:	2800      	cmp	r0, #0
 800209c:	d001      	beq.n	80020a2 <_printf_i+0x1ca>
 800209e:	1b80      	subs	r0, r0, r6
 80020a0:	6060      	str	r0, [r4, #4]
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	6123      	str	r3, [r4, #16]
 80020a6:	2300      	movs	r3, #0
 80020a8:	9a04      	ldr	r2, [sp, #16]
 80020aa:	7013      	strb	r3, [r2, #0]
 80020ac:	e7a8      	b.n	8002000 <_printf_i+0x128>
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	0032      	movs	r2, r6
 80020b2:	9906      	ldr	r1, [sp, #24]
 80020b4:	9805      	ldr	r0, [sp, #20]
 80020b6:	9d07      	ldr	r5, [sp, #28]
 80020b8:	47a8      	blx	r5
 80020ba:	1c43      	adds	r3, r0, #1
 80020bc:	d0aa      	beq.n	8002014 <_printf_i+0x13c>
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	079b      	lsls	r3, r3, #30
 80020c2:	d415      	bmi.n	80020f0 <_printf_i+0x218>
 80020c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020c6:	68e0      	ldr	r0, [r4, #12]
 80020c8:	4298      	cmp	r0, r3
 80020ca:	daa5      	bge.n	8002018 <_printf_i+0x140>
 80020cc:	0018      	movs	r0, r3
 80020ce:	e7a3      	b.n	8002018 <_printf_i+0x140>
 80020d0:	0022      	movs	r2, r4
 80020d2:	2301      	movs	r3, #1
 80020d4:	9906      	ldr	r1, [sp, #24]
 80020d6:	9805      	ldr	r0, [sp, #20]
 80020d8:	9e07      	ldr	r6, [sp, #28]
 80020da:	3219      	adds	r2, #25
 80020dc:	47b0      	blx	r6
 80020de:	1c43      	adds	r3, r0, #1
 80020e0:	d098      	beq.n	8002014 <_printf_i+0x13c>
 80020e2:	3501      	adds	r5, #1
 80020e4:	68e3      	ldr	r3, [r4, #12]
 80020e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	42ab      	cmp	r3, r5
 80020ec:	dcf0      	bgt.n	80020d0 <_printf_i+0x1f8>
 80020ee:	e7e9      	b.n	80020c4 <_printf_i+0x1ec>
 80020f0:	2500      	movs	r5, #0
 80020f2:	e7f7      	b.n	80020e4 <_printf_i+0x20c>
 80020f4:	08002491 	.word	0x08002491
 80020f8:	080024a2 	.word	0x080024a2

080020fc <memchr>:
 80020fc:	b2c9      	uxtb	r1, r1
 80020fe:	1882      	adds	r2, r0, r2
 8002100:	4290      	cmp	r0, r2
 8002102:	d101      	bne.n	8002108 <memchr+0xc>
 8002104:	2000      	movs	r0, #0
 8002106:	4770      	bx	lr
 8002108:	7803      	ldrb	r3, [r0, #0]
 800210a:	428b      	cmp	r3, r1
 800210c:	d0fb      	beq.n	8002106 <memchr+0xa>
 800210e:	3001      	adds	r0, #1
 8002110:	e7f6      	b.n	8002100 <memchr+0x4>

08002112 <memcpy>:
 8002112:	2300      	movs	r3, #0
 8002114:	b510      	push	{r4, lr}
 8002116:	429a      	cmp	r2, r3
 8002118:	d100      	bne.n	800211c <memcpy+0xa>
 800211a:	bd10      	pop	{r4, pc}
 800211c:	5ccc      	ldrb	r4, [r1, r3]
 800211e:	54c4      	strb	r4, [r0, r3]
 8002120:	3301      	adds	r3, #1
 8002122:	e7f8      	b.n	8002116 <memcpy+0x4>

08002124 <memmove>:
 8002124:	b510      	push	{r4, lr}
 8002126:	4288      	cmp	r0, r1
 8002128:	d902      	bls.n	8002130 <memmove+0xc>
 800212a:	188b      	adds	r3, r1, r2
 800212c:	4298      	cmp	r0, r3
 800212e:	d303      	bcc.n	8002138 <memmove+0x14>
 8002130:	2300      	movs	r3, #0
 8002132:	e007      	b.n	8002144 <memmove+0x20>
 8002134:	5c8b      	ldrb	r3, [r1, r2]
 8002136:	5483      	strb	r3, [r0, r2]
 8002138:	3a01      	subs	r2, #1
 800213a:	d2fb      	bcs.n	8002134 <memmove+0x10>
 800213c:	bd10      	pop	{r4, pc}
 800213e:	5ccc      	ldrb	r4, [r1, r3]
 8002140:	54c4      	strb	r4, [r0, r3]
 8002142:	3301      	adds	r3, #1
 8002144:	429a      	cmp	r2, r3
 8002146:	d1fa      	bne.n	800213e <memmove+0x1a>
 8002148:	e7f8      	b.n	800213c <memmove+0x18>
	...

0800214c <_free_r>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	0005      	movs	r5, r0
 8002150:	2900      	cmp	r1, #0
 8002152:	d010      	beq.n	8002176 <_free_r+0x2a>
 8002154:	1f0c      	subs	r4, r1, #4
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	da00      	bge.n	800215e <_free_r+0x12>
 800215c:	18e4      	adds	r4, r4, r3
 800215e:	0028      	movs	r0, r5
 8002160:	f000 f918 	bl	8002394 <__malloc_lock>
 8002164:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <_free_r+0x90>)
 8002166:	6813      	ldr	r3, [r2, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <_free_r+0x2c>
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	6014      	str	r4, [r2, #0]
 8002170:	0028      	movs	r0, r5
 8002172:	f000 f917 	bl	80023a4 <__malloc_unlock>
 8002176:	bd70      	pop	{r4, r5, r6, pc}
 8002178:	42a3      	cmp	r3, r4
 800217a:	d908      	bls.n	800218e <_free_r+0x42>
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	1860      	adds	r0, r4, r1
 8002180:	4283      	cmp	r3, r0
 8002182:	d1f3      	bne.n	800216c <_free_r+0x20>
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	1841      	adds	r1, r0, r1
 800218a:	6021      	str	r1, [r4, #0]
 800218c:	e7ee      	b.n	800216c <_free_r+0x20>
 800218e:	001a      	movs	r2, r3
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <_free_r+0x4e>
 8002196:	42a3      	cmp	r3, r4
 8002198:	d9f9      	bls.n	800218e <_free_r+0x42>
 800219a:	6811      	ldr	r1, [r2, #0]
 800219c:	1850      	adds	r0, r2, r1
 800219e:	42a0      	cmp	r0, r4
 80021a0:	d10b      	bne.n	80021ba <_free_r+0x6e>
 80021a2:	6820      	ldr	r0, [r4, #0]
 80021a4:	1809      	adds	r1, r1, r0
 80021a6:	1850      	adds	r0, r2, r1
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	4283      	cmp	r3, r0
 80021ac:	d1e0      	bne.n	8002170 <_free_r+0x24>
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	1841      	adds	r1, r0, r1
 80021b4:	6011      	str	r1, [r2, #0]
 80021b6:	6053      	str	r3, [r2, #4]
 80021b8:	e7da      	b.n	8002170 <_free_r+0x24>
 80021ba:	42a0      	cmp	r0, r4
 80021bc:	d902      	bls.n	80021c4 <_free_r+0x78>
 80021be:	230c      	movs	r3, #12
 80021c0:	602b      	str	r3, [r5, #0]
 80021c2:	e7d5      	b.n	8002170 <_free_r+0x24>
 80021c4:	6821      	ldr	r1, [r4, #0]
 80021c6:	1860      	adds	r0, r4, r1
 80021c8:	4283      	cmp	r3, r0
 80021ca:	d103      	bne.n	80021d4 <_free_r+0x88>
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	1841      	adds	r1, r0, r1
 80021d2:	6021      	str	r1, [r4, #0]
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	6054      	str	r4, [r2, #4]
 80021d8:	e7ca      	b.n	8002170 <_free_r+0x24>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	200001e0 	.word	0x200001e0

080021e0 <sbrk_aligned>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4e0f      	ldr	r6, [pc, #60]	; (8002220 <sbrk_aligned+0x40>)
 80021e4:	000d      	movs	r5, r1
 80021e6:	6831      	ldr	r1, [r6, #0]
 80021e8:	0004      	movs	r4, r0
 80021ea:	2900      	cmp	r1, #0
 80021ec:	d102      	bne.n	80021f4 <sbrk_aligned+0x14>
 80021ee:	f000 f8bf 	bl	8002370 <_sbrk_r>
 80021f2:	6030      	str	r0, [r6, #0]
 80021f4:	0029      	movs	r1, r5
 80021f6:	0020      	movs	r0, r4
 80021f8:	f000 f8ba 	bl	8002370 <_sbrk_r>
 80021fc:	1c43      	adds	r3, r0, #1
 80021fe:	d00a      	beq.n	8002216 <sbrk_aligned+0x36>
 8002200:	2303      	movs	r3, #3
 8002202:	1cc5      	adds	r5, r0, #3
 8002204:	439d      	bics	r5, r3
 8002206:	42a8      	cmp	r0, r5
 8002208:	d007      	beq.n	800221a <sbrk_aligned+0x3a>
 800220a:	1a29      	subs	r1, r5, r0
 800220c:	0020      	movs	r0, r4
 800220e:	f000 f8af 	bl	8002370 <_sbrk_r>
 8002212:	1c43      	adds	r3, r0, #1
 8002214:	d101      	bne.n	800221a <sbrk_aligned+0x3a>
 8002216:	2501      	movs	r5, #1
 8002218:	426d      	negs	r5, r5
 800221a:	0028      	movs	r0, r5
 800221c:	bd70      	pop	{r4, r5, r6, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	200001e4 	.word	0x200001e4

08002224 <_malloc_r>:
 8002224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002226:	2203      	movs	r2, #3
 8002228:	1ccb      	adds	r3, r1, #3
 800222a:	4393      	bics	r3, r2
 800222c:	3308      	adds	r3, #8
 800222e:	0006      	movs	r6, r0
 8002230:	001f      	movs	r7, r3
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d232      	bcs.n	800229c <_malloc_r+0x78>
 8002236:	270c      	movs	r7, #12
 8002238:	42b9      	cmp	r1, r7
 800223a:	d831      	bhi.n	80022a0 <_malloc_r+0x7c>
 800223c:	0030      	movs	r0, r6
 800223e:	f000 f8a9 	bl	8002394 <__malloc_lock>
 8002242:	4d32      	ldr	r5, [pc, #200]	; (800230c <_malloc_r+0xe8>)
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	001c      	movs	r4, r3
 8002248:	2c00      	cmp	r4, #0
 800224a:	d12e      	bne.n	80022aa <_malloc_r+0x86>
 800224c:	0039      	movs	r1, r7
 800224e:	0030      	movs	r0, r6
 8002250:	f7ff ffc6 	bl	80021e0 <sbrk_aligned>
 8002254:	0004      	movs	r4, r0
 8002256:	1c43      	adds	r3, r0, #1
 8002258:	d11e      	bne.n	8002298 <_malloc_r+0x74>
 800225a:	682c      	ldr	r4, [r5, #0]
 800225c:	0025      	movs	r5, r4
 800225e:	2d00      	cmp	r5, #0
 8002260:	d14a      	bne.n	80022f8 <_malloc_r+0xd4>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	0029      	movs	r1, r5
 8002266:	18e3      	adds	r3, r4, r3
 8002268:	0030      	movs	r0, r6
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f000 f880 	bl	8002370 <_sbrk_r>
 8002270:	9b01      	ldr	r3, [sp, #4]
 8002272:	4283      	cmp	r3, r0
 8002274:	d143      	bne.n	80022fe <_malloc_r+0xda>
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	3703      	adds	r7, #3
 800227a:	1aff      	subs	r7, r7, r3
 800227c:	2303      	movs	r3, #3
 800227e:	439f      	bics	r7, r3
 8002280:	3708      	adds	r7, #8
 8002282:	2f0c      	cmp	r7, #12
 8002284:	d200      	bcs.n	8002288 <_malloc_r+0x64>
 8002286:	270c      	movs	r7, #12
 8002288:	0039      	movs	r1, r7
 800228a:	0030      	movs	r0, r6
 800228c:	f7ff ffa8 	bl	80021e0 <sbrk_aligned>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	d034      	beq.n	80022fe <_malloc_r+0xda>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	19df      	adds	r7, r3, r7
 8002298:	6027      	str	r7, [r4, #0]
 800229a:	e013      	b.n	80022c4 <_malloc_r+0xa0>
 800229c:	2b00      	cmp	r3, #0
 800229e:	dacb      	bge.n	8002238 <_malloc_r+0x14>
 80022a0:	230c      	movs	r3, #12
 80022a2:	2500      	movs	r5, #0
 80022a4:	6033      	str	r3, [r6, #0]
 80022a6:	0028      	movs	r0, r5
 80022a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	1bd1      	subs	r1, r2, r7
 80022ae:	d420      	bmi.n	80022f2 <_malloc_r+0xce>
 80022b0:	290b      	cmp	r1, #11
 80022b2:	d917      	bls.n	80022e4 <_malloc_r+0xc0>
 80022b4:	19e2      	adds	r2, r4, r7
 80022b6:	6027      	str	r7, [r4, #0]
 80022b8:	42a3      	cmp	r3, r4
 80022ba:	d111      	bne.n	80022e0 <_malloc_r+0xbc>
 80022bc:	602a      	str	r2, [r5, #0]
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	6011      	str	r1, [r2, #0]
 80022c2:	6053      	str	r3, [r2, #4]
 80022c4:	0030      	movs	r0, r6
 80022c6:	0025      	movs	r5, r4
 80022c8:	f000 f86c 	bl	80023a4 <__malloc_unlock>
 80022cc:	2207      	movs	r2, #7
 80022ce:	350b      	adds	r5, #11
 80022d0:	1d23      	adds	r3, r4, #4
 80022d2:	4395      	bics	r5, r2
 80022d4:	1aea      	subs	r2, r5, r3
 80022d6:	429d      	cmp	r5, r3
 80022d8:	d0e5      	beq.n	80022a6 <_malloc_r+0x82>
 80022da:	1b5b      	subs	r3, r3, r5
 80022dc:	50a3      	str	r3, [r4, r2]
 80022de:	e7e2      	b.n	80022a6 <_malloc_r+0x82>
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e7ec      	b.n	80022be <_malloc_r+0x9a>
 80022e4:	6862      	ldr	r2, [r4, #4]
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	d101      	bne.n	80022ee <_malloc_r+0xca>
 80022ea:	602a      	str	r2, [r5, #0]
 80022ec:	e7ea      	b.n	80022c4 <_malloc_r+0xa0>
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	e7e8      	b.n	80022c4 <_malloc_r+0xa0>
 80022f2:	0023      	movs	r3, r4
 80022f4:	6864      	ldr	r4, [r4, #4]
 80022f6:	e7a7      	b.n	8002248 <_malloc_r+0x24>
 80022f8:	002c      	movs	r4, r5
 80022fa:	686d      	ldr	r5, [r5, #4]
 80022fc:	e7af      	b.n	800225e <_malloc_r+0x3a>
 80022fe:	230c      	movs	r3, #12
 8002300:	0030      	movs	r0, r6
 8002302:	6033      	str	r3, [r6, #0]
 8002304:	f000 f84e 	bl	80023a4 <__malloc_unlock>
 8002308:	e7cd      	b.n	80022a6 <_malloc_r+0x82>
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	200001e0 	.word	0x200001e0

08002310 <_realloc_r>:
 8002310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002312:	0007      	movs	r7, r0
 8002314:	000e      	movs	r6, r1
 8002316:	0014      	movs	r4, r2
 8002318:	2900      	cmp	r1, #0
 800231a:	d105      	bne.n	8002328 <_realloc_r+0x18>
 800231c:	0011      	movs	r1, r2
 800231e:	f7ff ff81 	bl	8002224 <_malloc_r>
 8002322:	0005      	movs	r5, r0
 8002324:	0028      	movs	r0, r5
 8002326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002328:	2a00      	cmp	r2, #0
 800232a:	d103      	bne.n	8002334 <_realloc_r+0x24>
 800232c:	f7ff ff0e 	bl	800214c <_free_r>
 8002330:	0025      	movs	r5, r4
 8002332:	e7f7      	b.n	8002324 <_realloc_r+0x14>
 8002334:	f000 f83e 	bl	80023b4 <_malloc_usable_size_r>
 8002338:	9001      	str	r0, [sp, #4]
 800233a:	4284      	cmp	r4, r0
 800233c:	d803      	bhi.n	8002346 <_realloc_r+0x36>
 800233e:	0035      	movs	r5, r6
 8002340:	0843      	lsrs	r3, r0, #1
 8002342:	42a3      	cmp	r3, r4
 8002344:	d3ee      	bcc.n	8002324 <_realloc_r+0x14>
 8002346:	0021      	movs	r1, r4
 8002348:	0038      	movs	r0, r7
 800234a:	f7ff ff6b 	bl	8002224 <_malloc_r>
 800234e:	1e05      	subs	r5, r0, #0
 8002350:	d0e8      	beq.n	8002324 <_realloc_r+0x14>
 8002352:	9b01      	ldr	r3, [sp, #4]
 8002354:	0022      	movs	r2, r4
 8002356:	429c      	cmp	r4, r3
 8002358:	d900      	bls.n	800235c <_realloc_r+0x4c>
 800235a:	001a      	movs	r2, r3
 800235c:	0031      	movs	r1, r6
 800235e:	0028      	movs	r0, r5
 8002360:	f7ff fed7 	bl	8002112 <memcpy>
 8002364:	0031      	movs	r1, r6
 8002366:	0038      	movs	r0, r7
 8002368:	f7ff fef0 	bl	800214c <_free_r>
 800236c:	e7da      	b.n	8002324 <_realloc_r+0x14>
	...

08002370 <_sbrk_r>:
 8002370:	2300      	movs	r3, #0
 8002372:	b570      	push	{r4, r5, r6, lr}
 8002374:	4d06      	ldr	r5, [pc, #24]	; (8002390 <_sbrk_r+0x20>)
 8002376:	0004      	movs	r4, r0
 8002378:	0008      	movs	r0, r1
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	f7fe f84a 	bl	8000414 <_sbrk>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d103      	bne.n	800238c <_sbrk_r+0x1c>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d000      	beq.n	800238c <_sbrk_r+0x1c>
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	200001e8 	.word	0x200001e8

08002394 <__malloc_lock>:
 8002394:	b510      	push	{r4, lr}
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <__malloc_lock+0xc>)
 8002398:	f000 f814 	bl	80023c4 <__retarget_lock_acquire_recursive>
 800239c:	bd10      	pop	{r4, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	200001ec 	.word	0x200001ec

080023a4 <__malloc_unlock>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <__malloc_unlock+0xc>)
 80023a8:	f000 f80d 	bl	80023c6 <__retarget_lock_release_recursive>
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	200001ec 	.word	0x200001ec

080023b4 <_malloc_usable_size_r>:
 80023b4:	1f0b      	subs	r3, r1, #4
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	1f18      	subs	r0, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da01      	bge.n	80023c2 <_malloc_usable_size_r+0xe>
 80023be:	580b      	ldr	r3, [r1, r0]
 80023c0:	18c0      	adds	r0, r0, r3
 80023c2:	4770      	bx	lr

080023c4 <__retarget_lock_acquire_recursive>:
 80023c4:	4770      	bx	lr

080023c6 <__retarget_lock_release_recursive>:
 80023c6:	4770      	bx	lr

080023c8 <_init>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr

080023d4 <_fini>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr
